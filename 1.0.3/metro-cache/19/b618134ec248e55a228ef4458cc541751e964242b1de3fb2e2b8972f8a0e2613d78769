{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.checkValidArgs = checkValidArgs;\n  exports.checkValidInput = checkValidInput;\n  exports.convertError = convertError;\n  exports.convertErrors = convertErrors;\n  function checkValidArgs(keyValuePairs, callback) {\n    if (!Array.isArray(keyValuePairs) || keyValuePairs.length === 0 || !Array.isArray(keyValuePairs[0])) {\n      throw new Error(\"[AsyncStorage] Expected array of key-value pairs as first argument to multiSet\");\n    }\n    if (callback && typeof callback !== \"function\") {\n      if (Array.isArray(callback)) {\n        throw new Error(\"[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?\");\n      }\n      throw new Error(\"[AsyncStorage] Expected function as second argument to multiSet\");\n    }\n  }\n  function checkValidInput() {\n    for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {\n      input[_key] = arguments[_key];\n    }\n    var key = input[0],\n      value = input[1];\n    if (typeof key !== \"string\") {\n      // eslint-disable-next-line no-console\n      console.warn(`[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`);\n    }\n    if (input.length > 1 && typeof value !== \"string\") {\n      if (value == null) {\n        throw new Error(`[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`);\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`);\n      }\n    }\n  }\n  function convertError(error) {\n    if (!error) {\n      return null;\n    }\n    var out = new Error(error.message);\n    out[\"key\"] = error.key;\n    return out;\n  }\n  function convertErrors(errs) {\n    var errors = ensureArray(errs);\n    return errors ? errors.map(e => convertError(e)) : null;\n  }\n  function ensureArray(e) {\n    if (Array.isArray(e)) {\n      return e.length === 0 ? null : e;\n    } else if (e) {\n      return [e];\n    } else {\n      return null;\n    }\n  }\n});","lineCount":60,"map":[[9,2,3,7],[9,11,3,16,"checkValidArgs"],[9,25,3,30,"checkValidArgs"],[9,26,3,31,"keyValuePairs"],[9,39,3,55],[9,41,3,57,"callback"],[9,49,3,74],[9,51,3,76],[10,4,4,2],[10,8,5,4],[10,9,5,5,"Array"],[10,14,5,10],[10,15,5,11,"isArray"],[10,22,5,18],[10,23,5,19,"keyValuePairs"],[10,36,5,32],[10,37,5,33],[10,41,6,4,"keyValuePairs"],[10,54,6,17],[10,55,6,18,"length"],[10,61,6,24],[10,66,6,29],[10,67,6,30],[10,71,7,4],[10,72,7,5,"Array"],[10,77,7,10],[10,78,7,11,"isArray"],[10,85,7,18],[10,86,7,19,"keyValuePairs"],[10,99,7,32],[10,100,7,33],[10,101,7,34],[10,102,7,35],[10,103,7,36],[10,105,8,4],[11,6,9,4],[11,12,9,10],[11,16,9,14,"Error"],[11,21,9,19],[11,22,10,6],[11,102,11,4],[11,103,11,5],[12,4,12,2],[13,4,14,2],[13,8,14,6,"callback"],[13,16,14,14],[13,20,14,18],[13,27,14,25,"callback"],[13,35,14,33],[13,40,14,38],[13,50,14,48],[13,52,14,50],[14,6,15,4],[14,10,15,8,"Array"],[14,15,15,13],[14,16,15,14,"isArray"],[14,23,15,21],[14,24,15,22,"callback"],[14,32,15,30],[14,33,15,31],[14,35,15,33],[15,8,16,6],[15,14,16,12],[15,18,16,16,"Error"],[15,23,16,21],[15,24,17,8],[15,165,18,6],[15,166,18,7],[16,6,19,4],[17,6,21,4],[17,12,21,10],[17,16,21,14,"Error"],[17,21,21,19],[17,22,22,6],[17,87,23,4],[17,88,23,5],[18,4,24,2],[19,2,25,0],[20,2,27,7],[20,11,27,16,"checkValidInput"],[20,26,27,31,"checkValidInput"],[20,27,27,31],[20,29,27,53],[21,4,27,53],[21,13,27,53,"_len"],[21,17,27,53],[21,20,27,53,"arguments"],[21,29,27,53],[21,30,27,53,"length"],[21,36,27,53],[21,38,27,35,"input"],[21,43,27,40],[21,50,27,40,"Array"],[21,55,27,40],[21,56,27,40,"_len"],[21,60,27,40],[21,63,27,40,"_key"],[21,67,27,40],[21,73,27,40,"_key"],[21,77,27,40],[21,80,27,40,"_len"],[21,84,27,40],[21,86,27,40,"_key"],[21,90,27,40],[22,6,27,35,"input"],[22,11,27,40],[22,12,27,40,"_key"],[22,16,27,40],[22,20,27,40,"arguments"],[22,29,27,40],[22,30,27,40,"_key"],[22,34,27,40],[23,4,27,40],[24,4,28,2],[24,8,28,9,"key"],[24,11,28,12],[24,14,28,23,"input"],[24,19,28,28],[25,6,28,14,"value"],[25,11,28,19],[25,14,28,23,"input"],[25,19,28,28],[26,4,30,2],[26,8,30,6],[26,15,30,13,"key"],[26,18,30,16],[26,23,30,21],[26,31,30,29],[26,33,30,31],[27,6,31,4],[28,6,32,4,"console"],[28,13,32,11],[28,14,32,12,"warn"],[28,18,32,16],[28,19,33,6],[28,43,33,30],[28,50,33,37,"key"],[28,53,33,40],[28,166,33,153,"key"],[28,169,33,156],[28,173,34,4],[28,174,34,5],[29,4,35,2],[30,4,37,2],[30,8,37,6,"input"],[30,13,37,11],[30,14,37,12,"length"],[30,20,37,18],[30,23,37,21],[30,24,37,22],[30,28,37,26],[30,35,37,33,"value"],[30,40,37,38],[30,45,37,43],[30,53,37,51],[30,55,37,53],[31,6,38,4],[31,10,38,8,"value"],[31,15,38,13],[31,19,38,17],[31,23,38,21],[31,25,38,23],[32,8,39,6],[32,14,39,12],[32,18,39,16,"Error"],[32,23,39,21],[32,24,40,8],[32,168,40,152,"value"],[32,173,40,157],[32,190,40,174,"key"],[32,193,40,177],[32,197,41,6],[32,198,41,7],[33,6,42,4],[33,7,42,5],[33,13,42,11],[34,8,43,6],[35,8,44,6,"console"],[35,15,44,13],[35,16,44,14,"warn"],[35,20,44,18],[35,21,45,8],[35,58,45,45,"key"],[35,61,45,48],[35,169,45,156,"value"],[35,174,45,161],[35,191,45,178,"key"],[35,194,45,181],[35,198,46,6],[35,199,46,7],[36,6,47,4],[37,4,48,2],[38,2,49,0],[39,2,51,7],[39,11,51,16,"convertError"],[39,23,51,28,"convertError"],[39,24,51,29,"error"],[39,29,51,46],[39,31,51,62],[40,4,52,2],[40,8,52,6],[40,9,52,7,"error"],[40,14,52,12],[40,16,52,14],[41,6,53,4],[41,13,53,11],[41,17,53,15],[42,4,54,2],[43,4,56,2],[43,8,56,8,"out"],[43,11,56,11],[43,14,56,14],[43,18,56,18,"Error"],[43,23,56,23],[43,24,56,24,"error"],[43,29,56,29],[43,30,56,30,"message"],[43,37,56,37],[43,38,56,59],[44,4,57,2,"out"],[44,7,57,5],[44,8,57,6],[44,13,57,11],[44,14,57,12],[44,17,57,15,"error"],[44,22,57,20],[44,23,57,21,"key"],[44,26,57,24],[45,4,58,2],[45,11,58,9,"out"],[45,14,58,12],[46,2,59,0],[47,2,61,7],[47,11,61,16,"convertErrors"],[47,24,61,29,"convertErrors"],[47,25,62,2,"errs"],[47,29,62,20],[47,31,63,38],[48,4,64,2],[48,8,64,8,"errors"],[48,14,64,14],[48,17,64,17,"ensureArray"],[48,28,64,28],[48,29,64,29,"errs"],[48,33,64,33],[48,34,64,34],[49,4,65,2],[49,11,65,9,"errors"],[49,17,65,15],[49,20,65,18,"errors"],[49,26,65,24],[49,27,65,25,"map"],[49,30,65,28],[49,31,65,30,"e"],[49,32,65,31],[49,36,65,36,"convertError"],[49,48,65,48],[49,49,65,49,"e"],[49,50,65,50],[49,51,65,51],[49,52,65,52],[49,55,65,55],[49,59,65,59],[50,2,66,0],[51,2,68,0],[51,11,68,9,"ensureArray"],[51,22,68,20,"ensureArray"],[51,23,68,21,"e"],[51,24,68,48],[51,26,68,70],[52,4,69,2],[52,8,69,6,"Array"],[52,13,69,11],[52,14,69,12,"isArray"],[52,21,69,19],[52,22,69,20,"e"],[52,23,69,21],[52,24,69,22],[52,26,69,24],[53,6,70,4],[53,13,70,11,"e"],[53,14,70,12],[53,15,70,13,"length"],[53,21,70,19],[53,26,70,24],[53,27,70,25],[53,30,70,28],[53,34,70,32],[53,37,70,35,"e"],[53,38,70,36],[54,4,71,2],[54,5,71,3],[54,11,71,9],[54,15,71,13,"e"],[54,16,71,14],[54,18,71,16],[55,6,72,4],[55,13,72,11],[55,14,72,12,"e"],[55,15,72,13],[55,16,72,14],[56,4,73,2],[56,5,73,3],[56,11,73,9],[57,6,74,4],[57,13,74,11],[57,17,74,15],[58,4,75,2],[59,2,76,0],[60,0,76,1],[60,3]],"functionMap":{"names":["<global>","checkValidArgs","checkValidInput","convertError","convertErrors","errors.map$argument_0","ensureArray"],"mappings":"AAA;OCE;CDsB;OEE;CFsB;OGE;CHQ;OIE;6BCI,sBD;CJC;AME;CNQ"}},"type":"js/module"}]}