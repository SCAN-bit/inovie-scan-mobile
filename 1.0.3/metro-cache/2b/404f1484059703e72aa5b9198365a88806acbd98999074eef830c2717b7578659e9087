{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7916}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7916}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7916}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7916}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":69,"index":69}}],"key":"6eZFbfKht0uO2NEVT/d8+i8B0s8="}},{"name":"@react-native-community/netinfo","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":71},"end":{"line":2,"column":54,"index":125}}],"key":"ltLFhIfxyy89okchfB5w/bUar/s="}},{"name":"./firebaseService","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":127},"end":{"line":3,"column":48,"index":175}}],"key":"Z9W0kV4DuAJReQqrXJFhVrW6SCk="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = undefined;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));\n  var _asyncStorage = _interopRequireDefault(require(_dependencyMap[4]));\n  var _netinfo = _interopRequireDefault(require(_dependencyMap[5]));\n  var _firebaseService = _interopRequireDefault(require(_dependencyMap[6]));\n  var OfflineQueueService = /*#__PURE__*/function () {\n    function OfflineQueueService() {\n      (0, _classCallCheck2.default)(this, OfflineQueueService);\n      this.isProcessing = false;\n      this.queueKey = 'offline_scan_queue';\n      this.retryInterval = null;\n      this.listeners = [];\n\n      // Écouter les changements de connectivité\n      this.initNetworkListener();\n    }\n\n    // Initialiser l'écoute de la connectivité réseau\n    return (0, _createClass2.default)(OfflineQueueService, [{\n      key: \"initNetworkListener\",\n      value: function initNetworkListener() {\n        _netinfo.default.addEventListener(state => {\n          console.log('[OfflineQueue] État réseau:', state.isConnected);\n          if (state.isConnected && !this.isProcessing) {\n            this.processQueue();\n          }\n        });\n      }\n\n      // Ajouter des scans à la queue hors-ligne\n    }, {\n      key: \"addToQueue\",\n      value: function () {\n        var _addToQueue = (0, _asyncToGenerator2.default)(function* (scansData) {\n          try {\n            var existingQueue = yield this.getQueue();\n            var timestamp = Date.now();\n            var queueItem = {\n              id: `queue_${timestamp}_${Math.random().toString(36).substr(2, 9)}`,\n              data: scansData,\n              timestamp,\n              retryCount: 0,\n              status: 'pending'\n            };\n            existingQueue.push(queueItem);\n            yield _asyncStorage.default.setItem(this.queueKey, JSON.stringify(existingQueue));\n            console.log(`[OfflineQueue] ✅ ${scansData.length} scan(s) ajouté(s) à la queue hors-ligne`);\n\n            // Notifier les listeners\n            this.notifyListeners('queued', {\n              count: scansData.length,\n              queueSize: existingQueue.length\n            });\n            return queueItem.id;\n          } catch (error) {\n            console.error('[OfflineQueue] ❌ Erreur ajout queue:', error);\n            throw error;\n          }\n        });\n        function addToQueue(_x) {\n          return _addToQueue.apply(this, arguments);\n        }\n        return addToQueue;\n      }() // Récupérer la queue actuelle\n    }, {\n      key: \"getQueue\",\n      value: function () {\n        var _getQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var queue = yield _asyncStorage.default.getItem(this.queueKey);\n            return queue ? JSON.parse(queue) : [];\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur lecture queue:', error);\n            return [];\n          }\n        });\n        function getQueue() {\n          return _getQueue.apply(this, arguments);\n        }\n        return getQueue;\n      }() // Obtenir le nombre d'éléments en attente\n    }, {\n      key: \"getQueueSize\",\n      value: function () {\n        var _getQueueSize = (0, _asyncToGenerator2.default)(function* () {\n          var queue = yield this.getQueue();\n          return queue.filter(item => item.status === 'pending').length;\n        });\n        function getQueueSize() {\n          return _getQueueSize.apply(this, arguments);\n        }\n        return getQueueSize;\n      }() // Traiter la queue quand la connexion revient\n    }, {\n      key: \"processQueue\",\n      value: function () {\n        var _processQueue = (0, _asyncToGenerator2.default)(function* () {\n          if (this.isProcessing) return;\n          this.isProcessing = true;\n          console.log('[OfflineQueue] 🔄 Traitement de la queue...');\n          try {\n            var queue = yield this.getQueue();\n            var pendingItems = queue.filter(item => item.status === 'pending');\n            if (pendingItems.length === 0) {\n              console.log('[OfflineQueue] ✅ Queue vide');\n              this.isProcessing = false;\n              return;\n            }\n            console.log(`[OfflineQueue] 📤 Traitement de ${pendingItems.length} élément(s) en attente`);\n            var successCount = 0;\n            var failCount = 0;\n            for (var item of pendingItems) {\n              try {\n                // Vérifier la connectivité avant chaque tentative\n                var netState = yield _netinfo.default.fetch();\n                if (!netState.isConnected) {\n                  console.log('[OfflineQueue] ⚠️ Connexion perdue pendant le traitement');\n                  break;\n                }\n                console.log(`[OfflineQueue] 📤 Envoi de ${item.data.length} scan(s)...`);\n                var result = yield _firebaseService.default.addScans(item.data);\n                if (result.success) {\n                  // Marquer comme réussi\n                  item.status = 'completed';\n                  item.completedAt = Date.now();\n                  successCount++;\n                  console.log(`[OfflineQueue] ✅ Envoi réussi: ${item.data.length} scan(s)`);\n                  this.notifyListeners('sent', {\n                    count: item.data.length\n                  });\n                } else {\n                  throw new Error(result.error || 'Échec envoi');\n                }\n              } catch (error) {\n                console.error(`[OfflineQueue] ❌ Échec envoi item ${item.id}:`, error.message);\n                item.retryCount = (item.retryCount || 0) + 1;\n                item.lastError = error.message;\n                item.lastRetry = Date.now();\n\n                // Abandon après 3 tentatives\n                if (item.retryCount >= 3) {\n                  item.status = 'failed';\n                  console.error(`[OfflineQueue] ⚠️ Abandon après 3 tentatives: ${item.id}`);\n                }\n                failCount++;\n              }\n            }\n\n            // Sauvegarder la queue mise à jour\n            yield _asyncStorage.default.setItem(this.queueKey, JSON.stringify(queue));\n\n            // Nettoyer les éléments traités (garder seulement pending et failed récents)\n            yield this.cleanupQueue();\n            console.log(`[OfflineQueue] ✅ Traitement terminé: ${successCount} réussis, ${failCount} échecs`);\n            this.notifyListeners('processed', {\n              success: successCount,\n              failed: failCount,\n              remaining: yield this.getQueueSize()\n            });\n          } catch (error) {\n            console.error('[OfflineQueue] ❌ Erreur traitement queue:', error);\n          } finally {\n            this.isProcessing = false;\n          }\n        });\n        function processQueue() {\n          return _processQueue.apply(this, arguments);\n        }\n        return processQueue;\n      }() // Nettoyer la queue (supprimer les anciens éléments traités)\n    }, {\n      key: \"cleanupQueue\",\n      value: function () {\n        var _cleanupQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var queue = yield this.getQueue();\n            var now = Date.now();\n            var maxAge = 86400000; // 24h\n\n            var cleanedQueue = queue.filter(item => {\n              // Garder les éléments pending\n              if (item.status === 'pending') return true;\n\n              // Garder les éléments récents (moins de 24h)\n              var age = now - (item.completedAt || item.timestamp);\n              return age < maxAge;\n            });\n            if (cleanedQueue.length !== queue.length) {\n              yield _asyncStorage.default.setItem(this.queueKey, JSON.stringify(cleanedQueue));\n              console.log(`[OfflineQueue] 🧹 Queue nettoyée: ${queue.length - cleanedQueue.length} anciens éléments supprimés`);\n            }\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur nettoyage queue:', error);\n          }\n        });\n        function cleanupQueue() {\n          return _cleanupQueue.apply(this, arguments);\n        }\n        return cleanupQueue;\n      }() // Vider complètement la queue\n    }, {\n      key: \"clearQueue\",\n      value: function () {\n        var _clearQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield _asyncStorage.default.removeItem(this.queueKey);\n            console.log('[OfflineQueue] 🗑️ Queue vidée');\n            this.notifyListeners('cleared', {});\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur vidage queue:', error);\n            throw error;\n          }\n        });\n        function clearQueue() {\n          return _clearQueue.apply(this, arguments);\n        }\n        return clearQueue;\n      }() // Forcer le traitement de la queue\n    }, {\n      key: \"forceProcess\",\n      value: function () {\n        var _forceProcess = (0, _asyncToGenerator2.default)(function* () {\n          if (this.isProcessing) {\n            console.log('[OfflineQueue] ⚠️ Traitement déjà en cours');\n            return;\n          }\n          var netState = yield _netinfo.default.fetch();\n          if (!netState.isConnected) {\n            throw new Error('Aucune connexion réseau disponible');\n          }\n          yield this.processQueue();\n        });\n        function forceProcess() {\n          return _forceProcess.apply(this, arguments);\n        }\n        return forceProcess;\n      }() // Ajouter un listener pour les événements\n    }, {\n      key: \"addListener\",\n      value: function addListener(callback) {\n        this.listeners.push(callback);\n        return () => {\n          this.listeners = this.listeners.filter(l => l !== callback);\n        };\n      }\n\n      // Notifier tous les listeners\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(event, data) {\n        this.listeners.forEach(listener => {\n          try {\n            listener(event, data);\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur listener:', error);\n          }\n        });\n      }\n\n      // Obtenir les statistiques de la queue\n    }, {\n      key: \"getStats\",\n      value: function () {\n        var _getStats = (0, _asyncToGenerator2.default)(function* () {\n          var queue = yield this.getQueue();\n          return {\n            total: queue.length,\n            pending: queue.filter(item => item.status === 'pending').length,\n            completed: queue.filter(item => item.status === 'completed').length,\n            failed: queue.filter(item => item.status === 'failed').length,\n            oldestPending: queue.filter(item => item.status === 'pending').reduce((oldest, item) => !oldest || item.timestamp < oldest.timestamp ? item : oldest, null)\n          };\n        });\n        function getStats() {\n          return _getStats.apply(this, arguments);\n        }\n        return getStats;\n      }()\n    }]);\n  }(); // Instance singleton\n  var offlineQueueService = new OfflineQueueService();\n  var _default = exports.default = offlineQueueService;\n});","lineCount":290,"map":[[10,2,1,0],[10,6,1,0,"_asyncStorage"],[10,19,1,0],[10,22,1,0,"_interopRequireDefault"],[10,44,1,0],[10,45,1,0,"require"],[10,52,1,0],[10,53,1,0,"_dependencyMap"],[10,67,1,0],[11,2,2,0],[11,6,2,0,"_netinfo"],[11,14,2,0],[11,17,2,0,"_interopRequireDefault"],[11,39,2,0],[11,40,2,0,"require"],[11,47,2,0],[11,48,2,0,"_dependencyMap"],[11,62,2,0],[12,2,3,0],[12,6,3,0,"_firebaseService"],[12,22,3,0],[12,25,3,0,"_interopRequireDefault"],[12,47,3,0],[12,48,3,0,"require"],[12,55,3,0],[12,56,3,0,"_dependencyMap"],[12,70,3,0],[13,2,3,48],[13,6,5,6,"OfflineQueueService"],[13,25,5,25],[14,4,6,2],[14,13,6,2,"OfflineQueueService"],[14,33,6,2],[14,35,6,16],[15,6,6,16],[15,10,6,16,"_classCallCheck2"],[15,26,6,16],[15,27,6,16,"default"],[15,34,6,16],[15,42,6,16,"OfflineQueueService"],[15,61,6,16],[16,6,7,4],[16,10,7,8],[16,11,7,9,"isProcessing"],[16,23,7,21],[16,26,7,24],[16,31,7,29],[17,6,8,4],[17,10,8,8],[17,11,8,9,"queueKey"],[17,19,8,17],[17,22,8,20],[17,42,8,40],[18,6,9,4],[18,10,9,8],[18,11,9,9,"retryInterval"],[18,24,9,22],[18,27,9,25],[18,31,9,29],[19,6,10,4],[19,10,10,8],[19,11,10,9,"listeners"],[19,20,10,18],[19,23,10,21],[19,25,10,23],[21,6,12,4],[22,6,13,4],[22,10,13,8],[22,11,13,9,"initNetworkListener"],[22,30,13,28],[22,31,13,29],[22,32,13,30],[23,4,14,2],[25,4,16,2],[26,4,16,2],[26,15,16,2,"_createClass2"],[26,28,16,2],[26,29,16,2,"default"],[26,36,16,2],[26,38,16,2,"OfflineQueueService"],[26,57,16,2],[27,6,16,2,"key"],[27,9,16,2],[28,6,16,2,"value"],[28,11,16,2],[28,13,17,2],[28,22,17,2,"initNetworkListener"],[28,41,17,21,"initNetworkListener"],[28,42,17,21],[28,44,17,24],[29,8,18,4,"NetInfo"],[29,24,18,11],[29,25,18,12,"addEventListener"],[29,41,18,28],[29,42,18,29,"state"],[29,47,18,34],[29,51,18,38],[30,10,19,6,"console"],[30,17,19,13],[30,18,19,14,"log"],[30,21,19,17],[30,22,19,18],[30,51,19,47],[30,53,19,49,"state"],[30,58,19,54],[30,59,19,55,"isConnected"],[30,70,19,66],[30,71,19,67],[31,10,21,6],[31,14,21,10,"state"],[31,19,21,15],[31,20,21,16,"isConnected"],[31,31,21,27],[31,35,21,31],[31,36,21,32],[31,40,21,36],[31,41,21,37,"isProcessing"],[31,53,21,49],[31,55,21,51],[32,12,22,8],[32,16,22,12],[32,17,22,13,"processQueue"],[32,29,22,25],[32,30,22,26],[32,31,22,27],[33,10,23,6],[34,8,24,4],[34,9,24,5],[34,10,24,6],[35,6,25,2],[37,6,27,2],[38,4,27,2],[39,6,27,2,"key"],[39,9,27,2],[40,6,27,2,"value"],[40,11,27,2],[41,8,27,2],[41,12,27,2,"_addToQueue"],[41,23,27,2],[41,30,27,2,"_asyncToGenerator2"],[41,48,27,2],[41,49,27,2,"default"],[41,56,27,2],[41,58,28,2],[41,69,28,19,"scansData"],[41,78,28,28],[41,80,28,30],[42,10,29,4],[42,14,29,8],[43,12,30,6],[43,16,30,12,"existingQueue"],[43,29,30,25],[43,38,30,34],[43,42,30,38],[43,43,30,39,"getQueue"],[43,51,30,47],[43,52,30,48],[43,53,30,49],[44,12,31,6],[44,16,31,12,"timestamp"],[44,25,31,21],[44,28,31,24,"Date"],[44,32,31,28],[44,33,31,29,"now"],[44,36,31,32],[44,37,31,33],[44,38,31,34],[45,12,33,6],[45,16,33,12,"queueItem"],[45,25,33,21],[45,28,33,24],[46,14,34,8,"id"],[46,16,34,10],[46,18,34,12],[46,27,34,21,"timestamp"],[46,36,34,30],[46,40,34,34,"Math"],[46,44,34,38],[46,45,34,39,"random"],[46,51,34,45],[46,52,34,46],[46,53,34,47],[46,54,34,48,"toString"],[46,62,34,56],[46,63,34,57],[46,65,34,59],[46,66,34,60],[46,67,34,61,"substr"],[46,73,34,67],[46,74,34,68],[46,75,34,69],[46,77,34,71],[46,78,34,72],[46,79,34,73],[46,81,34,75],[47,14,35,8,"data"],[47,18,35,12],[47,20,35,14,"scansData"],[47,29,35,23],[48,14,36,8,"timestamp"],[48,23,36,17],[49,14,37,8,"retryCount"],[49,24,37,18],[49,26,37,20],[49,27,37,21],[50,14,38,8,"status"],[50,20,38,14],[50,22,38,16],[51,12,39,6],[51,13,39,7],[52,12,41,6,"existingQueue"],[52,25,41,19],[52,26,41,20,"push"],[52,30,41,24],[52,31,41,25,"queueItem"],[52,40,41,34],[52,41,41,35],[53,12,42,6],[53,18,42,12,"AsyncStorage"],[53,39,42,24],[53,40,42,25,"setItem"],[53,47,42,32],[53,48,42,33],[53,52,42,37],[53,53,42,38,"queueKey"],[53,61,42,46],[53,63,42,48,"JSON"],[53,67,42,52],[53,68,42,53,"stringify"],[53,77,42,62],[53,78,42,63,"existingQueue"],[53,91,42,76],[53,92,42,77],[53,93,42,78],[54,12,44,6,"console"],[54,19,44,13],[54,20,44,14,"log"],[54,23,44,17],[54,24,44,18],[54,44,44,38,"scansData"],[54,53,44,47],[54,54,44,48,"length"],[54,60,44,54],[54,102,44,96],[54,103,44,97],[56,12,46,6],[57,12,47,6],[57,16,47,10],[57,17,47,11,"notifyListeners"],[57,32,47,26],[57,33,47,27],[57,41,47,35],[57,43,47,37],[58,14,47,39,"count"],[58,19,47,44],[58,21,47,46,"scansData"],[58,30,47,55],[58,31,47,56,"length"],[58,37,47,62],[59,14,47,64,"queueSize"],[59,23,47,73],[59,25,47,75,"existingQueue"],[59,38,47,88],[59,39,47,89,"length"],[60,12,47,96],[60,13,47,97],[60,14,47,98],[61,12,49,6],[61,19,49,13,"queueItem"],[61,28,49,22],[61,29,49,23,"id"],[61,31,49,25],[62,10,50,4],[62,11,50,5],[62,12,50,6],[62,19,50,13,"error"],[62,24,50,18],[62,26,50,20],[63,12,51,6,"console"],[63,19,51,13],[63,20,51,14,"error"],[63,25,51,19],[63,26,51,20],[63,64,51,58],[63,66,51,60,"error"],[63,71,51,65],[63,72,51,66],[64,12,52,6],[64,18,52,12,"error"],[64,23,52,17],[65,10,53,4],[66,8,54,2],[66,9,54,3],[67,8,54,3],[67,17,28,8,"addToQueue"],[67,27,28,18,"addToQueue"],[67,28,28,18,"_x"],[67,30,28,18],[68,10,28,18],[68,17,28,18,"_addToQueue"],[68,28,28,18],[68,29,28,18,"apply"],[68,34,28,18],[68,41,28,18,"arguments"],[68,50,28,18],[69,8,28,18],[70,8,28,18],[70,15,28,8,"addToQueue"],[70,25,28,18],[71,6,28,18],[71,10,56,2],[72,4,56,2],[73,6,56,2,"key"],[73,9,56,2],[74,6,56,2,"value"],[74,11,56,2],[75,8,56,2],[75,12,56,2,"_getQueue"],[75,21,56,2],[75,28,56,2,"_asyncToGenerator2"],[75,46,56,2],[75,47,56,2,"default"],[75,54,56,2],[75,56,57,2],[75,69,57,19],[76,10,58,4],[76,14,58,8],[77,12,59,6],[77,16,59,12,"queue"],[77,21,59,17],[77,30,59,26,"AsyncStorage"],[77,51,59,38],[77,52,59,39,"getItem"],[77,59,59,46],[77,60,59,47],[77,64,59,51],[77,65,59,52,"queueKey"],[77,73,59,60],[77,74,59,61],[78,12,60,6],[78,19,60,13,"queue"],[78,24,60,18],[78,27,60,21,"JSON"],[78,31,60,25],[78,32,60,26,"parse"],[78,37,60,31],[78,38,60,32,"queue"],[78,43,60,37],[78,44,60,38],[78,47,60,41],[78,49,60,43],[79,10,61,4],[79,11,61,5],[79,12,61,6],[79,19,61,13,"error"],[79,24,61,18],[79,26,61,20],[80,12,62,6,"console"],[80,19,62,13],[80,20,62,14,"error"],[80,25,62,19],[80,26,62,20],[80,64,62,58],[80,66,62,60,"error"],[80,71,62,65],[80,72,62,66],[81,12,63,6],[81,19,63,13],[81,21,63,15],[82,10,64,4],[83,8,65,2],[83,9,65,3],[84,8,65,3],[84,17,57,8,"getQueue"],[84,25,57,16,"getQueue"],[84,26,57,16],[85,10,57,16],[85,17,57,16,"_getQueue"],[85,26,57,16],[85,27,57,16,"apply"],[85,32,57,16],[85,39,57,16,"arguments"],[85,48,57,16],[86,8,57,16],[87,8,57,16],[87,15,57,8,"getQueue"],[87,23,57,16],[88,6,57,16],[88,10,67,2],[89,4,67,2],[90,6,67,2,"key"],[90,9,67,2],[91,6,67,2,"value"],[91,11,67,2],[92,8,67,2],[92,12,67,2,"_getQueueSize"],[92,25,67,2],[92,32,67,2,"_asyncToGenerator2"],[92,50,67,2],[92,51,67,2,"default"],[92,58,67,2],[92,60,68,2],[92,73,68,23],[93,10,69,4],[93,14,69,10,"queue"],[93,19,69,15],[93,28,69,24],[93,32,69,28],[93,33,69,29,"getQueue"],[93,41,69,37],[93,42,69,38],[93,43,69,39],[94,10,70,4],[94,17,70,11,"queue"],[94,22,70,16],[94,23,70,17,"filter"],[94,29,70,23],[94,30,70,24,"item"],[94,34,70,28],[94,38,70,32,"item"],[94,42,70,36],[94,43,70,37,"status"],[94,49,70,43],[94,54,70,48],[94,63,70,57],[94,64,70,58],[94,65,70,59,"length"],[94,71,70,65],[95,8,71,2],[95,9,71,3],[96,8,71,3],[96,17,68,8,"getQueueSize"],[96,29,68,20,"getQueueSize"],[96,30,68,20],[97,10,68,20],[97,17,68,20,"_getQueueSize"],[97,30,68,20],[97,31,68,20,"apply"],[97,36,68,20],[97,43,68,20,"arguments"],[97,52,68,20],[98,8,68,20],[99,8,68,20],[99,15,68,8,"getQueueSize"],[99,27,68,20],[100,6,68,20],[100,10,73,2],[101,4,73,2],[102,6,73,2,"key"],[102,9,73,2],[103,6,73,2,"value"],[103,11,73,2],[104,8,73,2],[104,12,73,2,"_processQueue"],[104,25,73,2],[104,32,73,2,"_asyncToGenerator2"],[104,50,73,2],[104,51,73,2,"default"],[104,58,73,2],[104,60,74,2],[104,73,74,23],[105,10,75,4],[105,14,75,8],[105,18,75,12],[105,19,75,13,"isProcessing"],[105,31,75,25],[105,33,75,27],[106,10,77,4],[106,14,77,8],[106,15,77,9,"isProcessing"],[106,27,77,21],[106,30,77,24],[106,34,77,28],[107,10,78,4,"console"],[107,17,78,11],[107,18,78,12,"log"],[107,21,78,15],[107,22,78,16],[107,67,78,61],[107,68,78,62],[108,10,80,4],[108,14,80,8],[109,12,81,6],[109,16,81,12,"queue"],[109,21,81,17],[109,30,81,26],[109,34,81,30],[109,35,81,31,"getQueue"],[109,43,81,39],[109,44,81,40],[109,45,81,41],[110,12,82,6],[110,16,82,12,"pendingItems"],[110,28,82,24],[110,31,82,27,"queue"],[110,36,82,32],[110,37,82,33,"filter"],[110,43,82,39],[110,44,82,40,"item"],[110,48,82,44],[110,52,82,48,"item"],[110,56,82,52],[110,57,82,53,"status"],[110,63,82,59],[110,68,82,64],[110,77,82,73],[110,78,82,74],[111,12,84,6],[111,16,84,10,"pendingItems"],[111,28,84,22],[111,29,84,23,"length"],[111,35,84,29],[111,40,84,34],[111,41,84,35],[111,43,84,37],[112,14,85,8,"console"],[112,21,85,15],[112,22,85,16,"log"],[112,25,85,19],[112,26,85,20],[112,55,85,49],[112,56,85,50],[113,14,86,8],[113,18,86,12],[113,19,86,13,"isProcessing"],[113,31,86,25],[113,34,86,28],[113,39,86,33],[114,14,87,8],[115,12,88,6],[116,12,90,6,"console"],[116,19,90,13],[116,20,90,14,"log"],[116,23,90,17],[116,24,90,18],[116,59,90,53,"pendingItems"],[116,71,90,65],[116,72,90,66,"length"],[116,78,90,72],[116,102,90,96],[116,103,90,97],[117,12,92,6],[117,16,92,10,"successCount"],[117,28,92,22],[117,31,92,25],[117,32,92,26],[118,12,93,6],[118,16,93,10,"failCount"],[118,25,93,19],[118,28,93,22],[118,29,93,23],[119,12,95,6],[119,17,95,11],[119,21,95,17,"item"],[119,25,95,21],[119,29,95,25,"pendingItems"],[119,41,95,37],[119,43,95,39],[120,14,96,8],[120,18,96,12],[121,16,97,10],[122,16,98,10],[122,20,98,16,"netState"],[122,28,98,24],[122,37,98,33,"NetInfo"],[122,53,98,40],[122,54,98,41,"fetch"],[122,59,98,46],[122,60,98,47],[122,61,98,48],[123,16,99,10],[123,20,99,14],[123,21,99,15,"netState"],[123,29,99,23],[123,30,99,24,"isConnected"],[123,41,99,35],[123,43,99,37],[124,18,100,12,"console"],[124,25,100,19],[124,26,100,20,"log"],[124,29,100,23],[124,30,100,24],[124,88,100,82],[124,89,100,83],[125,18,101,12],[126,16,102,10],[127,16,104,10,"console"],[127,23,104,17],[127,24,104,18,"log"],[127,27,104,21],[127,28,104,22],[127,58,104,52,"item"],[127,62,104,56],[127,63,104,57,"data"],[127,67,104,61],[127,68,104,62,"length"],[127,74,104,68],[127,87,104,81],[127,88,104,82],[128,16,105,10],[128,20,105,16,"result"],[128,26,105,22],[128,35,105,31,"firebaseService"],[128,59,105,46],[128,60,105,47,"addScans"],[128,68,105,55],[128,69,105,56,"item"],[128,73,105,60],[128,74,105,61,"data"],[128,78,105,65],[128,79,105,66],[129,16,107,10],[129,20,107,14,"result"],[129,26,107,20],[129,27,107,21,"success"],[129,34,107,28],[129,36,107,30],[130,18,108,12],[131,18,109,12,"item"],[131,22,109,16],[131,23,109,17,"status"],[131,29,109,23],[131,32,109,26],[131,43,109,37],[132,18,110,12,"item"],[132,22,110,16],[132,23,110,17,"completedAt"],[132,34,110,28],[132,37,110,31,"Date"],[132,41,110,35],[132,42,110,36,"now"],[132,45,110,39],[132,46,110,40],[132,47,110,41],[133,18,111,12,"successCount"],[133,30,111,24],[133,32,111,26],[134,18,113,12,"console"],[134,25,113,19],[134,26,113,20,"log"],[134,29,113,23],[134,30,113,24],[134,64,113,58,"item"],[134,68,113,62],[134,69,113,63,"data"],[134,73,113,67],[134,74,113,68,"length"],[134,80,113,74],[134,90,113,84],[134,91,113,85],[135,18,114,12],[135,22,114,16],[135,23,114,17,"notifyListeners"],[135,38,114,32],[135,39,114,33],[135,45,114,39],[135,47,114,41],[136,20,114,43,"count"],[136,25,114,48],[136,27,114,50,"item"],[136,31,114,54],[136,32,114,55,"data"],[136,36,114,59],[136,37,114,60,"length"],[137,18,114,67],[137,19,114,68],[137,20,114,69],[138,16,115,10],[138,17,115,11],[138,23,115,17],[139,18,116,12],[139,24,116,18],[139,28,116,22,"Error"],[139,33,116,27],[139,34,116,28,"result"],[139,40,116,34],[139,41,116,35,"error"],[139,46,116,40],[139,50,116,44],[139,63,116,57],[139,64,116,58],[140,16,117,10],[141,14,119,8],[141,15,119,9],[141,16,119,10],[141,23,119,17,"error"],[141,28,119,22],[141,30,119,24],[142,16,120,10,"console"],[142,23,120,17],[142,24,120,18,"error"],[142,29,120,23],[142,30,120,24],[142,67,120,61,"item"],[142,71,120,65],[142,72,120,66,"id"],[142,74,120,68],[142,77,120,71],[142,79,120,73,"error"],[142,84,120,78],[142,85,120,79,"message"],[142,92,120,86],[142,93,120,87],[143,16,122,10,"item"],[143,20,122,14],[143,21,122,15,"retryCount"],[143,31,122,25],[143,34,122,28],[143,35,122,29,"item"],[143,39,122,33],[143,40,122,34,"retryCount"],[143,50,122,44],[143,54,122,48],[143,55,122,49],[143,59,122,53],[143,60,122,54],[144,16,123,10,"item"],[144,20,123,14],[144,21,123,15,"lastError"],[144,30,123,24],[144,33,123,27,"error"],[144,38,123,32],[144,39,123,33,"message"],[144,46,123,40],[145,16,124,10,"item"],[145,20,124,14],[145,21,124,15,"lastRetry"],[145,30,124,24],[145,33,124,27,"Date"],[145,37,124,31],[145,38,124,32,"now"],[145,41,124,35],[145,42,124,36],[145,43,124,37],[147,16,126,10],[148,16,127,10],[148,20,127,14,"item"],[148,24,127,18],[148,25,127,19,"retryCount"],[148,35,127,29],[148,39,127,33],[148,40,127,34],[148,42,127,36],[149,18,128,12,"item"],[149,22,128,16],[149,23,128,17,"status"],[149,29,128,23],[149,32,128,26],[149,40,128,34],[150,18,129,12,"console"],[150,25,129,19],[150,26,129,20,"error"],[150,31,129,25],[150,32,129,26],[150,81,129,75,"item"],[150,85,129,79],[150,86,129,80,"id"],[150,88,129,82],[150,90,129,84],[150,91,129,85],[151,16,130,10],[152,16,132,10,"failCount"],[152,25,132,19],[152,27,132,21],[153,14,133,8],[154,12,134,6],[156,12,136,6],[157,12,137,6],[157,18,137,12,"AsyncStorage"],[157,39,137,24],[157,40,137,25,"setItem"],[157,47,137,32],[157,48,137,33],[157,52,137,37],[157,53,137,38,"queueKey"],[157,61,137,46],[157,63,137,48,"JSON"],[157,67,137,52],[157,68,137,53,"stringify"],[157,77,137,62],[157,78,137,63,"queue"],[157,83,137,68],[157,84,137,69],[157,85,137,70],[159,12,139,6],[160,12,140,6],[160,18,140,12],[160,22,140,16],[160,23,140,17,"cleanupQueue"],[160,35,140,29],[160,36,140,30],[160,37,140,31],[161,12,142,6,"console"],[161,19,142,13],[161,20,142,14,"log"],[161,23,142,17],[161,24,142,18],[161,64,142,58,"successCount"],[161,76,142,70],[161,89,142,83,"failCount"],[161,98,142,92],[161,107,142,101],[161,108,142,102],[162,12,144,6],[162,16,144,10],[162,17,144,11,"notifyListeners"],[162,32,144,26],[162,33,144,27],[162,44,144,38],[162,46,144,40],[163,14,145,8,"success"],[163,21,145,15],[163,23,145,17,"successCount"],[163,35,145,29],[164,14,146,8,"failed"],[164,20,146,14],[164,22,146,16,"failCount"],[164,31,146,25],[165,14,147,8,"remaining"],[165,23,147,17],[165,31,147,25],[165,35,147,29],[165,36,147,30,"getQueueSize"],[165,48,147,42],[165,49,147,43],[166,12,148,6],[166,13,148,7],[166,14,148,8],[167,10,150,4],[167,11,150,5],[167,12,150,6],[167,19,150,13,"error"],[167,24,150,18],[167,26,150,20],[168,12,151,6,"console"],[168,19,151,13],[168,20,151,14,"error"],[168,25,151,19],[168,26,151,20],[168,69,151,63],[168,71,151,65,"error"],[168,76,151,70],[168,77,151,71],[169,10,152,4],[169,11,152,5],[169,20,152,14],[170,12,153,6],[170,16,153,10],[170,17,153,11,"isProcessing"],[170,29,153,23],[170,32,153,26],[170,37,153,31],[171,10,154,4],[172,8,155,2],[172,9,155,3],[173,8,155,3],[173,17,74,8,"processQueue"],[173,29,74,20,"processQueue"],[173,30,74,20],[174,10,74,20],[174,17,74,20,"_processQueue"],[174,30,74,20],[174,31,74,20,"apply"],[174,36,74,20],[174,43,74,20,"arguments"],[174,52,74,20],[175,8,74,20],[176,8,74,20],[176,15,74,8,"processQueue"],[176,27,74,20],[177,6,74,20],[177,10,157,2],[178,4,157,2],[179,6,157,2,"key"],[179,9,157,2],[180,6,157,2,"value"],[180,11,157,2],[181,8,157,2],[181,12,157,2,"_cleanupQueue"],[181,25,157,2],[181,32,157,2,"_asyncToGenerator2"],[181,50,157,2],[181,51,157,2,"default"],[181,58,157,2],[181,60,158,2],[181,73,158,23],[182,10,159,4],[182,14,159,8],[183,12,160,6],[183,16,160,12,"queue"],[183,21,160,17],[183,30,160,26],[183,34,160,30],[183,35,160,31,"getQueue"],[183,43,160,39],[183,44,160,40],[183,45,160,41],[184,12,161,6],[184,16,161,12,"now"],[184,19,161,15],[184,22,161,18,"Date"],[184,26,161,22],[184,27,161,23,"now"],[184,30,161,26],[184,31,161,27],[184,32,161,28],[185,12,162,6],[185,16,162,12,"maxAge"],[185,22,162,18],[185,33,162,40],[185,34,162,41],[185,35,162,42],[187,12,164,6],[187,16,164,12,"cleanedQueue"],[187,28,164,24],[187,31,164,27,"queue"],[187,36,164,32],[187,37,164,33,"filter"],[187,43,164,39],[187,44,164,40,"item"],[187,48,164,44],[187,52,164,48],[188,14,165,8],[189,14,166,8],[189,18,166,12,"item"],[189,22,166,16],[189,23,166,17,"status"],[189,29,166,23],[189,34,166,28],[189,43,166,37],[189,45,166,39],[189,52,166,46],[189,56,166,50],[191,14,168,8],[192,14,169,8],[192,18,169,14,"age"],[192,21,169,17],[192,24,169,20,"now"],[192,27,169,23],[192,31,169,27,"item"],[192,35,169,31],[192,36,169,32,"completedAt"],[192,47,169,43],[192,51,169,47,"item"],[192,55,169,51],[192,56,169,52,"timestamp"],[192,65,169,61],[192,66,169,62],[193,14,170,8],[193,21,170,15,"age"],[193,24,170,18],[193,27,170,21,"maxAge"],[193,33,170,27],[194,12,171,6],[194,13,171,7],[194,14,171,8],[195,12,173,6],[195,16,173,10,"cleanedQueue"],[195,28,173,22],[195,29,173,23,"length"],[195,35,173,29],[195,40,173,34,"queue"],[195,45,173,39],[195,46,173,40,"length"],[195,52,173,46],[195,54,173,48],[196,14,174,8],[196,20,174,14,"AsyncStorage"],[196,41,174,26],[196,42,174,27,"setItem"],[196,49,174,34],[196,50,174,35],[196,54,174,39],[196,55,174,40,"queueKey"],[196,63,174,48],[196,65,174,50,"JSON"],[196,69,174,54],[196,70,174,55,"stringify"],[196,79,174,64],[196,80,174,65,"cleanedQueue"],[196,92,174,77],[196,93,174,78],[196,94,174,79],[197,14,175,8,"console"],[197,21,175,15],[197,22,175,16,"log"],[197,25,175,19],[197,26,175,20],[197,63,175,57,"queue"],[197,68,175,62],[197,69,175,63,"length"],[197,75,175,69],[197,78,175,72,"cleanedQueue"],[197,90,175,84],[197,91,175,85,"length"],[197,97,175,91],[197,126,175,120],[197,127,175,121],[198,12,176,6],[199,10,177,4],[199,11,177,5],[199,12,177,6],[199,19,177,13,"error"],[199,24,177,18],[199,26,177,20],[200,12,178,6,"console"],[200,19,178,13],[200,20,178,14,"error"],[200,25,178,19],[200,26,178,20],[200,66,178,60],[200,68,178,62,"error"],[200,73,178,67],[200,74,178,68],[201,10,179,4],[202,8,180,2],[202,9,180,3],[203,8,180,3],[203,17,158,8,"cleanupQueue"],[203,29,158,20,"cleanupQueue"],[203,30,158,20],[204,10,158,20],[204,17,158,20,"_cleanupQueue"],[204,30,158,20],[204,31,158,20,"apply"],[204,36,158,20],[204,43,158,20,"arguments"],[204,52,158,20],[205,8,158,20],[206,8,158,20],[206,15,158,8,"cleanupQueue"],[206,27,158,20],[207,6,158,20],[207,10,182,2],[208,4,182,2],[209,6,182,2,"key"],[209,9,182,2],[210,6,182,2,"value"],[210,11,182,2],[211,8,182,2],[211,12,182,2,"_clearQueue"],[211,23,182,2],[211,30,182,2,"_asyncToGenerator2"],[211,48,182,2],[211,49,182,2,"default"],[211,56,182,2],[211,58,183,2],[211,71,183,21],[212,10,184,4],[212,14,184,8],[213,12,185,6],[213,18,185,12,"AsyncStorage"],[213,39,185,24],[213,40,185,25,"removeItem"],[213,50,185,35],[213,51,185,36],[213,55,185,40],[213,56,185,41,"queueKey"],[213,64,185,49],[213,65,185,50],[214,12,186,6,"console"],[214,19,186,13],[214,20,186,14,"log"],[214,23,186,17],[214,24,186,18],[214,56,186,50],[214,57,186,51],[215,12,187,6],[215,16,187,10],[215,17,187,11,"notifyListeners"],[215,32,187,26],[215,33,187,27],[215,42,187,36],[215,44,187,38],[215,45,187,39],[215,46,187,40],[215,47,187,41],[216,10,188,4],[216,11,188,5],[216,12,188,6],[216,19,188,13,"error"],[216,24,188,18],[216,26,188,20],[217,12,189,6,"console"],[217,19,189,13],[217,20,189,14,"error"],[217,25,189,19],[217,26,189,20],[217,63,189,57],[217,65,189,59,"error"],[217,70,189,64],[217,71,189,65],[218,12,190,6],[218,18,190,12,"error"],[218,23,190,17],[219,10,191,4],[220,8,192,2],[220,9,192,3],[221,8,192,3],[221,17,183,8,"clearQueue"],[221,27,183,18,"clearQueue"],[221,28,183,18],[222,10,183,18],[222,17,183,18,"_clearQueue"],[222,28,183,18],[222,29,183,18,"apply"],[222,34,183,18],[222,41,183,18,"arguments"],[222,50,183,18],[223,8,183,18],[224,8,183,18],[224,15,183,8,"clearQueue"],[224,25,183,18],[225,6,183,18],[225,10,194,2],[226,4,194,2],[227,6,194,2,"key"],[227,9,194,2],[228,6,194,2,"value"],[228,11,194,2],[229,8,194,2],[229,12,194,2,"_forceProcess"],[229,25,194,2],[229,32,194,2,"_asyncToGenerator2"],[229,50,194,2],[229,51,194,2,"default"],[229,58,194,2],[229,60,195,2],[229,73,195,23],[230,10,196,4],[230,14,196,8],[230,18,196,12],[230,19,196,13,"isProcessing"],[230,31,196,25],[230,33,196,27],[231,12,197,6,"console"],[231,19,197,13],[231,20,197,14,"log"],[231,23,197,17],[231,24,197,18],[231,68,197,62],[231,69,197,63],[232,12,198,6],[233,10,199,4],[234,10,201,4],[234,14,201,10,"netState"],[234,22,201,18],[234,31,201,27,"NetInfo"],[234,47,201,34],[234,48,201,35,"fetch"],[234,53,201,40],[234,54,201,41],[234,55,201,42],[235,10,202,4],[235,14,202,8],[235,15,202,9,"netState"],[235,23,202,17],[235,24,202,18,"isConnected"],[235,35,202,29],[235,37,202,31],[236,12,203,6],[236,18,203,12],[236,22,203,16,"Error"],[236,27,203,21],[236,28,203,22],[236,64,203,58],[236,65,203,59],[237,10,204,4],[238,10,206,4],[238,16,206,10],[238,20,206,14],[238,21,206,15,"processQueue"],[238,33,206,27],[238,34,206,28],[238,35,206,29],[239,8,207,2],[239,9,207,3],[240,8,207,3],[240,17,195,8,"forceProcess"],[240,29,195,20,"forceProcess"],[240,30,195,20],[241,10,195,20],[241,17,195,20,"_forceProcess"],[241,30,195,20],[241,31,195,20,"apply"],[241,36,195,20],[241,43,195,20,"arguments"],[241,52,195,20],[242,8,195,20],[243,8,195,20],[243,15,195,8,"forceProcess"],[243,27,195,20],[244,6,195,20],[244,10,209,2],[245,4,209,2],[246,6,209,2,"key"],[246,9,209,2],[247,6,209,2,"value"],[247,11,209,2],[247,13,210,2],[247,22,210,2,"addListener"],[247,33,210,13,"addListener"],[247,34,210,14,"callback"],[247,42,210,22],[247,44,210,24],[248,8,211,4],[248,12,211,8],[248,13,211,9,"listeners"],[248,22,211,18],[248,23,211,19,"push"],[248,27,211,23],[248,28,211,24,"callback"],[248,36,211,32],[248,37,211,33],[249,8,212,4],[249,15,212,11],[249,21,212,17],[250,10,213,6],[250,14,213,10],[250,15,213,11,"listeners"],[250,24,213,20],[250,27,213,23],[250,31,213,27],[250,32,213,28,"listeners"],[250,41,213,37],[250,42,213,38,"filter"],[250,48,213,44],[250,49,213,45,"l"],[250,50,213,46],[250,54,213,50,"l"],[250,55,213,51],[250,60,213,56,"callback"],[250,68,213,64],[250,69,213,65],[251,8,214,4],[251,9,214,5],[252,6,215,2],[254,6,217,2],[255,4,217,2],[256,6,217,2,"key"],[256,9,217,2],[257,6,217,2,"value"],[257,11,217,2],[257,13,218,2],[257,22,218,2,"notifyListeners"],[257,37,218,17,"notifyListeners"],[257,38,218,18,"event"],[257,43,218,23],[257,45,218,25,"data"],[257,49,218,29],[257,51,218,31],[258,8,219,4],[258,12,219,8],[258,13,219,9,"listeners"],[258,22,219,18],[258,23,219,19,"forEach"],[258,30,219,26],[258,31,219,27,"listener"],[258,39,219,35],[258,43,219,39],[259,10,220,6],[259,14,220,10],[260,12,221,8,"listener"],[260,20,221,16],[260,21,221,17,"event"],[260,26,221,22],[260,28,221,24,"data"],[260,32,221,28],[260,33,221,29],[261,10,222,6],[261,11,222,7],[261,12,222,8],[261,19,222,15,"error"],[261,24,222,20],[261,26,222,22],[262,12,223,8,"console"],[262,19,223,15],[262,20,223,16,"error"],[262,25,223,21],[262,26,223,22],[262,59,223,55],[262,61,223,57,"error"],[262,66,223,62],[262,67,223,63],[263,10,224,6],[264,8,225,4],[264,9,225,5],[264,10,225,6],[265,6,226,2],[267,6,228,2],[268,4,228,2],[269,6,228,2,"key"],[269,9,228,2],[270,6,228,2,"value"],[270,11,228,2],[271,8,228,2],[271,12,228,2,"_getStats"],[271,21,228,2],[271,28,228,2,"_asyncToGenerator2"],[271,46,228,2],[271,47,228,2,"default"],[271,54,228,2],[271,56,229,2],[271,69,229,19],[272,10,230,4],[272,14,230,10,"queue"],[272,19,230,15],[272,28,230,24],[272,32,230,28],[272,33,230,29,"getQueue"],[272,41,230,37],[272,42,230,38],[272,43,230,39],[273,10,231,4],[273,17,231,11],[274,12,232,6,"total"],[274,17,232,11],[274,19,232,13,"queue"],[274,24,232,18],[274,25,232,19,"length"],[274,31,232,25],[275,12,233,6,"pending"],[275,19,233,13],[275,21,233,15,"queue"],[275,26,233,20],[275,27,233,21,"filter"],[275,33,233,27],[275,34,233,28,"item"],[275,38,233,32],[275,42,233,36,"item"],[275,46,233,40],[275,47,233,41,"status"],[275,53,233,47],[275,58,233,52],[275,67,233,61],[275,68,233,62],[275,69,233,63,"length"],[275,75,233,69],[276,12,234,6,"completed"],[276,21,234,15],[276,23,234,17,"queue"],[276,28,234,22],[276,29,234,23,"filter"],[276,35,234,29],[276,36,234,30,"item"],[276,40,234,34],[276,44,234,38,"item"],[276,48,234,42],[276,49,234,43,"status"],[276,55,234,49],[276,60,234,54],[276,71,234,65],[276,72,234,66],[276,73,234,67,"length"],[276,79,234,73],[277,12,235,6,"failed"],[277,18,235,12],[277,20,235,14,"queue"],[277,25,235,19],[277,26,235,20,"filter"],[277,32,235,26],[277,33,235,27,"item"],[277,37,235,31],[277,41,235,35,"item"],[277,45,235,39],[277,46,235,40,"status"],[277,52,235,46],[277,57,235,51],[277,65,235,59],[277,66,235,60],[277,67,235,61,"length"],[277,73,235,67],[278,12,236,6,"oldestPending"],[278,25,236,19],[278,27,236,21,"queue"],[278,32,236,26],[278,33,237,9,"filter"],[278,39,237,15],[278,40,237,16,"item"],[278,44,237,20],[278,48,237,24,"item"],[278,52,237,28],[278,53,237,29,"status"],[278,59,237,35],[278,64,237,40],[278,73,237,49],[278,74,237,50],[278,75,238,9,"reduce"],[278,81,238,15],[278,82,238,16],[278,83,238,17,"oldest"],[278,89,238,23],[278,91,238,25,"item"],[278,95,238,29],[278,100,239,10],[278,101,239,11,"oldest"],[278,107,239,17],[278,111,239,21,"item"],[278,115,239,25],[278,116,239,26,"timestamp"],[278,125,239,35],[278,128,239,38,"oldest"],[278,134,239,44],[278,135,239,45,"timestamp"],[278,144,239,54],[278,147,239,57,"item"],[278,151,239,61],[278,154,239,64,"oldest"],[278,160,239,70],[278,162,239,72],[278,166,239,76],[279,10,240,4],[279,11,240,5],[280,8,241,2],[280,9,241,3],[281,8,241,3],[281,17,229,8,"getStats"],[281,25,229,16,"getStats"],[281,26,229,16],[282,10,229,16],[282,17,229,16,"_getStats"],[282,26,229,16],[282,27,229,16,"apply"],[282,32,229,16],[282,39,229,16,"arguments"],[282,48,229,16],[283,8,229,16],[284,8,229,16],[284,15,229,8,"getStats"],[284,23,229,16],[285,6,229,16],[286,4,229,16],[287,2,229,16],[287,7,244,0],[288,2,245,0],[288,6,245,6,"offlineQueueService"],[288,25,245,25],[288,28,245,28],[288,32,245,32,"OfflineQueueService"],[288,51,245,51],[288,52,245,52],[288,53,245,53],[289,2,245,54],[289,6,245,54,"_default"],[289,14,245,54],[289,17,245,54,"exports"],[289,24,245,54],[289,25,245,54,"default"],[289,32,245,54],[289,35,247,15,"offlineQueueService"],[289,54,247,34],[290,0,247,34],[290,3]],"functionMap":{"names":["<global>","OfflineQueueService","OfflineQueueService#constructor","OfflineQueueService#initNetworkListener","NetInfo.addEventListener$argument_0","OfflineQueueService#addToQueue","OfflineQueueService#getQueue","OfflineQueueService#getQueueSize","queue.filter$argument_0","OfflineQueueService#processQueue","OfflineQueueService#cleanupQueue","OfflineQueueService#clearQueue","OfflineQueueService#forceProcess","OfflineQueueService#addListener","<anonymous>","listeners.filter$argument_0","OfflineQueueService#notifyListeners","listeners.forEach$argument_0","OfflineQueueService#getStats","queue.filter.reduce$argument_0"],"mappings":"AAA;ACI;ECC;GDQ;EEG;6BCC;KDM;GFC;EIG;GJ0B;EKG;GLQ;EMG;wBCE,iCD;GNC;EQG;wCDQ,iCC;GRyE;ESG;wCFM;OEO;GTS;EUG;GVS;EWG;GXY;EYG;WCE;6CCC,mBD;KDC;GZC;EeG;2BCC;KDM;GfC;EiBG;4BVI,iCU;8BVC,mCU;2BVC,gCU;gBVE,iCU;gBCC;sEDC;GjBE;CDC"}},"type":"js/module"}]}