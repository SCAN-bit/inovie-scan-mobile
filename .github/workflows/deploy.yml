# GitHub Actions - Build et Release APK Mobile
name: üöÄ Build & Release APK

on:
  push:
    branches: [ main ]
    # Se d√©clenche sur tous les pushes vers main

jobs:
  # üì± Build & Release APK (automatique)
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Setup Gradle
        run: |
          cd android
          chmod +x gradlew
          # Force Gradle 8.7 - Remove any existing Gradle cache first
          rm -rf ~/.gradle/wrapper/dists/gradle-8.10.2-*
          sed -i 's/gradle-.*-all.zip/gradle-8.7-all.zip/g' gradle/wrapper/gradle-wrapper.properties
          # Force Kotlin 1.9.25 - Remove existing and add new
          sed -i '/kotlin.version/d' gradle.properties
          sed -i '/android.suppressKotlinVersionCompatibilityCheck/d' gradle.properties
          echo "kotlin.version=1.9.25" >> gradle.properties
          echo "android.suppressKotlinVersionCompatibilityCheck=true" >> gradle.properties
          # Force suppression of Kotlin version check in build.gradle
          sed -i 's/kotlinVersion = .*/kotlinVersion = "1.9.25"/g' build.gradle
          # Add system property to suppress Kotlin version check
          echo "systemProp.kotlin.version=1.9.25" >> gradle.properties
          # Verify the changes
          echo "=== gradle.properties content ==="
          cat gradle.properties
        
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
        
      - name: Install Node.js dependencies
        run: |
          npm install
          
      - name: Pre-build setup
        run: |
          # Cr√©er les dossiers n√©cessaires
          mkdir -p android/build/generated/autolinking
          mkdir -p android/app/build/generated
          
          # G√©n√©rer le fichier autolinking.json complet avec packageName
          cat > android/build/generated/autolinking/autolinking.json << 'EOF'
          {
            "reactNativePath": "../node_modules/react-native",
            "project": {
              "android": {
                "packageName": "SCAN.mobile",
                "sourceDir": "../android/app",
                "appName": "SCAN"
              }
            },
            "dependencies": {}
          }
          EOF
          
          # Corriger la configuration du splash screen pour Android 12+
          # Ajouter la d√©pendance splash screen dans build.gradle
          sed -i '/dependencies {/a\    implementation "androidx.core:core-splashscreen:1.0.1"' android/app/build.gradle
          
          # Supprimer les anciens fichiers Kotlin s'ils existent
          rm -f android/app/src/main/java/SCAN/mobile/MainActivity.kt
          rm -f android/app/src/main/java/SCAN/mobile/MainApplication.kt
          
          # Cr√©er MainActivity.java avec Java + JSC
          cat > android/app/src/main/java/SCAN/mobile/MainActivity.java << 'EOF'
          package SCAN.mobile;
          
          import android.os.Build;
          import android.os.Bundle;
          
          import com.facebook.react.ReactActivity;
          import com.facebook.react.ReactActivityDelegate;
          import com.facebook.react.defaults.DefaultReactActivityDelegate;
          
          public class MainActivity extends ReactActivity {
            @Override
            protected void onCreate(Bundle savedInstanceState) {
              super.onCreate(savedInstanceState);
            }
          
            @Override
            protected String getMainComponentName() {
              return "main";
            }
          
            @Override
            protected ReactActivityDelegate createReactActivityDelegate() {
              return new DefaultReactActivityDelegate(
                  this,
                  getMainComponentName(),
                  false // isNewArchitectureEnabled
              );
            }
          
            @Override
            public void invokeDefaultOnBackPressed() {
                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.R) {
                    if (!moveTaskToBack(false)) {
                        super.invokeDefaultOnBackPressed();
                    }
                    return;
                }
                super.invokeDefaultOnBackPressed();
            }
          }
          EOF
          
          # Cr√©er MainApplication.java avec Java + JSC
          cat > android/app/src/main/java/SCAN/mobile/MainApplication.java << 'EOF'
          package SCAN.mobile;
          
          import android.app.Application;
          import android.content.res.Configuration;
          
          import com.facebook.react.PackageList;
          import com.facebook.react.ReactApplication;
          import com.facebook.react.ReactNativeHost;
          import com.facebook.react.ReactPackage;
          import com.facebook.react.defaults.DefaultReactNativeHost;
          import com.facebook.soloader.SoLoader;
          
          import java.util.List;
          
          public class MainApplication extends Application implements ReactApplication {
          
            private final ReactNativeHost mReactNativeHost = new DefaultReactNativeHost(this) {
              @Override
              public boolean getUseDeveloperSupport() {
                return BuildConfig.DEBUG;
              }
          
              @Override
              protected List<ReactPackage> getPackages() {
                @SuppressWarnings("UnnecessaryLocalVariable")
                List<ReactPackage> packages = new PackageList(this).getPackages();
                return packages;
              }
          
              @Override
              protected String getJSMainModuleName() {
                return ".expo/.virtual-metro-entry";
              }
          
              @Override
              public boolean isNewArchEnabled() {
                return false;
              }
          
              @Override
              public Boolean isHermesEnabled() {
                return false;
              }
            };
          
            @Override
            public ReactNativeHost getReactNativeHost() {
              return mReactNativeHost;
            }
          
            @Override
            public void onCreate() {
              super.onCreate();
              SoLoader.init(this, false);
            }
          
            @Override
            public void onConfigurationChanged(Configuration newConfig) {
              super.onConfigurationChanged(newConfig);
            }
          }
          EOF
          
          # Revenir √† SDK 52 (plus stable)
          echo "Utilisation de SDK 52 (plus stable)..."
          npm install expo@~52.0.47 --save
          echo "V√©rification de la version install√©e..."
          npm list expo
          
          npx expo install --fix
          
          # Forcer l'inclusion des biblioth√®ques natives
          echo "hermesEnabled=false" >> android/gradle.properties
          echo "android.enableHermes=false" >> android/gradle.properties
          echo "android.enableJSC=true" >> android/gradle.properties
          echo "android.enableDefaultJSExecutor=false" >> android/gradle.properties
          
          # Forcer l'inclusion de Hermes avec toutes les architectures
          sed -i '/dependencies {/a\    implementation "com.facebook.react:hermes-android"' android/app/build.gradle
          sed -i '/dependencies {/a\    implementation "com.facebook.react:react-android"' android/app/build.gradle
          
          # Forcer l'inclusion des biblioth√®ques natives
          echo "android.enableJSC=true" >> android/gradle.properties
          echo "android.enableHermes=false" >> android/gradle.properties
          echo "hermesEnabled=false" >> android/gradle.properties
          echo "android.enableDefaultJSExecutor=false" >> android/gradle.properties
          
          # Forcer l'inclusion des biblioth√®ques natives dans build.gradle
          sed -i '/android {/a\    packagingOptions {\n        pickFirst "**/libjscexecutor.so"\n        pickFirst "**/libhermes_executor.so"\n        pickFirst "**/libjsc.so"\n        pickFirst "**/libreactnative.so"\n    }' android/app/build.gradle
          
          # Forcer l'inclusion des biblioth√®ques natives
          sed -i '/android {/a\    sourceSets {\n        main {\n            jniLibs.srcDirs = ["src/main/jniLibs", "node_modules/react-native/ReactAndroid/src/main/jni/third-party/jsc"]\n        }\n    }' android/app/build.gradle
          
          # Forcer l'inclusion des biblioth√®ques natives via Gradle
          sed -i '/android {/a\    splits {\n        abi {\n            enable true\n            reset()\n            include "arm64-v8a", "x86", "x86_64"\n            universalApk false\n        }\n    }' android/app/build.gradle
          
          # Forcer l'inclusion des biblioth√®ques natives via NDK
          sed -i '/android {/a\    ndkVersion "26.1.10909125"' android/app/build.gradle
          
          # Forcer l'inclusion des biblioth√®ques natives via externalNativeBuild
          sed -i '/android {/a\    externalNativeBuild {\n        ndkBuild {\n            path "src/main/jni/Android.mk"\n        }\n    }' android/app/build.gradle
          
          # Forcer l'inclusion des biblioth√®ques natives via build.gradle directement
          # Conflit avec splits abi - suppression de ndk abiFilters
          echo "Conflit r√©solu: suppression de ndk abiFilters car splits abi est d√©j√† configur√©"
          
          # Forcer l'inclusion explicite de libjscexecutor.so
          mkdir -p android/app/src/main/jniLibs/arm64-v8a
          mkdir -p android/app/src/main/jniLibs/x86
          mkdir -p android/app/src/main/jniLibs/x86_64
          
          # Cr√©er le fichier Android.mk pour forcer l'inclusion
          mkdir -p android/app/src/main/jni
          cat > android/app/src/main/jni/Android.mk << 'EOF'
          LOCAL_PATH := $(call my-dir)
          include $(CLEAR_VARS)
          LOCAL_MODULE := jsc
          LOCAL_SRC_FILES := ../../../../node_modules/react-native/ReactAndroid/src/main/jni/third-party/jsc/Android.mk
          include $(BUILD_SHARED_LIBRARY)
          EOF
          
          # Copier les biblioth√®ques JSC depuis node_modules
          echo "Copie des biblioth√®ques JSC..."
          find node_modules -name "libjsc.so" -exec cp {} android/app/src/main/jniLibs/arm64-v8a/ \; 2>/dev/null || true
          find node_modules -name "libjscexecutor.so" -exec cp {} android/app/src/main/jniLibs/arm64-v8a/ \; 2>/dev/null || true
          
          # Forcer l'inclusion dans l'APK apr√®s build
          echo "Forcer l'inclusion des biblioth√®ques dans l'APK..."
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            # Extraire l'APK
            unzip -q app/build/outputs/apk/release/app-release.apk -d temp_apk/
            # Copier les libs dans l'APK
            cp -r android/app/src/main/jniLibs/* temp_apk/lib/ 2>/dev/null || true
            # Reconstruire l'APK
            cd temp_apk && zip -r ../app/build/outputs/apk/release/app-release.apk . && cd ..
            rm -rf temp_apk/
            echo "APK reconstruit avec les biblioth√®ques natives"
          fi
          
          # Copier depuis React Native
          echo "Copie des biblioth√®ques React Native..."
          find node_modules/react-native -name "*.so" -exec cp {} android/app/src/main/jniLibs/arm64-v8a/ \; 2>/dev/null || true
          
          # Copier manuellement depuis les sources React Native
          echo "Copie manuelle des biblioth√®ques React Native..."
          cp node_modules/react-native/ReactAndroid/src/main/jni/third-party/jsc/Android.mk android/app/src/main/jniLibs/ 2>/dev/null || echo "JSC libs not found in node_modules"
          
          # Copier les biblioth√®ques depuis les sources
          find node_modules/react-native/ReactAndroid -name "*.so" -exec cp {} android/app/src/main/jniLibs/arm64-v8a/ \; 2>/dev/null || true
          
          # Int√©gration directe dans le code React Native
          echo "Int√©gration directe des biblioth√®ques dans le code..."
          
          # Cr√©er un fichier Java pour charger les biblioth√®ques
          cat > android/app/src/main/java/SCAN/mobile/NativeLibraryLoader.java << 'EOF'
          package SCAN.mobile;
          
          import android.content.Context;
          import java.io.File;
          import java.io.FileOutputStream;
          import java.io.InputStream;
          
          public class NativeLibraryLoader {
              public static void loadNativeLibraries(Context context) {
                  try {
                      // Charger libjsc.so
                      System.loadLibrary("jsc");
                      System.loadLibrary("jscexecutor");
                  } catch (UnsatisfiedLinkError e) {
                      // Fallback: charger depuis les assets
                      loadFromAssets(context);
                  }
              }
              
              private static void loadFromAssets(Context context) {
                  try {
                      // Copier depuis assets vers cache
                      File cacheDir = new File(context.getCacheDir(), "native_libs");
                      cacheDir.mkdirs();
                      
                      // Charger les biblioth√®ques depuis le cache
                      System.load(cacheDir.getAbsolutePath() + "/libjsc.so");
                      System.load(cacheDir.getAbsolutePath() + "/libjscexecutor.so");
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
              }
          }
          EOF
          
          # V√©rifier ce qui a √©t√© copi√©
          echo "Biblioth√®ques copi√©es:"
          ls -la android/app/src/main/jniLibs/arm64-v8a/ || echo "Aucune biblioth√®que trouv√©e"
          
          # Copier libjscexecutor.so depuis node_modules
          cp node_modules/react-native/ReactAndroid/src/main/jni/third-party/jsc/Android.mk android/app/src/main/jniLibs/ 2>/dev/null || echo "JSC libs not found in node_modules"
          
          # Forcer la g√©n√©ration des modules Expo
          npx expo install --fix
          
          # Cr√©er react-native.config.js pour forcer l'inclusion des biblioth√®ques natives
          cat > react-native.config.js << 'EOF'
          module.exports = {
            dependencies: {
              'react-native': {
                platforms: {
                  android: {
                    sourceDir: '../node_modules/react-native/ReactAndroid',
                    packageImportPath: 'import io.invertase.firebase.BuildConfig;',
                  },
                },
              },
            },
            assets: ['./assets/fonts/'],
          };
          EOF
          
          # Forcer l'inclusion des biblioth√®ques natives via react-native.config.js
          echo "Configuration React Native pour forcer l'inclusion des biblioth√®ques natives..."
          npx react-native config
          
          # Forcer l'inclusion des biblioth√®ques natives via assets
          echo "Forcer l'inclusion des biblioth√®ques natives via assets..."
          echo "react-native link n'existe plus dans RN 0.75.4 - commande supprim√©e"
          
      - name: Build APK
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleRelease
          
          # Renommer l'APK avec version et build number
          VERSION_CODE=$(grep '"versionCode"' ../app.json | sed 's/.*: *\([0-9]*\).*/\1/')
          VERSION_NAME=$(grep '"version"' ../app.json | sed 's/.*: *"\([^"]*\)".*/\1/')
          NEW_NAME="SCAN-v${VERSION_NAME}-build${VERSION_CODE}.apk"
          # V√©rifier o√π est l'APK g√©n√©r√©
          echo "Recherche de l'APK g√©n√©r√©..."
          find . -name "*.apk" -type f
          ls -la app/build/outputs/apk/release/ || echo "Dossier release vide"
          ls -la app/build/outputs/apk/debug/ || echo "Dossier debug vide"
          
          # Copier l'APK avec le bon nom (architecture ARM64)
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/${NEW_NAME}
          elif [ -f "app/build/outputs/apk/release/app-arm64-v8a-release.apk" ]; then
            cp app/build/outputs/apk/release/app-arm64-v8a-release.apk app/build/outputs/apk/release/${NEW_NAME}
          elif [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            cp app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/release/${NEW_NAME}
          else
            echo "ERREUR: Aucun APK trouv√© !"
            exit 1
          fi
          echo "APK renomm√©: ${NEW_NAME}"
          
          # Analyser l'architecture de l'APK
          echo "=== ANALYSE DE L'ARCHITECTURE APK ==="
          echo "APK g√©n√©r√©: ${NEW_NAME}"
          echo "Taille APK: $(ls -lh app/build/outputs/apk/release/${NEW_NAME} | awk '{print $5}')"
          echo ""
          echo "Architectures incluses dans l'APK:"
          unzip -l app/build/outputs/apk/release/${NEW_NAME} | grep "lib/" | head -20
          echo ""
          echo "D√©tail des biblioth√®ques natives:"
          unzip -l app/build/outputs/apk/release/${NEW_NAME} | grep "lib/.*\.so" | sort
          echo ""
          echo "=== FIN ANALYSE ==="
          
      - name: Get version from app.json
        id: version
        run: |
          VERSION_CODE=$(grep '"versionCode"' app.json | sed 's/.*: *\([0-9]*\).*/\1/')
          VERSION_NAME=$(grep '"version"' app.json | sed 's/.*: *"\([^"]*\)".*/\1/')
          echo "version=${VERSION_NAME}-build${VERSION_CODE}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: "Version ${{ steps.version.outputs.version }}"
          body: |
            üöÄ Nouvelle version automatique
            
            üì± **APK Android :** T√©l√©chargez directement
            
            ### Changements :
            - Voir commits r√©cents pour les d√©tails
            
          files: |
            android/app/build/outputs/apk/release/SCAN-v*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
