# GitHub Actions - Build et Release APK Mobile
name: ğŸš€ Build & Release APK

on:
  push:
    branches: [ main ]
    # Se dÃ©clenche sur tous les pushes vers main

jobs:
  # ğŸ“± Build & Release APK (automatique)
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Setup Gradle
        run: |
          cd android
          chmod +x gradlew
          # Force Gradle 8.7 - Remove any existing Gradle cache first
          rm -rf ~/.gradle/wrapper/dists/gradle-8.10.2-*
          sed -i 's/gradle-.*-all.zip/gradle-8.7-all.zip/g' gradle/wrapper/gradle-wrapper.properties
          # Force Kotlin 1.9.23 - Recommended by Expo for SDK 51
          sed -i '/kotlin.version/d' gradle.properties
          sed -i '/android.suppressKotlinVersionCompatibilityCheck/d' gradle.properties
          echo "kotlin.version=1.9.23" >> gradle.properties
          echo "android.suppressKotlinVersionCompatibilityCheck=true" >> gradle.properties
          # Add Kotlin compiler flags to ignore nullable errors and warnings
          echo "kotlin.compiler.execution.strategy=in-process" >> gradle.properties
          echo "kotlin.incremental=false" >> gradle.properties
          echo "kotlin.daemon.jvm.options=-Xmx2g" >> gradle.properties
          echo "kotlin.compiler.suppressWarnings=true" >> gradle.properties
          echo "kotlin.compiler.allowUnsafe=true" >> gradle.properties
          # Force nullable safety to be disabled
          echo "kotlin.compiler.suppressWarnings=true" >> gradle.properties
          echo "kotlin.compiler.allowUnsafe=true" >> gradle.properties
          # Disable nullable safety checks
          echo "kotlin.compiler.suppressWarnings=true" >> gradle.properties
          echo "kotlin.compiler.allowUnsafe=true" >> gradle.properties
          
          # Add Android SDK configuration
          echo "android.compileSdkVersion=34" >> gradle.properties
          echo "android.targetSdkVersion=34" >> gradle.properties
          echo "android.buildToolsVersion=34.0.0" >> gradle.properties
          # Force suppression of Kotlin version check in build.gradle
          sed -i 's/kotlinVersion = .*/kotlinVersion = "1.9.23"/g' build.gradle
          # Add system property to suppress Kotlin version check
          echo "systemProp.kotlin.version=1.9.23" >> gradle.properties
          # Verify the changes
          echo "=== gradle.properties content ==="
          cat gradle.properties
        
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
        
      - name: Install Node.js dependencies
        run: |
          # Clean install to avoid conflicts
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps
          
      - name: Pre-build setup
        run: |
          # CrÃ©er les dossiers nÃ©cessaires
          mkdir -p android/build/generated/autolinking
          mkdir -p android/app/build/generated
          
          # GÃ©nÃ©rer le fichier autolinking.json complet avec packageName
          cat > android/build/generated/autolinking/autolinking.json << 'EOF'
          {
            "reactNativePath": "../node_modules/react-native",
            "project": {
              "android": {
                "packageName": "SCAN.mobile",
                "sourceDir": "../android/app",
                "appName": "SCAN"
              }
            },
            "dependencies": {
              "react-native-datawedge-intents": {
                "platforms": {
                  "android": {
                    "sourceDir": "../node_modules/react-native-datawedge-intents/android",
                    "packageImportPath": "import com.darryncampbell.rndatawedgeintents.RNDataWedgeIntentsPackage;"
                  }
                }
              }
            }
          }
          EOF
          
          # Corriger la configuration du splash screen pour Android 12+
          # Ajouter la dÃ©pendance splash screen dans build.gradle
          sed -i '/dependencies {/a\    implementation "androidx.core:core-splashscreen:1.0.1"' android/app/build.gradle
          
          # Conserver nos fichiers Kotlin modifiÃ©s - ne pas les supprimer
          echo "Conservation des fichiers Kotlin modifiÃ©s pour utiliser Android JS engine"
          
          # MainActivity.java creation removed - using our Kotlin files with Android JS engine
          echo "Using our Kotlin MainActivity.kt with Android JS engine - no Java file needed"
          
          # Utiliser nos fichiers Kotlin modifiÃ©s au lieu de crÃ©er des fichiers Java
          echo "Utilisation des fichiers Kotlin modifiÃ©s avec Android JS engine"
          
          # Synchroniser avec le local (SDK 51 + RN 0.74.5)
          echo "Synchronisation avec le local (SDK 51 + RN 0.74.5)..."
          npm install expo@~51.0.0 --save --legacy-peer-deps
          npm install react-native@0.74.5 --save --legacy-peer-deps
          echo "VÃ©rification de la version installÃ©e..."
          npm list expo
          
          # Verify DataWedge installation (should be installed from package.json)
          echo "Verifying DataWedge installation..."
          npm list react-native-datawedge-intents
          ls -la node_modules/react-native-datawedge-intents/ || echo "DataWedge not found"
          
          # Fix dependencies but exclude expo-camera
          echo "Fixing Expo dependencies..."
          npx expo install --fix --legacy-peer-deps || echo "Expo install --fix failed, continuing..."
          # Remove expo-camera if it was installed
          npm uninstall expo-camera --legacy-peer-deps || echo "expo-camera not installed"
          
          # Check expo-modules-core version and downgrade to fix nullable error
          echo "Checking expo-modules-core version..."
          npm list expo-modules-core
          echo "Downgrading expo-modules-core to fix nullable error..."
          npm install expo-modules-core@1.11.0 --save --legacy-peer-deps
          # Force exact version in package.json (remove ^)
          sed -i 's/"expo-modules-core": "\^1.11.0"/"expo-modules-core": "1.11.0"/g' package.json
          
          # Verify final package list
          echo "Final package verification..."
          npm list expo
          npm list react-native-datawedge-intents
          
          # Force Android's built-in JavaScript engine (single configuration)
          # Configuration dÃ©jÃ  prÃ©sente dans gradle.properties local - pas besoin de la dupliquer
          echo "Configuration JavaScript engine dÃ©jÃ  prÃ©sente dans gradle.properties local"
          
          # No external JS engine dependencies needed
          echo "Using Android's built-in JavaScript engine - no external dependencies"
          
          # Forcer l'inclusion des bibliothÃ¨ques natives dans build.gradle
          # JSC packaging options removed - using Android's built-in JavaScript engine
          echo "No JSC packaging options needed - using Android's built-in JavaScript engine"
          
          # Forcer l'inclusion des bibliothÃ¨ques natives avec sourceSets complet
          # JSC sourceSets removed - using Android's built-in JavaScript engine
          echo "No JSC sourceSets needed - using Android's built-in JavaScript engine"
          
          # Native library configurations removed - using Android's built-in JavaScript engine
          echo "No native library configurations needed - using Android's built-in JavaScript engine"
          
          # Debug symbols and external native build removed - using Android's built-in JavaScript engine
          echo "No debug symbols or external native build needed - using Android's built-in JavaScript engine"
          
          # Native library build configurations removed - using Android's built-in JavaScript engine
          echo "No native library build configurations needed - using Android's built-in JavaScript engine"
          
          # All native library operations removed - using Android's built-in JavaScript engine
          echo "No native library operations needed - using Android's built-in JavaScript engine"
          
          # JSC Android.mk copy removed - using Android's built-in JavaScript engine
          echo "No JSC Android.mk copy needed - using Android's built-in JavaScript engine"
          
          # Native library copying from sources removed - using Android's built-in JavaScript engine
          echo "No native library copying needed - using Android's built-in JavaScript engine"
          
          # IntÃ©gration directe dans le code React Native
          echo "IntÃ©gration directe des bibliothÃ¨ques dans le code..."
          
          # NativeLibraryLoader.java removed - using Android's built-in JavaScript engine
          echo "No native library loading needed - using Android's built-in JavaScript engine"
          
          # Native library verification removed - using Android's built-in JavaScript engine
          echo "No native library verification needed - using Android's built-in JavaScript engine"
          
          # JSC Android.mk removed - using Android's built-in JavaScript engine
          echo "No JSC Android.mk needed - using Android's built-in JavaScript engine"
          
          # Forcer la gÃ©nÃ©ration des modules Expo
          echo "Generating Expo modules..."
          npx expo install --fix --legacy-peer-deps || echo "Second expo install --fix failed, continuing..."
          # Remove expo-camera if it was installed again
          npm uninstall expo-camera --legacy-peer-deps || echo "expo-camera not installed"
          
          # Final verification before build
          echo "Pre-build verification..."
          npm list expo
          npm list react-native-datawedge-intents
          
          # CrÃ©er react-native.config.js pour forcer l'inclusion des bibliothÃ¨ques natives
          cat > react-native.config.js << 'EOF'
          module.exports = {
            dependencies: {
              'react-native-datawedge-intents': {
                platforms: {
                  android: {
                    sourceDir: '../node_modules/react-native-datawedge-intents/android',
                    packageImportPath: 'import com.darryncampbell.rndatawedgeintents.RNDataWedgeIntentsPackage;',
                  },
                },
              },
            },
            assets: ['./assets/fonts/'],
          };
          EOF
          
          # Forcer l'inclusion des bibliothÃ¨ques natives via react-native.config.js
          echo "Configuration React Native pour forcer l'inclusion des bibliothÃ¨ques natives..."
          npx react-native config
          
          # Forcer l'inclusion des bibliothÃ¨ques natives via assets
          echo "Forcer l'inclusion des bibliothÃ¨ques natives via assets..."
          echo "react-native link n'existe plus dans RN 0.75.4 - commande supprimÃ©e"
          
      - name: Build APK
        run: |
          cd android
          chmod +x gradlew
          # Build with relaxed Kotlin compiler options
          ./gradlew assembleRelease -Pkotlin.compiler.suppressWarnings=true -Pkotlin.compiler.allowUnsafe=true --continue
          
          # Renommer l'APK avec version et build number
          VERSION_CODE=$(grep '"versionCode"' app.json | sed 's/.*: *\([0-9]*\).*/\1/')
          VERSION_NAME=$(grep '"version"' app.json | sed 's/.*: *"\([^"]*\)".*/\1/')
          NEW_NAME="SCAN-v${VERSION_NAME}-build${VERSION_CODE}.apk"
          echo "Nom de l'APK: ${NEW_NAME}"
          echo "Version: ${VERSION_NAME}, Build: ${VERSION_CODE}"
          # VÃ©rifier oÃ¹ est l'APK gÃ©nÃ©rÃ©
          echo "Recherche de l'APK gÃ©nÃ©rÃ©..."
          find . -name "*.apk" -type f
          ls -la app/build/outputs/apk/release/ || echo "Dossier release vide"
          ls -la app/build/outputs/apk/debug/ || echo "Dossier debug vide"
          
          # Copier l'APK avec le bon nom (architecture ARM64)
          echo "Recherche de l'APK Ã  copier..."
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "TrouvÃ©: app-release.apk"
            cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/${NEW_NAME}
          elif [ -f "app/build/outputs/apk/release/app-arm64-v8a-release.apk" ]; then
            echo "TrouvÃ©: app-arm64-v8a-release.apk"
            cp app/build/outputs/apk/release/app-arm64-v8a-release.apk app/build/outputs/apk/release/${NEW_NAME}
          elif [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "TrouvÃ©: app-debug.apk"
            cp app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/release/${NEW_NAME}
          else
            echo "ERREUR: Aucun APK trouvÃ© !"
            echo "APK disponibles:"
            ls -la app/build/outputs/apk/release/*.apk 2>/dev/null || echo "Aucun APK dans release"
            ls -la app/build/outputs/apk/debug/*.apk 2>/dev/null || echo "Aucun APK dans debug"
            exit 1
          fi
          echo "APK renommÃ©: ${NEW_NAME}"
          
          # Analyser l'architecture de l'APK
          echo "=== ANALYSE DE L'ARCHITECTURE APK ==="
          echo "APK gÃ©nÃ©rÃ©: ${NEW_NAME}"
          echo "Taille APK: $(ls -lh app/build/outputs/apk/release/${NEW_NAME} | awk '{print $5}')"
          echo ""
          echo "APK gÃ©nÃ©rÃ© avec Android's built-in JavaScript engine"
          echo "Pas de bibliothÃ¨ques natives externes nÃ©cessaires"
          echo ""
          echo "=== FIN ANALYSE ==="
          
      - name: Get version from app.json
        id: version
        run: |
          VERSION_CODE=$(grep '"versionCode"' app.json | sed 's/.*: *\([0-9]*\).*/\1/')
          VERSION_NAME=$(grep '"version"' app.json | sed 's/.*: *"\([^"]*\)".*/\1/')
          echo "version=${VERSION_NAME}-build${VERSION_CODE}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: "Version ${{ steps.version.outputs.version }}"
          body: |
            ğŸš€ Nouvelle version automatique
            
            ğŸ“± **APK Android :** TÃ©lÃ©chargez directement
            
            ### Changements :
            - Voir commits rÃ©cents pour les dÃ©tails
            
          files: |
            android/app/build/outputs/apk/release/SCAN-v*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
