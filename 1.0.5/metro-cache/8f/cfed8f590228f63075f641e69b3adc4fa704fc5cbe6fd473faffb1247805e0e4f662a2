{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":222,"column":53,"index":8710}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":222,"column":53,"index":8710}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":222,"column":53,"index":8710}}],"key":"rcd0dMwf8BS2g+8U1wyhIOxtYEo="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":222,"column":53,"index":8710}}],"key":"4pxOr+e+5cSZAdeEKxSt3F7LoKY="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":222,"column":53,"index":8710}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"./PostgrestBuilder","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":43,"index":259},"end":{"line":6,"column":72,"index":288}}],"key":"j3bUTJZLjc6ALaq2iJCIYd9kyR8="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0]);\n  var _createClass = require(_dependencyMap[1]);\n  var _possibleConstructorReturn = require(_dependencyMap[2]);\n  var _getPrototypeOf = require(_dependencyMap[3]);\n  var _inherits = require(_dependencyMap[4]);\n  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestBuilder_1 = __importDefault(require(_dependencyMap[5]));\n  var PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder_1$d) {\n    function PostgrestTransformBuilder() {\n      _classCallCheck(this, PostgrestTransformBuilder);\n      return _callSuper(this, PostgrestTransformBuilder, arguments);\n    }\n    _inherits(PostgrestTransformBuilder, _PostgrestBuilder_1$d);\n    return _createClass(PostgrestTransformBuilder, [{\n      key: \"select\",\n      value:\n      /**\n       * Perform a SELECT on the query result.\n       *\n       * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n       * return modified rows. By calling this method, modified rows are returned in\n       * `data`.\n       *\n       * @param columns - The columns to retrieve, separated by commas\n       */\n      function select(columns) {\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== undefined ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n          this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n      }\n      /**\n       * Order the query result by `column`.\n       *\n       * You can call this method multiple times to order by multiple columns.\n       *\n       * You can order referenced tables, but it only affects the ordering of the\n       * parent table if you use `!inner` in the query.\n       *\n       * @param column - The column to order by\n       * @param options - Named parameters\n       * @param options.ascending - If `true`, the result will be in ascending order\n       * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n       * `null`s appear last.\n       * @param options.referencedTable - Set this to order a referenced table by\n       * its columns\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"order\",\n      value: function order(column) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$ascending = _ref.ascending,\n          ascending = _ref$ascending === undefined ? true : _ref$ascending,\n          nullsFirst = _ref.nullsFirst,\n          foreignTable = _ref.foreignTable,\n          _ref$referencedTable = _ref.referencedTable,\n          referencedTable = _ref$referencedTable === undefined ? foreignTable : _ref$referencedTable;\n        var key = referencedTable ? `${referencedTable}.order` : 'order';\n        var existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n      }\n      /**\n       * Limit the query result by `count`.\n       *\n       * @param count - The maximum number of rows to return\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"limit\",\n      value: function limit(count) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref2.foreignTable,\n          _ref2$referencedTable = _ref2.referencedTable,\n          referencedTable = _ref2$referencedTable === undefined ? foreignTable : _ref2$referencedTable;\n        var key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n      }\n      /**\n       * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n       * Only records within this range are returned.\n       * This respects the query order and if there is no order clause the range could behave unexpectedly.\n       * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n       * and fourth rows of the query.\n       *\n       * @param from - The starting index from which to limit the result\n       * @param to - The last index to which to limit the result\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"range\",\n      value: function range(from, to) {\n        var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          foreignTable = _ref3.foreignTable,\n          _ref3$referencedTable = _ref3.referencedTable,\n          referencedTable = _ref3$referencedTable === undefined ? foreignTable : _ref3$referencedTable;\n        var keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        var keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n      }\n      /**\n       * Set the AbortSignal for the fetch request.\n       *\n       * @param signal - The AbortSignal to use for the fetch request\n       */\n    }, {\n      key: \"abortSignal\",\n      value: function abortSignal(signal) {\n        this.signal = signal;\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n       * returns an error.\n       */\n    }, {\n      key: \"single\",\n      value: function single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n       * this returns an error.\n       */\n    }, {\n      key: \"maybeSingle\",\n      value: function maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n          this.headers['Accept'] = 'application/json';\n        } else {\n          this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        }\n        this.isMaybeSingle = true;\n        return this;\n      }\n      /**\n       * Return `data` as a string in CSV format.\n       */\n    }, {\n      key: \"csv\",\n      value: function csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n      }\n      /**\n       * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n       */\n    }, {\n      key: \"geojson\",\n      value: function geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n      }\n      /**\n       * Return `data` as the EXPLAIN plan for the query.\n       *\n       * You need to enable the\n       * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n       * setting before using this method.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.analyze - If `true`, the query will be executed and the\n       * actual run time will be returned\n       *\n       * @param options.verbose - If `true`, the query identifier will be returned\n       * and `data` will include the output columns of the query\n       *\n       * @param options.settings - If `true`, include information on configuration\n       * parameters that affect query planning\n       *\n       * @param options.buffers - If `true`, include information on buffer usage\n       *\n       * @param options.wal - If `true`, include information on WAL record generation\n       *\n       * @param options.format - The format of the output, can be `\"text\"` (default)\n       * or `\"json\"`\n       */\n    }, {\n      key: \"explain\",\n      value: function explain() {\n        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$analyze = _ref4.analyze,\n          analyze = _ref4$analyze === undefined ? false : _ref4$analyze,\n          _ref4$verbose = _ref4.verbose,\n          verbose = _ref4$verbose === undefined ? false : _ref4$verbose,\n          _ref4$settings = _ref4.settings,\n          settings = _ref4$settings === undefined ? false : _ref4$settings,\n          _ref4$buffers = _ref4.buffers,\n          buffers = _ref4$buffers === undefined ? false : _ref4$buffers,\n          _ref4$wal = _ref4.wal,\n          wal = _ref4$wal === undefined ? false : _ref4$wal,\n          _ref4$format = _ref4.format,\n          format = _ref4$format === undefined ? 'text' : _ref4$format;\n        var _a;\n        var options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        var forMediatype = (_a = this.headers['Accept']) !== null && _a !== undefined ? _a : 'application/json';\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json') return this;else return this;\n      }\n      /**\n       * Rollback the query.\n       *\n       * `data` will still be returned, but the query is not committed.\n       */\n    }, {\n      key: \"rollback\",\n      value: function rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== undefined ? _a : '').trim().length > 0) {\n          this.headers['Prefer'] += ',tx=rollback';\n        } else {\n          this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n      }\n      /**\n       * Override the type of the returned `data`.\n       *\n       * @typeParam NewResult - The new result type to override with\n       * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n       */\n    }, {\n      key: \"returns\",\n      value: function returns() {\n        return this;\n      }\n    }]);\n  }(PostgrestBuilder_1.default);\n  exports.default = PostgrestTransformBuilder;\n});","lineCount":278,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,1,13],[6,6,1,13,"_possibleConstructorReturn"],[6,32,1,13],[6,35,1,13,"require"],[6,42,1,13],[6,43,1,13,"_dependencyMap"],[6,57,1,13],[7,2,1,13],[7,6,1,13,"_getPrototypeOf"],[7,21,1,13],[7,24,1,13,"require"],[7,31,1,13],[7,32,1,13,"_dependencyMap"],[7,46,1,13],[8,2,1,13],[8,6,1,13,"_inherits"],[8,15,1,13],[8,18,1,13,"require"],[8,25,1,13],[8,26,1,13,"_dependencyMap"],[8,40,1,13],[9,2,1,13],[9,11,1,13,"_callSuper"],[9,22,1,13,"t"],[9,23,1,13],[9,25,1,13,"o"],[9,26,1,13],[9,28,1,13,"e"],[9,29,1,13],[9,40,1,13,"o"],[9,41,1,13],[9,44,1,13,"_getPrototypeOf"],[9,59,1,13],[9,60,1,13,"o"],[9,61,1,13],[9,64,1,13,"_possibleConstructorReturn"],[9,90,1,13],[9,91,1,13,"t"],[9,92,1,13],[9,94,1,13,"_isNativeReflectConstruct"],[9,119,1,13],[9,124,1,13,"Reflect"],[9,131,1,13],[9,132,1,13,"construct"],[9,141,1,13],[9,142,1,13,"o"],[9,143,1,13],[9,145,1,13,"e"],[9,146,1,13],[9,154,1,13,"_getPrototypeOf"],[9,169,1,13],[9,170,1,13,"t"],[9,171,1,13],[9,173,1,13,"constructor"],[9,184,1,13],[9,188,1,13,"o"],[9,189,1,13],[9,190,1,13,"apply"],[9,195,1,13],[9,196,1,13,"t"],[9,197,1,13],[9,199,1,13,"e"],[9,200,1,13],[10,2,1,13],[10,11,1,13,"_isNativeReflectConstruct"],[10,37,1,13],[10,51,1,13,"t"],[10,52,1,13],[10,56,1,13,"Boolean"],[10,63,1,13],[10,64,1,13,"prototype"],[10,73,1,13],[10,74,1,13,"valueOf"],[10,81,1,13],[10,82,1,13,"call"],[10,86,1,13],[10,87,1,13,"Reflect"],[10,94,1,13],[10,95,1,13,"construct"],[10,104,1,13],[10,105,1,13,"Boolean"],[10,112,1,13],[10,145,1,13,"t"],[10,146,1,13],[10,159,1,13,"_isNativeReflectConstruct"],[10,184,1,13],[10,196,1,13,"_isNativeReflectConstruct"],[10,197,1,13],[10,210,1,13,"t"],[10,211,1,13],[11,2,2,0],[11,6,2,4,"__importDefault"],[11,21,2,19],[11,24,2,23],[11,28,2,27],[11,32,2,31],[11,36,2,35],[11,37,2,36,"__importDefault"],[11,52,2,51],[11,56,2,56],[11,66,2,66,"mod"],[11,69,2,69],[11,71,2,71],[12,4,3,4],[12,11,3,12,"mod"],[12,14,3,15],[12,18,3,19,"mod"],[12,21,3,22],[12,22,3,23,"__esModule"],[12,32,3,33],[12,35,3,37,"mod"],[12,38,3,40],[12,41,3,43],[13,6,3,45],[13,15,3,54],[13,17,3,56,"mod"],[14,4,3,60],[14,5,3,61],[15,2,4,0],[15,3,4,1],[16,2,5,0,"Object"],[16,8,5,6],[16,9,5,7,"defineProperty"],[16,23,5,21],[16,24,5,22,"exports"],[16,31,5,29],[16,33,5,31],[16,45,5,43],[16,47,5,45],[17,4,5,47,"value"],[17,9,5,52],[17,11,5,54],[18,2,5,59],[18,3,5,60],[18,4,5,61],[19,2,6,0],[19,6,6,6,"PostgrestBuilder_1"],[19,24,6,24],[19,27,6,27,"__importDefault"],[19,42,6,42],[19,43,6,43,"require"],[19,50,6,50],[19,51,6,50,"_dependencyMap"],[19,65,6,50],[19,68,6,71],[19,69,6,72],[19,70,6,73],[20,2,6,74],[20,6,7,6,"PostgrestTransformBuilder"],[20,31,7,31],[20,57,7,31,"_PostgrestBuilder_1$d"],[20,78,7,31],[21,4,7,31],[21,13,7,31,"PostgrestTransformBuilder"],[21,39,7,31],[22,6,7,31,"_classCallCheck"],[22,21,7,31],[22,28,7,31,"PostgrestTransformBuilder"],[22,53,7,31],[23,6,7,31],[23,13,7,31,"_callSuper"],[23,23,7,31],[23,30,7,31,"PostgrestTransformBuilder"],[23,55,7,31],[23,57,7,31,"arguments"],[23,66,7,31],[24,4,7,31],[25,4,7,31,"_inherits"],[25,13,7,31],[25,14,7,31,"PostgrestTransformBuilder"],[25,39,7,31],[25,41,7,31,"_PostgrestBuilder_1$d"],[25,62,7,31],[26,4,7,31],[26,11,7,31,"_createClass"],[26,23,7,31],[26,24,7,31,"PostgrestTransformBuilder"],[26,49,7,31],[27,6,7,31,"key"],[27,9,7,31],[28,6,7,31,"value"],[28,11,7,31],[29,6,8,4],[30,0,9,0],[31,0,10,0],[32,0,11,0],[33,0,12,0],[34,0,13,0],[35,0,14,0],[36,0,15,0],[37,0,16,0],[38,6,17,4],[38,15,17,4,"select"],[38,21,17,10,"select"],[38,22,17,11,"columns"],[38,29,17,18],[38,31,17,20],[39,8,18,8],[40,8,19,8],[40,12,19,12,"quoted"],[40,18,19,18],[40,21,19,21],[40,26,19,26],[41,8,20,8],[41,12,20,14,"cleanedColumns"],[41,26,20,28],[41,29,20,31],[41,30,20,32,"columns"],[41,37,20,39],[41,42,20,44],[41,46,20,48],[41,50,20,52,"columns"],[41,57,20,59],[41,62,20,59,"undefined"],[41,71,20,70],[41,74,20,73,"columns"],[41,81,20,80],[41,84,20,83],[41,87,20,86],[41,89,21,13,"split"],[41,94,21,18],[41,95,21,19],[41,97,21,21],[41,98,21,22],[41,99,22,13,"map"],[41,102,22,16],[41,103,22,18,"c"],[41,104,22,19],[41,108,22,24],[42,10,23,12],[42,14,23,16],[42,18,23,20],[42,19,23,21,"test"],[42,23,23,25],[42,24,23,26,"c"],[42,25,23,27],[42,26,23,28],[42,30,23,32],[42,31,23,33,"quoted"],[42,37,23,39],[42,39,23,41],[43,12,24,16],[43,19,24,23],[43,21,24,25],[44,10,25,12],[45,10,26,12],[45,14,26,16,"c"],[45,15,26,17],[45,20,26,22],[45,23,26,25],[45,25,26,27],[46,12,27,16,"quoted"],[46,18,27,22],[46,21,27,25],[46,22,27,26,"quoted"],[46,28,27,32],[47,10,28,12],[48,10,29,12],[48,17,29,19,"c"],[48,18,29,20],[49,8,30,8],[49,9,30,9],[49,10,30,10],[49,11,31,13,"join"],[49,15,31,17],[49,16,31,18],[49,18,31,20],[49,19,31,21],[50,8,32,8],[50,12,32,12],[50,13,32,13,"url"],[50,16,32,16],[50,17,32,17,"searchParams"],[50,29,32,29],[50,30,32,30,"set"],[50,33,32,33],[50,34,32,34],[50,42,32,42],[50,44,32,44,"cleanedColumns"],[50,58,32,58],[50,59,32,59],[51,8,33,8],[51,12,33,12],[51,16,33,16],[51,17,33,17,"headers"],[51,24,33,24],[51,25,33,25],[51,33,33,33],[51,34,33,34],[51,36,33,36],[52,10,34,12],[52,14,34,16],[52,15,34,17,"headers"],[52,22,34,24],[52,23,34,25],[52,31,34,33],[52,32,34,34],[52,36,34,38],[52,39,34,41],[53,8,35,8],[54,8,36,8],[54,12,36,12],[54,13,36,13,"headers"],[54,20,36,20],[54,21,36,21],[54,29,36,29],[54,30,36,30],[54,34,36,34],[54,57,36,57],[55,8,37,8],[55,15,37,15],[55,19,37,19],[56,6,38,4],[57,6,39,4],[58,0,40,0],[59,0,41,0],[60,0,42,0],[61,0,43,0],[62,0,44,0],[63,0,45,0],[64,0,46,0],[65,0,47,0],[66,0,48,0],[67,0,49,0],[68,0,50,0],[69,0,51,0],[70,0,52,0],[71,0,53,0],[72,0,54,0],[73,0,55,0],[74,0,56,0],[75,4,39,4],[76,6,39,4,"key"],[76,9,39,4],[77,6,39,4,"value"],[77,11,39,4],[77,13,57,4],[77,22,57,4,"order"],[77,27,57,9,"order"],[77,28,57,10,"column"],[77,34,57,16],[77,36,57,104],[78,8,57,104],[78,12,57,104,"_ref"],[78,16,57,104],[78,19,57,104,"arguments"],[78,28,57,104],[78,29,57,104,"length"],[78,35,57,104],[78,43,57,104,"arguments"],[78,52,57,104],[78,60,57,104,"undefined"],[78,69,57,104],[78,72,57,104,"arguments"],[78,81,57,104],[78,87,57,100],[78,88,57,101],[78,89,57,102],[79,10,57,102,"_ref$ascending"],[79,24,57,102],[79,27,57,102,"_ref"],[79,31,57,102],[79,32,57,20,"ascending"],[79,41,57,29],[80,10,57,20,"ascending"],[80,19,57,29],[80,22,57,29,"_ref$ascending"],[80,36,57,29],[80,41,57,29,"undefined"],[80,50,57,29],[80,53,57,32],[80,57,57,36],[80,60,57,36,"_ref$ascending"],[80,74,57,36],[81,10,57,38,"nullsFirst"],[81,20,57,48],[81,23,57,48,"_ref"],[81,27,57,48],[81,28,57,38,"nullsFirst"],[81,38,57,48],[82,10,57,50,"foreignTable"],[82,22,57,62],[82,25,57,62,"_ref"],[82,29,57,62],[82,30,57,50,"foreignTable"],[82,42,57,62],[83,10,57,62,"_ref$referencedTable"],[83,30,57,62],[83,33,57,62,"_ref"],[83,37,57,62],[83,38,57,64,"referencedTable"],[83,53,57,79],[84,10,57,64,"referencedTable"],[84,25,57,79],[84,28,57,79,"_ref$referencedTable"],[84,48,57,79],[84,53,57,79,"undefined"],[84,62,57,79],[84,65,57,82,"foreignTable"],[84,77,57,94],[84,80,57,94,"_ref$referencedTable"],[84,100,57,94],[85,8,58,8],[85,12,58,14,"key"],[85,15,58,17],[85,18,58,20,"referencedTable"],[85,33,58,35],[85,36,58,38],[85,39,58,41,"referencedTable"],[85,54,58,56],[85,62,58,64],[85,65,58,67],[85,72,58,74],[86,8,59,8],[86,12,59,14,"existingOrder"],[86,25,59,27],[86,28,59,30],[86,32,59,34],[86,33,59,35,"url"],[86,36,59,38],[86,37,59,39,"searchParams"],[86,49,59,51],[86,50,59,52,"get"],[86,53,59,55],[86,54,59,56,"key"],[86,57,59,59],[86,58,59,60],[87,8,60,8],[87,12,60,12],[87,13,60,13,"url"],[87,16,60,16],[87,17,60,17,"searchParams"],[87,29,60,29],[87,30,60,30,"set"],[87,33,60,33],[87,34,60,34,"key"],[87,37,60,37],[87,39,60,39],[87,42,60,42,"existingOrder"],[87,55,60,55],[87,58,60,58],[87,61,60,61,"existingOrder"],[87,74,60,74],[87,77,60,77],[87,80,60,80],[87,82,60,82],[87,85,60,85,"column"],[87,91,60,91],[87,95,60,95,"ascending"],[87,104,60,104],[87,107,60,107],[87,112,60,112],[87,115,60,115],[87,121,60,121],[87,124,60,124,"nullsFirst"],[87,134,60,134],[87,139,60,139,"undefined"],[87,148,60,148],[87,151,60,151],[87,153,60,153],[87,156,60,156,"nullsFirst"],[87,166,60,166],[87,169,60,169],[87,182,60,182],[87,185,60,185],[87,197,60,197],[87,199,60,199],[87,200,60,200],[88,8,61,8],[88,15,61,15],[88,19,61,19],[89,6,62,4],[90,6,63,4],[91,0,64,0],[92,0,65,0],[93,0,66,0],[94,0,67,0],[95,0,68,0],[96,0,69,0],[97,0,70,0],[98,0,71,0],[99,0,72,0],[100,4,63,4],[101,6,63,4,"key"],[101,9,63,4],[102,6,63,4,"value"],[102,11,63,4],[102,13,73,4],[102,22,73,4,"limit"],[102,27,73,9,"limit"],[102,28,73,10,"count"],[102,33,73,15],[102,35,73,73],[103,8,73,73],[103,12,73,73,"_ref2"],[103,17,73,73],[103,20,73,73,"arguments"],[103,29,73,73],[103,30,73,73,"length"],[103,36,73,73],[103,44,73,73,"arguments"],[103,53,73,73],[103,61,73,73,"undefined"],[103,70,73,73],[103,73,73,73,"arguments"],[103,82,73,73],[103,88,73,69],[103,89,73,70],[103,90,73,71],[104,10,73,19,"foreignTable"],[104,22,73,31],[104,25,73,31,"_ref2"],[104,30,73,31],[104,31,73,19,"foreignTable"],[104,43,73,31],[105,10,73,31,"_ref2$referencedTable"],[105,31,73,31],[105,34,73,31,"_ref2"],[105,39,73,31],[105,40,73,33,"referencedTable"],[105,55,73,48],[106,10,73,33,"referencedTable"],[106,25,73,48],[106,28,73,48,"_ref2$referencedTable"],[106,49,73,48],[106,54,73,48,"undefined"],[106,63,73,48],[106,66,73,51,"foreignTable"],[106,78,73,63],[106,81,73,63,"_ref2$referencedTable"],[106,102,73,63],[107,8,74,8],[107,12,74,14,"key"],[107,15,74,17],[107,18,74,20],[107,25,74,27,"referencedTable"],[107,40,74,42],[107,45,74,47],[107,56,74,58],[107,59,74,61],[107,66,74,68],[107,69,74,71],[107,72,74,74,"referencedTable"],[107,87,74,89],[107,95,74,97],[108,8,75,8],[108,12,75,12],[108,13,75,13,"url"],[108,16,75,16],[108,17,75,17,"searchParams"],[108,29,75,29],[108,30,75,30,"set"],[108,33,75,33],[108,34,75,34,"key"],[108,37,75,37],[108,39,75,39],[108,42,75,42,"count"],[108,47,75,47],[108,49,75,49],[108,50,75,50],[109,8,76,8],[109,15,76,15],[109,19,76,19],[110,6,77,4],[111,6,78,4],[112,0,79,0],[113,0,80,0],[114,0,81,0],[115,0,82,0],[116,0,83,0],[117,0,84,0],[118,0,85,0],[119,0,86,0],[120,0,87,0],[121,0,88,0],[122,0,89,0],[123,0,90,0],[124,0,91,0],[125,0,92,0],[126,4,78,4],[127,6,78,4,"key"],[127,9,78,4],[128,6,78,4,"value"],[128,11,78,4],[128,13,93,4],[128,22,93,4,"range"],[128,27,93,9,"range"],[128,28,93,10,"from"],[128,32,93,14],[128,34,93,16,"to"],[128,36,93,18],[128,38,93,76],[129,8,93,76],[129,12,93,76,"_ref3"],[129,17,93,76],[129,20,93,76,"arguments"],[129,29,93,76],[129,30,93,76,"length"],[129,36,93,76],[129,44,93,76,"arguments"],[129,53,93,76],[129,61,93,76,"undefined"],[129,70,93,76],[129,73,93,76,"arguments"],[129,82,93,76],[129,88,93,72],[129,89,93,73],[129,90,93,74],[130,10,93,22,"foreignTable"],[130,22,93,34],[130,25,93,34,"_ref3"],[130,30,93,34],[130,31,93,22,"foreignTable"],[130,43,93,34],[131,10,93,34,"_ref3$referencedTable"],[131,31,93,34],[131,34,93,34,"_ref3"],[131,39,93,34],[131,40,93,36,"referencedTable"],[131,55,93,51],[132,10,93,36,"referencedTable"],[132,25,93,51],[132,28,93,51,"_ref3$referencedTable"],[132,49,93,51],[132,54,93,51,"undefined"],[132,63,93,51],[132,66,93,54,"foreignTable"],[132,78,93,66],[132,81,93,66,"_ref3$referencedTable"],[132,102,93,66],[133,8,94,8],[133,12,94,14,"keyOffset"],[133,21,94,23],[133,24,94,26],[133,31,94,33,"referencedTable"],[133,46,94,48],[133,51,94,53],[133,62,94,64],[133,65,94,67],[133,73,94,75],[133,76,94,78],[133,79,94,81,"referencedTable"],[133,94,94,96],[133,103,94,105],[134,8,95,8],[134,12,95,14,"keyLimit"],[134,20,95,22],[134,23,95,25],[134,30,95,32,"referencedTable"],[134,45,95,47],[134,50,95,52],[134,61,95,63],[134,64,95,66],[134,71,95,73],[134,74,95,76],[134,77,95,79,"referencedTable"],[134,92,95,94],[134,100,95,102],[135,8,96,8],[135,12,96,12],[135,13,96,13,"url"],[135,16,96,16],[135,17,96,17,"searchParams"],[135,29,96,29],[135,30,96,30,"set"],[135,33,96,33],[135,34,96,34,"keyOffset"],[135,43,96,43],[135,45,96,45],[135,48,96,48,"from"],[135,52,96,52],[135,54,96,54],[135,55,96,55],[136,8,97,8],[137,8,98,8],[137,12,98,12],[137,13,98,13,"url"],[137,16,98,16],[137,17,98,17,"searchParams"],[137,29,98,29],[137,30,98,30,"set"],[137,33,98,33],[137,34,98,34,"keyLimit"],[137,42,98,42],[137,44,98,44],[137,47,98,47,"to"],[137,49,98,49],[137,52,98,52,"from"],[137,56,98,56],[137,59,98,59],[137,60,98,60],[137,62,98,62],[137,63,98,63],[138,8,99,8],[138,15,99,15],[138,19,99,19],[139,6,100,4],[140,6,101,4],[141,0,102,0],[142,0,103,0],[143,0,104,0],[144,0,105,0],[145,4,101,4],[146,6,101,4,"key"],[146,9,101,4],[147,6,101,4,"value"],[147,11,101,4],[147,13,106,4],[147,22,106,4,"abortSignal"],[147,33,106,15,"abortSignal"],[147,34,106,16,"signal"],[147,40,106,22],[147,42,106,24],[148,8,107,8],[148,12,107,12],[148,13,107,13,"signal"],[148,19,107,19],[148,22,107,22,"signal"],[148,28,107,28],[149,8,108,8],[149,15,108,15],[149,19,108,19],[150,6,109,4],[151,6,110,4],[152,0,111,0],[153,0,112,0],[154,0,113,0],[155,0,114,0],[156,0,115,0],[157,4,110,4],[158,6,110,4,"key"],[158,9,110,4],[159,6,110,4,"value"],[159,11,110,4],[159,13,116,4],[159,22,116,4,"single"],[159,28,116,10,"single"],[159,29,116,10],[159,31,116,13],[160,8,117,8],[160,12,117,12],[160,13,117,13,"headers"],[160,20,117,20],[160,21,117,21],[160,29,117,29],[160,30,117,30],[160,33,117,33],[160,68,117,68],[161,8,118,8],[161,15,118,15],[161,19,118,19],[162,6,119,4],[163,6,120,4],[164,0,121,0],[165,0,122,0],[166,0,123,0],[167,0,124,0],[168,0,125,0],[169,4,120,4],[170,6,120,4,"key"],[170,9,120,4],[171,6,120,4,"value"],[171,11,120,4],[171,13,126,4],[171,22,126,4,"maybeSingle"],[171,33,126,15,"maybeSingle"],[171,34,126,15],[171,36,126,18],[172,8,127,8],[173,8,128,8],[174,8,129,8],[174,12,129,12],[174,16,129,16],[174,17,129,17,"method"],[174,23,129,23],[174,28,129,28],[174,33,129,33],[174,35,129,35],[175,10,130,12],[175,14,130,16],[175,15,130,17,"headers"],[175,22,130,24],[175,23,130,25],[175,31,130,33],[175,32,130,34],[175,35,130,37],[175,53,130,55],[176,8,131,8],[176,9,131,9],[176,15,132,13],[177,10,133,12],[177,14,133,16],[177,15,133,17,"headers"],[177,22,133,24],[177,23,133,25],[177,31,133,33],[177,32,133,34],[177,35,133,37],[177,70,133,72],[178,8,134,8],[179,8,135,8],[179,12,135,12],[179,13,135,13,"isMaybeSingle"],[179,26,135,26],[179,29,135,29],[179,33,135,33],[180,8,136,8],[180,15,136,15],[180,19,136,19],[181,6,137,4],[182,6,138,4],[183,0,139,0],[184,0,140,0],[185,4,138,4],[186,6,138,4,"key"],[186,9,138,4],[187,6,138,4,"value"],[187,11,138,4],[187,13,141,4],[187,22,141,4,"csv"],[187,25,141,7,"csv"],[187,26,141,7],[187,28,141,10],[188,8,142,8],[188,12,142,12],[188,13,142,13,"headers"],[188,20,142,20],[188,21,142,21],[188,29,142,29],[188,30,142,30],[188,33,142,33],[188,43,142,43],[189,8,143,8],[189,15,143,15],[189,19,143,19],[190,6,144,4],[191,6,145,4],[192,0,146,0],[193,0,147,0],[194,4,145,4],[195,6,145,4,"key"],[195,9,145,4],[196,6,145,4,"value"],[196,11,145,4],[196,13,148,4],[196,22,148,4,"geojson"],[196,29,148,11,"geojson"],[196,30,148,11],[196,32,148,14],[197,8,149,8],[197,12,149,12],[197,13,149,13,"headers"],[197,20,149,20],[197,21,149,21],[197,29,149,29],[197,30,149,30],[197,33,149,33],[197,55,149,55],[198,8,150,8],[198,15,150,15],[198,19,150,19],[199,6,151,4],[200,6,152,4],[201,0,153,0],[202,0,154,0],[203,0,155,0],[204,0,156,0],[205,0,157,0],[206,0,158,0],[207,0,159,0],[208,0,160,0],[209,0,161,0],[210,0,162,0],[211,0,163,0],[212,0,164,0],[213,0,165,0],[214,0,166,0],[215,0,167,0],[216,0,168,0],[217,0,169,0],[218,0,170,0],[219,0,171,0],[220,0,172,0],[221,0,173,0],[222,0,174,0],[223,0,175,0],[224,0,176,0],[225,4,152,4],[226,6,152,4,"key"],[226,9,152,4],[227,6,152,4,"value"],[227,11,152,4],[227,13,177,4],[227,22,177,4,"explain"],[227,29,177,11,"explain"],[227,30,177,11],[227,32,177,121],[228,8,177,121],[228,12,177,121,"_ref4"],[228,17,177,121],[228,20,177,121,"arguments"],[228,29,177,121],[228,30,177,121,"length"],[228,36,177,121],[228,44,177,121,"arguments"],[228,53,177,121],[228,61,177,121,"undefined"],[228,70,177,121],[228,73,177,121,"arguments"],[228,82,177,121],[228,88,177,117],[228,89,177,118],[228,90,177,119],[229,10,177,119,"_ref4$analyze"],[229,23,177,119],[229,26,177,119,"_ref4"],[229,31,177,119],[229,32,177,14,"analyze"],[229,39,177,21],[230,10,177,14,"analyze"],[230,17,177,21],[230,20,177,21,"_ref4$analyze"],[230,33,177,21],[230,38,177,21,"undefined"],[230,47,177,21],[230,50,177,24],[230,55,177,29],[230,58,177,29,"_ref4$analyze"],[230,71,177,29],[231,10,177,29,"_ref4$verbose"],[231,23,177,29],[231,26,177,29,"_ref4"],[231,31,177,29],[231,32,177,31,"verbose"],[231,39,177,38],[232,10,177,31,"verbose"],[232,17,177,38],[232,20,177,38,"_ref4$verbose"],[232,33,177,38],[232,38,177,38,"undefined"],[232,47,177,38],[232,50,177,41],[232,55,177,46],[232,58,177,46,"_ref4$verbose"],[232,71,177,46],[233,10,177,46,"_ref4$settings"],[233,24,177,46],[233,27,177,46,"_ref4"],[233,32,177,46],[233,33,177,48,"settings"],[233,41,177,56],[234,10,177,48,"settings"],[234,18,177,56],[234,21,177,56,"_ref4$settings"],[234,35,177,56],[234,40,177,56,"undefined"],[234,49,177,56],[234,52,177,59],[234,57,177,64],[234,60,177,64,"_ref4$settings"],[234,74,177,64],[235,10,177,64,"_ref4$buffers"],[235,23,177,64],[235,26,177,64,"_ref4"],[235,31,177,64],[235,32,177,66,"buffers"],[235,39,177,73],[236,10,177,66,"buffers"],[236,17,177,73],[236,20,177,73,"_ref4$buffers"],[236,33,177,73],[236,38,177,73,"undefined"],[236,47,177,73],[236,50,177,76],[236,55,177,81],[236,58,177,81,"_ref4$buffers"],[236,71,177,81],[237,10,177,81,"_ref4$wal"],[237,19,177,81],[237,22,177,81,"_ref4"],[237,27,177,81],[237,28,177,83,"wal"],[237,31,177,86],[238,10,177,83,"wal"],[238,13,177,86],[238,16,177,86,"_ref4$wal"],[238,25,177,86],[238,30,177,86,"undefined"],[238,39,177,86],[238,42,177,89],[238,47,177,94],[238,50,177,94,"_ref4$wal"],[238,59,177,94],[239,10,177,94,"_ref4$format"],[239,22,177,94],[239,25,177,94,"_ref4"],[239,30,177,94],[239,31,177,96,"format"],[239,37,177,102],[240,10,177,96,"format"],[240,16,177,102],[240,19,177,102,"_ref4$format"],[240,31,177,102],[240,36,177,102,"undefined"],[240,45,177,102],[240,48,177,105],[240,54,177,111],[240,57,177,111,"_ref4$format"],[240,69,177,111],[241,8,178,8],[241,12,178,12,"_a"],[241,14,178,14],[242,8,179,8],[242,12,179,14,"options"],[242,19,179,21],[242,22,179,24],[242,23,180,12,"analyze"],[242,30,180,19],[242,33,180,22],[242,42,180,31],[242,45,180,34],[242,49,180,38],[242,51,181,12,"verbose"],[242,58,181,19],[242,61,181,22],[242,70,181,31],[242,73,181,34],[242,77,181,38],[242,79,182,12,"settings"],[242,87,182,20],[242,90,182,23],[242,100,182,33],[242,103,182,36],[242,107,182,40],[242,109,183,12,"buffers"],[242,116,183,19],[242,119,183,22],[242,128,183,31],[242,131,183,34],[242,135,183,38],[242,137,184,12,"wal"],[242,140,184,15],[242,143,184,18],[242,148,184,23],[242,151,184,26],[242,155,184,30],[242,156,185,9],[242,157,186,13,"filter"],[242,163,186,19],[242,164,186,20,"Boolean"],[242,171,186,27],[242,172,186,28],[242,173,187,13,"join"],[242,177,187,17],[242,178,187,18],[242,181,187,21],[242,182,187,22],[243,8,188,8],[244,8,189,8],[244,12,189,14,"forMediatype"],[244,24,189,26],[244,27,189,29],[244,28,189,30,"_a"],[244,30,189,32],[244,33,189,35],[244,37,189,39],[244,38,189,40,"headers"],[244,45,189,47],[244,46,189,48],[244,54,189,56],[244,55,189,57],[244,61,189,63],[244,65,189,67],[244,69,189,71,"_a"],[244,71,189,73],[244,76,189,73,"undefined"],[244,85,189,84],[244,88,189,87,"_a"],[244,90,189,89],[244,93,189,92],[244,111,189,110],[245,8,190,8],[245,12,190,12],[245,13,190,13,"headers"],[245,20,190,20],[245,21,190,21],[245,29,190,29],[245,30,190,30],[245,33,190,33],[245,63,190,63,"format"],[245,69,190,69],[245,79,190,79,"forMediatype"],[245,91,190,91],[245,105,190,105,"options"],[245,112,190,112],[245,115,190,115],[246,8,191,8],[246,12,191,12,"format"],[246,18,191,18],[246,23,191,23],[246,29,191,29],[246,31,192,12],[246,38,192,19],[246,42,192,23],[246,43,192,24],[246,48,194,12],[246,55,194,19],[246,59,194,23],[247,6,195,4],[248,6,196,4],[249,0,197,0],[250,0,198,0],[251,0,199,0],[252,0,200,0],[253,4,196,4],[254,6,196,4,"key"],[254,9,196,4],[255,6,196,4,"value"],[255,11,196,4],[255,13,201,4],[255,22,201,4,"rollback"],[255,30,201,12,"rollback"],[255,31,201,12],[255,33,201,15],[256,8,202,8],[256,12,202,12,"_a"],[256,14,202,14],[257,8,203,8],[257,12,203,12],[257,13,203,13],[257,14,203,14,"_a"],[257,16,203,16],[257,19,203,19],[257,23,203,23],[257,24,203,24,"headers"],[257,31,203,31],[257,32,203,32],[257,40,203,40],[257,41,203,41],[257,47,203,47],[257,51,203,51],[257,55,203,55,"_a"],[257,57,203,57],[257,62,203,57,"undefined"],[257,71,203,68],[257,74,203,71,"_a"],[257,76,203,73],[257,79,203,76],[257,81,203,78],[257,83,203,80,"trim"],[257,87,203,84],[257,88,203,85],[257,89,203,86],[257,90,203,87,"length"],[257,96,203,93],[257,99,203,96],[257,100,203,97],[257,102,203,99],[258,10,204,12],[258,14,204,16],[258,15,204,17,"headers"],[258,22,204,24],[258,23,204,25],[258,31,204,33],[258,32,204,34],[258,36,204,38],[258,50,204,52],[259,8,205,8],[259,9,205,9],[259,15,206,13],[260,10,207,12],[260,14,207,16],[260,15,207,17,"headers"],[260,22,207,24],[260,23,207,25],[260,31,207,33],[260,32,207,34],[260,35,207,37],[260,48,207,50],[261,8,208,8],[262,8,209,8],[262,15,209,15],[262,19,209,19],[263,6,210,4],[264,6,211,4],[265,0,212,0],[266,0,213,0],[267,0,214,0],[268,0,215,0],[269,0,216,0],[270,4,211,4],[271,6,211,4,"key"],[271,9,211,4],[272,6,211,4,"value"],[272,11,211,4],[272,13,217,4],[272,22,217,4,"returns"],[272,29,217,11,"returns"],[272,30,217,11],[272,32,217,14],[273,8,218,8],[273,15,218,15],[273,19,218,19],[274,6,219,4],[275,4,219,5],[276,2,219,5],[276,4,7,40,"PostgrestBuilder_1"],[276,22,7,58],[276,23,7,59,"default"],[276,30,7,66],[277,2,221,0,"exports"],[277,9,221,7],[277,10,221,8,"default"],[277,17,221,15],[277,20,221,18,"PostgrestTransformBuilder"],[277,45,221,43],[278,0,221,44],[278,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestTransformBuilder","select","split.map$argument_0","order","limit","range","abortSignal","single","maybeSingle","csv","geojson","explain","rollback","returns"],"mappings":"AAA;wDCC;CDE;AEG;ICU;iBCK;SDQ;KDQ;IGmB;KHK;IIW;KJI;IKgB;KLO;IMM;KNG;IOO;KPG;IQO;KRW;ISI;KTG;IUI;KVG;IW0B;KXkB;IYM;KZS;IaO;KbE;CFC"}},"type":"js/module"}]}