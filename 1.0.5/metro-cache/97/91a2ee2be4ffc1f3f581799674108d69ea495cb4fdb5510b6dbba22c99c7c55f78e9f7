{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":737,"column":42,"index":27909}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":737,"column":42,"index":27909}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":737,"column":42,"index":27909}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./lib/websocket-factory","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":39,"column":44,"index":1619},"end":{"line":39,"column":78,"index":1653}}],"key":"IuYva76AzihXvd++9636og/hKUg="}},{"name":"./lib/constants","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":40,"column":20,"index":1676},"end":{"line":40,"column":46,"index":1702}}],"key":"vOlz0Gb+0cB0kH+RzmrXAZ/gH2Q="}},{"name":"./lib/serializer","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":41,"column":37,"index":1741},"end":{"line":41,"column":64,"index":1768}}],"key":"PtAT+X6gBFqC/tPGdkEjstF8Nag="}},{"name":"./lib/timer","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":42,"column":32,"index":1803},"end":{"line":42,"column":54,"index":1825}}],"key":"z8v6W0ppO7sN5nxG8qf/njGrlA4="}},{"name":"./lib/transformers","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":43,"column":23,"index":1851},"end":{"line":43,"column":52,"index":1880}}],"key":"3aWf9aPgZJt16red3gO65waD30o="}},{"name":"./RealtimeChannel","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":44,"column":42,"index":1924},"end":{"line":44,"column":70,"index":1952}}],"key":"Dv0cB4mvulBlshRVxdLZ2+y3Jqk="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _asyncToGenerator = require(_dependencyMap[0]);\n  var _classCallCheck = require(_dependencyMap[1]);\n  var _createClass = require(_dependencyMap[2]);\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var websocket_factory_1 = __importDefault(require(_dependencyMap[3]));\n  var constants_1 = require(_dependencyMap[4]);\n  var serializer_1 = __importDefault(require(_dependencyMap[5]));\n  var timer_1 = __importDefault(require(_dependencyMap[6]));\n  var transformers_1 = require(_dependencyMap[7]);\n  var RealtimeChannel_1 = __importDefault(require(_dependencyMap[8]));\n  var noop = () => {};\n  // Connection-related constants\n  var CONNECTION_TIMEOUTS = {\n    HEARTBEAT_INTERVAL: 25000,\n    RECONNECT_DELAY: 10,\n    HEARTBEAT_TIMEOUT_FALLBACK: 100\n  };\n  var RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\n  var DEFAULT_RECONNECT_FALLBACK = 10000;\n  var WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\n  var RealtimeClient = /*#__PURE__*/function () {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.logLevel Sets the log level for Realtime\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    function RealtimeClient(endPoint, options) {\n      _classCallCheck(this, RealtimeClient);\n      var _a;\n      this.accessTokenValue = null;\n      this.apiKey = null;\n      this.channels = new Array();\n      this.endPoint = '';\n      this.httpEndpoint = '';\n      /** @deprecated headers cannot be set on websocket connections */\n      this.headers = {};\n      this.params = {};\n      this.timeout = constants_1.DEFAULT_TIMEOUT;\n      this.transport = null;\n      this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.heartbeatTimer = undefined;\n      this.pendingHeartbeatRef = null;\n      this.heartbeatCallback = noop;\n      this.ref = 0;\n      this.reconnectTimer = null;\n      this.logger = noop;\n      this.conn = null;\n      this.sendBuffer = [];\n      this.serializer = new serializer_1.default();\n      this.stateChangeCallbacks = {\n        open: [],\n        close: [],\n        error: [],\n        message: []\n      };\n      this.accessToken = null;\n      this._connectionState = 'disconnected';\n      this._wasManualDisconnect = false;\n      this._authPromise = null;\n      /**\n       * Use either custom fetch, if provided, or default fetch to make HTTP requests\n       *\n       * @internal\n       */\n      this._resolveFetch = customFetch => {\n        var _fetch;\n        if (customFetch) {\n          _fetch = customFetch;\n        } else if (typeof fetch === 'undefined') {\n          // Node.js environment without native fetch\n          _fetch = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return Promise.resolve(`${'@supabase/node-fetch'}`).then(s => __importStar(function (line) {\n              throw new Error('Dynamic require defined at line ' + line + '; not supported by Metro');\n            }(123))).then(_ref => {\n              var fetch = _ref.default;\n              return fetch(...args);\n            }).catch(error => {\n              throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` + `This is required for HTTP requests in Node.js environments without native fetch.`);\n            });\n          };\n        } else {\n          _fetch = fetch;\n        }\n        return function () {\n          return _fetch(...arguments);\n        };\n      };\n      // Validate required parameters\n      if (!((_a = options === null || options === undefined ? undefined : options.params) === null || _a === undefined ? undefined : _a.apikey)) {\n        throw new Error('API key is required to connect to Realtime');\n      }\n      this.apiKey = options.params.apikey;\n      // Initialize endpoint URLs\n      this.endPoint = `${endPoint}/${constants_1.TRANSPORTS.websocket}`;\n      this.httpEndpoint = (0, transformers_1.httpEndpointURL)(endPoint);\n      this._initializeOptions(options);\n      this._setupReconnectionTimer();\n      this.fetch = this._resolveFetch(options === null || options === undefined ? undefined : options.fetch);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    return _createClass(RealtimeClient, [{\n      key: \"connect\",\n      value: function connect() {\n        // Skip if already connecting, disconnecting, or connected\n        if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {\n          return;\n        }\n        this._setConnectionState('connecting');\n        this._setAuthSafely('connect');\n        // Establish WebSocket connection\n        if (this.transport) {\n          // Use custom transport if provided\n          this.conn = new this.transport(this.endpointURL());\n        } else {\n          // Try to use native WebSocket\n          try {\n            this.conn = websocket_factory_1.default.createWebSocket(this.endpointURL());\n          } catch (error) {\n            this._setConnectionState('disconnected');\n            var errorMessage = error.message;\n            // Provide helpful error message based on environment\n            if (errorMessage.includes('Node.js')) {\n              throw new Error(`${errorMessage}\\n\\n` + 'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' + 'Option 1: Use Node.js 22+ which has native WebSocket support\\n' + 'Option 2: Install and provide the \"ws\" package:\\n\\n' + '  npm install ws\\n\\n' + '  import ws from \"ws\"\\n' + '  const client = new RealtimeClient(url, {\\n' + '    ...options,\\n' + '    transport: ws\\n' + '  })');\n            }\n            throw new Error(`WebSocket not available: ${errorMessage}`);\n          }\n        }\n        this._setupConnectionHandlers();\n      }\n      /**\n       * Returns the URL of the websocket.\n       * @returns string The URL of the websocket.\n       */\n    }, {\n      key: \"endpointURL\",\n      value: function endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n          vsn: constants_1.VSN\n        }));\n      }\n      /**\n       * Disconnects the socket.\n       *\n       * @param code A numeric status code to send on disconnect.\n       * @param reason A custom reason for the disconnect.\n       */\n    }, {\n      key: \"disconnect\",\n      value: function disconnect(code, reason) {\n        if (this.isDisconnecting()) {\n          return;\n        }\n        this._setConnectionState('disconnecting', true);\n        if (this.conn) {\n          // Setup fallback timer to prevent hanging in disconnecting state\n          var fallbackTimer = setTimeout(() => {\n            this._setConnectionState('disconnected');\n          }, 100);\n          this.conn.onclose = () => {\n            clearTimeout(fallbackTimer);\n            this._setConnectionState('disconnected');\n          };\n          // Close the WebSocket connection\n          if (code) {\n            this.conn.close(code, reason !== null && reason !== undefined ? reason : '');\n          } else {\n            this.conn.close();\n          }\n          this._teardownConnection();\n        } else {\n          this._setConnectionState('disconnected');\n        }\n      }\n      /**\n       * Returns all created channels\n       */\n    }, {\n      key: \"getChannels\",\n      value: function getChannels() {\n        return this.channels;\n      }\n      /**\n       * Unsubscribes and removes a single channel\n       * @param channel A RealtimeChannel instance\n       */\n    }, {\n      key: \"removeChannel\",\n      value: (function () {\n        var _removeChannel = _asyncToGenerator(function* (channel) {\n          var status = yield channel.unsubscribe();\n          if (this.channels.length === 0) {\n            this.disconnect();\n          }\n          return status;\n        });\n        function removeChannel(_x) {\n          return _removeChannel.apply(this, arguments);\n        }\n        return removeChannel;\n      }()\n      /**\n       * Unsubscribes and removes all channels\n       */\n      )\n    }, {\n      key: \"removeAllChannels\",\n      value: (function () {\n        var _removeAllChannels = _asyncToGenerator(function* () {\n          var values_1 = yield Promise.all(this.channels.map(channel => channel.unsubscribe()));\n          this.channels = [];\n          this.disconnect();\n          return values_1;\n        });\n        function removeAllChannels() {\n          return _removeAllChannels.apply(this, arguments);\n        }\n        return removeAllChannels;\n      }()\n      /**\n       * Logs the message.\n       *\n       * For customized logging, `this.logger` can be overridden.\n       */\n      )\n    }, {\n      key: \"log\",\n      value: function log(kind, msg, data) {\n        this.logger(kind, msg, data);\n      }\n      /**\n       * Returns the current state of the socket.\n       */\n    }, {\n      key: \"connectionState\",\n      value: function connectionState() {\n        switch (this.conn && this.conn.readyState) {\n          case constants_1.SOCKET_STATES.connecting:\n            return constants_1.CONNECTION_STATE.Connecting;\n          case constants_1.SOCKET_STATES.open:\n            return constants_1.CONNECTION_STATE.Open;\n          case constants_1.SOCKET_STATES.closing:\n            return constants_1.CONNECTION_STATE.Closing;\n          default:\n            return constants_1.CONNECTION_STATE.Closed;\n        }\n      }\n      /**\n       * Returns `true` is the connection is open.\n       */\n    }, {\n      key: \"isConnected\",\n      value: function isConnected() {\n        return this.connectionState() === constants_1.CONNECTION_STATE.Open;\n      }\n      /**\n       * Returns `true` if the connection is currently connecting.\n       */\n    }, {\n      key: \"isConnecting\",\n      value: function isConnecting() {\n        return this._connectionState === 'connecting';\n      }\n      /**\n       * Returns `true` if the connection is currently disconnecting.\n       */\n    }, {\n      key: \"isDisconnecting\",\n      value: function isDisconnecting() {\n        return this._connectionState === 'disconnecting';\n      }\n    }, {\n      key: \"channel\",\n      value: function channel(topic) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          config: {}\n        };\n        var realtimeTopic = `realtime:${topic}`;\n        var exists = this.getChannels().find(c => c.topic === realtimeTopic);\n        if (!exists) {\n          var chan = new RealtimeChannel_1.default(`realtime:${topic}`, params, this);\n          this.channels.push(chan);\n          return chan;\n        } else {\n          return exists;\n        }\n      }\n      /**\n       * Push out a message if the socket is connected.\n       *\n       * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n       */\n    }, {\n      key: \"push\",\n      value: function push(data) {\n        var topic = data.topic,\n          event = data.event,\n          payload = data.payload,\n          ref = data.ref;\n        var callback = () => {\n          this.encode(data, result => {\n            var _a;\n            (_a = this.conn) === null || _a === undefined ? undefined : _a.send(result);\n          });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n          callback();\n        } else {\n          this.sendBuffer.push(callback);\n        }\n      }\n      /**\n       * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n       *\n       * If param is null it will use the `accessToken` callback function or the token set on the client.\n       *\n       * On callback used, it will set the value of the token internal to the client.\n       *\n       * @param token A JWT string to override the token set on the client.\n       */\n    }, {\n      key: \"setAuth\",\n      value: (function () {\n        var _setAuth = _asyncToGenerator(function* () {\n          var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          this._authPromise = this._performAuth(token);\n          try {\n            yield this._authPromise;\n          } finally {\n            this._authPromise = null;\n          }\n        });\n        function setAuth() {\n          return _setAuth.apply(this, arguments);\n        }\n        return setAuth;\n      }()\n      /**\n       * Sends a heartbeat message if the socket is connected.\n       */\n      )\n    }, {\n      key: \"sendHeartbeat\",\n      value: (function () {\n        var _sendHeartbeat = _asyncToGenerator(function* () {\n          var _a;\n          if (!this.isConnected()) {\n            this.heartbeatCallback('disconnected');\n            return;\n          }\n          // Handle heartbeat timeout and force reconnection if needed\n          if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            this.heartbeatCallback('timeout');\n            // Force reconnection after heartbeat timeout\n            this._wasManualDisconnect = false;\n            (_a = this.conn) === null || _a === undefined ? undefined : _a.close(constants_1.WS_CLOSE_NORMAL, 'heartbeat timeout');\n            setTimeout(() => {\n              var _a;\n              if (!this.isConnected()) {\n                (_a = this.reconnectTimer) === null || _a === undefined ? undefined : _a.scheduleTimeout();\n              }\n            }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n            return;\n          }\n          // Send heartbeat message to server\n          this.pendingHeartbeatRef = this._makeRef();\n          this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef\n          });\n          this.heartbeatCallback('sent');\n          this._setAuthSafely('heartbeat');\n        });\n        function sendHeartbeat() {\n          return _sendHeartbeat.apply(this, arguments);\n        }\n        return sendHeartbeat;\n      }())\n    }, {\n      key: \"onHeartbeat\",\n      value: function onHeartbeat(callback) {\n        this.heartbeatCallback = callback;\n      }\n      /**\n       * Flushes send buffer\n       */\n    }, {\n      key: \"flushSendBuffer\",\n      value: function flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n          this.sendBuffer.forEach(callback => callback());\n          this.sendBuffer = [];\n        }\n      }\n      /**\n       * Return the next message ref, accounting for overflows\n       *\n       * @internal\n       */\n    }, {\n      key: \"_makeRef\",\n      value: function _makeRef() {\n        var newRef = this.ref + 1;\n        if (newRef === this.ref) {\n          this.ref = 0;\n        } else {\n          this.ref = newRef;\n        }\n        return this.ref.toString();\n      }\n      /**\n       * Unsubscribe from channels with the specified topic.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_leaveOpenTopic\",\n      value: function _leaveOpenTopic(topic) {\n        var dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n          this.log('transport', `leaving duplicate topic \"${topic}\"`);\n          dupChannel.unsubscribe();\n        }\n      }\n      /**\n       * Removes a subscription from the socket.\n       *\n       * @param channel An open subscription.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_remove\",\n      value: function _remove(channel) {\n        this.channels = this.channels.filter(c => c.topic !== channel.topic);\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnMessage\",\n      value: function _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, msg => {\n          // Handle heartbeat responses\n          if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n            this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n          }\n          // Handle pending heartbeat reference cleanup\n          if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n          }\n          // Log incoming message\n          var topic = msg.topic,\n            event = msg.event,\n            payload = msg.payload,\n            ref = msg.ref;\n          var refString = ref ? `(${ref})` : '';\n          var status = payload.status || '';\n          this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n          // Route message to appropriate channels\n          this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n          this._triggerStateCallbacks('message', msg);\n        });\n      }\n      /**\n       * Clear specific timer\n       * @internal\n       */\n    }, {\n      key: \"_clearTimer\",\n      value: function _clearTimer(timer) {\n        var _a;\n        if (timer === 'heartbeat' && this.heartbeatTimer) {\n          clearInterval(this.heartbeatTimer);\n          this.heartbeatTimer = undefined;\n        } else if (timer === 'reconnect') {\n          (_a = this.reconnectTimer) === null || _a === undefined ? undefined : _a.reset();\n        }\n      }\n      /**\n       * Clear all timers\n       * @internal\n       */\n    }, {\n      key: \"_clearAllTimers\",\n      value: function _clearAllTimers() {\n        this._clearTimer('heartbeat');\n        this._clearTimer('reconnect');\n      }\n      /**\n       * Setup connection handlers for WebSocket events\n       * @internal\n       */\n    }, {\n      key: \"_setupConnectionHandlers\",\n      value: function _setupConnectionHandlers() {\n        if (!this.conn) return;\n        // Set binary type if supported (browsers and most WebSocket implementations)\n        if ('binaryType' in this.conn) {\n          ;\n          this.conn.binaryType = 'arraybuffer';\n        }\n        this.conn.onopen = () => this._onConnOpen();\n        this.conn.onerror = error => this._onConnError(error);\n        this.conn.onmessage = event => this._onConnMessage(event);\n        this.conn.onclose = event => this._onConnClose(event);\n      }\n      /**\n       * Teardown connection and cleanup resources\n       * @internal\n       */\n    }, {\n      key: \"_teardownConnection\",\n      value: function _teardownConnection() {\n        if (this.conn) {\n          this.conn.onopen = null;\n          this.conn.onerror = null;\n          this.conn.onmessage = null;\n          this.conn.onclose = null;\n          this.conn = null;\n        }\n        this._clearAllTimers();\n        this.channels.forEach(channel => channel.teardown());\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnOpen\",\n      value: function _onConnOpen() {\n        this._setConnectionState('connected');\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this._clearTimer('reconnect');\n        if (!this.worker) {\n          this._startHeartbeat();\n        } else {\n          if (!this.workerRef) {\n            this._startWorkerHeartbeat();\n          }\n        }\n        this._triggerStateCallbacks('open');\n      }\n      /** @internal */\n    }, {\n      key: \"_startHeartbeat\",\n      value: function _startHeartbeat() {\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n      }\n      /** @internal */\n    }, {\n      key: \"_startWorkerHeartbeat\",\n      value: function _startWorkerHeartbeat() {\n        if (this.workerUrl) {\n          this.log('worker', `starting worker for from ${this.workerUrl}`);\n        } else {\n          this.log('worker', `starting default worker`);\n        }\n        var objectUrl = this._workerObjectUrl(this.workerUrl);\n        this.workerRef = new Worker(objectUrl);\n        this.workerRef.onerror = error => {\n          this.log('worker', 'worker error', error.message);\n          this.workerRef.terminate();\n        };\n        this.workerRef.onmessage = event => {\n          if (event.data.event === 'keepAlive') {\n            this.sendHeartbeat();\n          }\n        };\n        this.workerRef.postMessage({\n          event: 'start',\n          interval: this.heartbeatIntervalMs\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnClose\",\n      value: function _onConnClose(event) {\n        var _a;\n        this._setConnectionState('disconnected');\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this._clearTimer('heartbeat');\n        // Only schedule reconnection if it wasn't a manual disconnect\n        if (!this._wasManualDisconnect) {\n          (_a = this.reconnectTimer) === null || _a === undefined ? undefined : _a.scheduleTimeout();\n        }\n        this._triggerStateCallbacks('close', event);\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnError\",\n      value: function _onConnError(error) {\n        this._setConnectionState('disconnected');\n        this.log('transport', `${error}`);\n        this._triggerChanError();\n        this._triggerStateCallbacks('error', error);\n      }\n      /** @internal */\n    }, {\n      key: \"_triggerChanError\",\n      value: function _triggerChanError() {\n        this.channels.forEach(channel => channel._trigger(constants_1.CHANNEL_EVENTS.error));\n      }\n      /** @internal */\n    }, {\n      key: \"_appendParams\",\n      value: function _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n          return url;\n        }\n        var prefix = url.match(/\\?/) ? '&' : '?';\n        var query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n      }\n    }, {\n      key: \"_workerObjectUrl\",\n      value: function _workerObjectUrl(url) {\n        var result_url;\n        if (url) {\n          result_url = url;\n        } else {\n          var blob = new Blob([WORKER_SCRIPT], {\n            type: 'application/javascript'\n          });\n          result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n      }\n      /**\n       * Set connection state with proper state management\n       * @internal\n       */\n    }, {\n      key: \"_setConnectionState\",\n      value: function _setConnectionState(state) {\n        var manual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        this._connectionState = state;\n        if (state === 'connecting') {\n          this._wasManualDisconnect = false;\n        } else if (state === 'disconnecting') {\n          this._wasManualDisconnect = manual;\n        }\n      }\n      /**\n       * Perform the actual auth operation\n       * @internal\n       */\n    }, {\n      key: \"_performAuth\",\n      value: (function () {\n        var _performAuth2 = _asyncToGenerator(function* () {\n          var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          var tokenToSend;\n          if (token) {\n            tokenToSend = token;\n          } else if (this.accessToken) {\n            // Always call the accessToken callback to get fresh token\n            tokenToSend = yield this.accessToken();\n          } else {\n            tokenToSend = this.accessTokenValue;\n          }\n          if (this.accessTokenValue != tokenToSend) {\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach(channel => {\n              var payload = {\n                access_token: tokenToSend,\n                version: constants_1.DEFAULT_VERSION\n              };\n              tokenToSend && channel.updateJoinPayload(payload);\n              if (channel.joinedOnce && channel._isJoined()) {\n                channel._push(constants_1.CHANNEL_EVENTS.access_token, {\n                  access_token: tokenToSend\n                });\n              }\n            });\n          }\n        });\n        function _performAuth() {\n          return _performAuth2.apply(this, arguments);\n        }\n        return _performAuth;\n      }()\n      /**\n       * Wait for any in-flight auth operations to complete\n       * @internal\n       */\n      )\n    }, {\n      key: \"_waitForAuthIfNeeded\",\n      value: (function () {\n        var _waitForAuthIfNeeded2 = _asyncToGenerator(function* () {\n          if (this._authPromise) {\n            yield this._authPromise;\n          }\n        });\n        function _waitForAuthIfNeeded() {\n          return _waitForAuthIfNeeded2.apply(this, arguments);\n        }\n        return _waitForAuthIfNeeded;\n      }()\n      /**\n       * Safely call setAuth with standardized error handling\n       * @internal\n       */\n      )\n    }, {\n      key: \"_setAuthSafely\",\n      value: function _setAuthSafely() {\n        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'general';\n        this.setAuth().catch(e => {\n          this.log('error', `error setting auth in ${context}`, e);\n        });\n      }\n      /**\n       * Trigger state change callbacks with proper error handling\n       * @internal\n       */\n    }, {\n      key: \"_triggerStateCallbacks\",\n      value: function _triggerStateCallbacks(event, data) {\n        try {\n          this.stateChangeCallbacks[event].forEach(callback => {\n            try {\n              callback(data);\n            } catch (e) {\n              this.log('error', `error in ${event} callback`, e);\n            }\n          });\n        } catch (e) {\n          this.log('error', `error triggering ${event} callbacks`, e);\n        }\n      }\n      /**\n       * Setup reconnection timer with proper configuration\n       * @internal\n       */\n    }, {\n      key: \"_setupReconnectionTimer\",\n      value: function _setupReconnectionTimer() {\n        var _this = this;\n        this.reconnectTimer = new timer_1.default(/*#__PURE__*/_asyncToGenerator(function* () {\n          setTimeout(/*#__PURE__*/_asyncToGenerator(function* () {\n            yield _this._waitForAuthIfNeeded();\n            if (!_this.isConnected()) {\n              _this.connect();\n            }\n          }), CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n        }), this.reconnectAfterMs);\n      }\n      /**\n       * Initialize client options with defaults\n       * @internal\n       */\n    }, {\n      key: \"_initializeOptions\",\n      value: function _initializeOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        // Set defaults\n        this.transport = (_a = options === null || options === undefined ? undefined : options.transport) !== null && _a !== undefined ? _a : null;\n        this.timeout = (_b = options === null || options === undefined ? undefined : options.timeout) !== null && _b !== undefined ? _b : constants_1.DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs = (_c = options === null || options === undefined ? undefined : options.heartbeatIntervalMs) !== null && _c !== undefined ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n        this.worker = (_d = options === null || options === undefined ? undefined : options.worker) !== null && _d !== undefined ? _d : false;\n        this.accessToken = (_e = options === null || options === undefined ? undefined : options.accessToken) !== null && _e !== undefined ? _e : null;\n        // Handle special cases\n        if (options === null || options === undefined ? undefined : options.params) this.params = options.params;\n        if (options === null || options === undefined ? undefined : options.logger) this.logger = options.logger;\n        if ((options === null || options === undefined ? undefined : options.logLevel) || (options === null || options === undefined ? undefined : options.log_level)) {\n          this.logLevel = options.logLevel || options.log_level;\n          this.params = Object.assign(Object.assign({}, this.params), {\n            log_level: this.logLevel\n          });\n        }\n        // Set up functions with defaults\n        this.reconnectAfterMs = (_f = options === null || options === undefined ? undefined : options.reconnectAfterMs) !== null && _f !== undefined ? _f : tries => {\n          return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n        };\n        this.encode = (_g = options === null || options === undefined ? undefined : options.encode) !== null && _g !== undefined ? _g : (payload, callback) => {\n          return callback(JSON.stringify(payload));\n        };\n        this.decode = (_h = options === null || options === undefined ? undefined : options.decode) !== null && _h !== undefined ? _h : this.serializer.decode.bind(this.serializer);\n        // Handle worker setup\n        if (this.worker) {\n          if (typeof window !== 'undefined' && !window.Worker) {\n            throw new Error('Web Worker is not supported');\n          }\n          this.workerUrl = options === null || options === undefined ? undefined : options.workerUrl;\n        }\n      }\n    }]);\n  }();\n  exports.default = RealtimeClient;\n});","lineCount":868,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"require"],[4,33,1,13],[4,34,1,13,"_dependencyMap"],[4,48,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[7,2,2,0],[7,6,2,4,"__createBinding"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__createBinding"],[7,52,2,51],[7,57,2,57,"Object"],[7,63,2,63],[7,64,2,64,"create"],[7,70,2,70],[7,73,2,74],[7,83,2,83,"o"],[7,84,2,84],[7,86,2,86,"m"],[7,87,2,87],[7,89,2,89,"k"],[7,90,2,90],[7,92,2,92,"k2"],[7,94,2,94],[7,96,2,96],[8,4,3,4],[8,8,3,8,"k2"],[8,10,3,10],[8,15,3,15,"undefined"],[8,24,3,24],[8,26,3,26,"k2"],[8,28,3,28],[8,31,3,31,"k"],[8,32,3,32],[9,4,4,4],[9,8,4,8,"desc"],[9,12,4,12],[9,15,4,15,"Object"],[9,21,4,21],[9,22,4,22,"getOwnPropertyDescriptor"],[9,46,4,46],[9,47,4,47,"m"],[9,48,4,48],[9,50,4,50,"k"],[9,51,4,51],[9,52,4,52],[10,4,5,4],[10,8,5,8],[10,9,5,9,"desc"],[10,13,5,13],[10,18,5,18],[10,23,5,23],[10,27,5,27,"desc"],[10,31,5,31],[10,34,5,34],[10,35,5,35,"m"],[10,36,5,36],[10,37,5,37,"__esModule"],[10,47,5,47],[10,50,5,50,"desc"],[10,54,5,54],[10,55,5,55,"writable"],[10,63,5,63],[10,67,5,67,"desc"],[10,71,5,71],[10,72,5,72,"configurable"],[10,84,5,84],[10,85,5,85],[10,87,5,87],[11,6,6,6,"desc"],[11,10,6,10],[11,13,6,13],[12,8,6,15,"enumerable"],[12,18,6,25],[12,20,6,27],[12,24,6,31],[13,8,6,33,"get"],[13,11,6,36],[13,13,6,38],[13,22,6,38,"get"],[13,23,6,38],[13,25,6,49],[14,10,6,51],[14,17,6,58,"m"],[14,18,6,59],[14,19,6,60,"k"],[14,20,6,61],[14,21,6,62],[15,8,6,64],[16,6,6,66],[16,7,6,67],[17,4,7,4],[18,4,8,4,"Object"],[18,10,8,10],[18,11,8,11,"defineProperty"],[18,25,8,25],[18,26,8,26,"o"],[18,27,8,27],[18,29,8,29,"k2"],[18,31,8,31],[18,33,8,33,"desc"],[18,37,8,37],[18,38,8,38],[19,2,9,0],[19,3,9,1],[19,6,9,6],[19,16,9,15,"o"],[19,17,9,16],[19,19,9,18,"m"],[19,20,9,19],[19,22,9,21,"k"],[19,23,9,22],[19,25,9,24,"k2"],[19,27,9,26],[19,29,9,28],[20,4,10,4],[20,8,10,8,"k2"],[20,10,10,10],[20,15,10,15,"undefined"],[20,24,10,24],[20,26,10,26,"k2"],[20,28,10,28],[20,31,10,31,"k"],[20,32,10,32],[21,4,11,4,"o"],[21,5,11,5],[21,6,11,6,"k2"],[21,8,11,8],[21,9,11,9],[21,12,11,12,"m"],[21,13,11,13],[21,14,11,14,"k"],[21,15,11,15],[21,16,11,16],[22,2,12,0],[22,3,12,2],[22,4,12,3],[23,2,13,0],[23,6,13,4,"__setModuleDefault"],[23,24,13,22],[23,27,13,26],[23,31,13,30],[23,35,13,34],[23,39,13,38],[23,40,13,39,"__setModuleDefault"],[23,58,13,57],[23,63,13,63,"Object"],[23,69,13,69],[23,70,13,70,"create"],[23,76,13,76],[23,79,13,80],[23,89,13,89,"o"],[23,90,13,90],[23,92,13,92,"v"],[23,93,13,93],[23,95,13,95],[24,4,14,4,"Object"],[24,10,14,10],[24,11,14,11,"defineProperty"],[24,25,14,25],[24,26,14,26,"o"],[24,27,14,27],[24,29,14,29],[24,38,14,38],[24,40,14,40],[25,6,14,42,"enumerable"],[25,16,14,52],[25,18,14,54],[25,22,14,58],[26,6,14,60,"value"],[26,11,14,65],[26,13,14,67,"v"],[27,4,14,69],[27,5,14,70],[27,6,14,71],[28,2,15,0],[28,3,15,1],[28,6,15,5],[28,16,15,14,"o"],[28,17,15,15],[28,19,15,17,"v"],[28,20,15,18],[28,22,15,20],[29,4,16,4,"o"],[29,5,16,5],[29,6,16,6],[29,15,16,15],[29,16,16,16],[29,19,16,19,"v"],[29,20,16,20],[30,2,17,0],[30,3,17,1],[30,4,17,2],[31,2,18,0],[31,6,18,4,"__importStar"],[31,18,18,16],[31,21,18,20],[31,25,18,24],[31,29,18,28],[31,33,18,32],[31,34,18,33,"__importStar"],[31,46,18,45],[31,50,18,51],[31,62,18,63],[32,4,19,4],[32,8,19,8,"ownKeys"],[32,15,19,15],[32,18,19,18],[32,27,19,18,"ownKeys"],[32,28,19,27,"o"],[32,29,19,28],[32,31,19,30],[33,6,20,8,"ownKeys"],[33,13,20,15],[33,16,20,18,"Object"],[33,22,20,24],[33,23,20,25,"getOwnPropertyNames"],[33,42,20,44],[33,46,20,48],[33,56,20,58,"o"],[33,57,20,59],[33,59,20,61],[34,8,21,12],[34,12,21,16,"ar"],[34,14,21,18],[34,17,21,21],[34,19,21,23],[35,8,22,12],[35,13,22,17],[35,17,22,21,"k"],[35,18,22,22],[35,22,22,26,"o"],[35,23,22,27],[35,25,22,29],[35,29,22,33,"Object"],[35,35,22,39],[35,36,22,40,"prototype"],[35,45,22,49],[35,46,22,50,"hasOwnProperty"],[35,60,22,64],[35,61,22,65,"call"],[35,65,22,69],[35,66,22,70,"o"],[35,67,22,71],[35,69,22,73,"k"],[35,70,22,74],[35,71,22,75],[35,73,22,77,"ar"],[35,75,22,79],[35,76,22,80,"ar"],[35,78,22,82],[35,79,22,83,"length"],[35,85,22,89],[35,86,22,90],[35,89,22,93,"k"],[35,90,22,94],[36,8,23,12],[36,15,23,19,"ar"],[36,17,23,21],[37,6,24,8],[37,7,24,9],[38,6,25,8],[38,13,25,15,"ownKeys"],[38,20,25,22],[38,21,25,23,"o"],[38,22,25,24],[38,23,25,25],[39,4,26,4],[39,5,26,5],[40,4,27,4],[40,11,27,11],[40,21,27,21,"mod"],[40,24,27,24],[40,26,27,26],[41,6,28,8],[41,10,28,12,"mod"],[41,13,28,15],[41,17,28,19,"mod"],[41,20,28,22],[41,21,28,23,"__esModule"],[41,31,28,33],[41,33,28,35],[41,40,28,42,"mod"],[41,43,28,45],[42,6,29,8],[42,10,29,12,"result"],[42,16,29,18],[42,19,29,21],[42,20,29,22],[42,21,29,23],[43,6,30,8],[43,10,30,12,"mod"],[43,13,30,15],[43,17,30,19],[43,21,30,23],[43,23,30,25],[43,28,30,30],[43,32,30,34,"k"],[43,33,30,35],[43,36,30,38,"ownKeys"],[43,43,30,45],[43,44,30,46,"mod"],[43,47,30,49],[43,48,30,50],[43,50,30,52,"i"],[43,51,30,53],[43,54,30,56],[43,55,30,57],[43,57,30,59,"i"],[43,58,30,60],[43,61,30,63,"k"],[43,62,30,64],[43,63,30,65,"length"],[43,69,30,71],[43,71,30,73,"i"],[43,72,30,74],[43,74,30,76],[43,76,30,78],[43,80,30,82,"k"],[43,81,30,83],[43,82,30,84,"i"],[43,83,30,85],[43,84,30,86],[43,89,30,91],[43,98,30,100],[43,100,30,102,"__createBinding"],[43,115,30,117],[43,116,30,118,"result"],[43,122,30,124],[43,124,30,126,"mod"],[43,127,30,129],[43,129,30,131,"k"],[43,130,30,132],[43,131,30,133,"i"],[43,132,30,134],[43,133,30,135],[43,134,30,136],[44,6,31,8,"__setModuleDefault"],[44,24,31,26],[44,25,31,27,"result"],[44,31,31,33],[44,33,31,35,"mod"],[44,36,31,38],[44,37,31,39],[45,6,32,8],[45,13,32,15,"result"],[45,19,32,21],[46,4,33,4],[46,5,33,5],[47,2,34,0],[47,3,34,1],[47,4,34,3],[47,5,34,4],[48,2,35,0],[48,6,35,4,"__importDefault"],[48,21,35,19],[48,24,35,23],[48,28,35,27],[48,32,35,31],[48,36,35,35],[48,37,35,36,"__importDefault"],[48,52,35,51],[48,56,35,56],[48,66,35,66,"mod"],[48,69,35,69],[48,71,35,71],[49,4,36,4],[49,11,36,12,"mod"],[49,14,36,15],[49,18,36,19,"mod"],[49,21,36,22],[49,22,36,23,"__esModule"],[49,32,36,33],[49,35,36,37,"mod"],[49,38,36,40],[49,41,36,43],[50,6,36,45],[50,15,36,54],[50,17,36,56,"mod"],[51,4,36,60],[51,5,36,61],[52,2,37,0],[52,3,37,1],[53,2,38,0,"Object"],[53,8,38,6],[53,9,38,7,"defineProperty"],[53,23,38,21],[53,24,38,22,"exports"],[53,31,38,29],[53,33,38,31],[53,45,38,43],[53,47,38,45],[54,4,38,47,"value"],[54,9,38,52],[54,11,38,54],[55,2,38,59],[55,3,38,60],[55,4,38,61],[56,2,39,0],[56,6,39,6,"websocket_factory_1"],[56,25,39,25],[56,28,39,28,"__importDefault"],[56,43,39,43],[56,44,39,44,"require"],[56,51,39,51],[56,52,39,51,"_dependencyMap"],[56,66,39,51],[56,69,39,77],[56,70,39,78],[56,71,39,79],[57,2,40,0],[57,6,40,6,"constants_1"],[57,17,40,17],[57,20,40,20,"require"],[57,27,40,27],[57,28,40,27,"_dependencyMap"],[57,42,40,27],[57,45,40,45],[57,46,40,46],[58,2,41,0],[58,6,41,6,"serializer_1"],[58,18,41,18],[58,21,41,21,"__importDefault"],[58,36,41,36],[58,37,41,37,"require"],[58,44,41,44],[58,45,41,44,"_dependencyMap"],[58,59,41,44],[58,62,41,63],[58,63,41,64],[58,64,41,65],[59,2,42,0],[59,6,42,6,"timer_1"],[59,13,42,13],[59,16,42,16,"__importDefault"],[59,31,42,31],[59,32,42,32,"require"],[59,39,42,39],[59,40,42,39,"_dependencyMap"],[59,54,42,39],[59,57,42,53],[59,58,42,54],[59,59,42,55],[60,2,43,0],[60,6,43,6,"transformers_1"],[60,20,43,20],[60,23,43,23,"require"],[60,30,43,30],[60,31,43,30,"_dependencyMap"],[60,45,43,30],[60,48,43,51],[60,49,43,52],[61,2,44,0],[61,6,44,6,"RealtimeChannel_1"],[61,23,44,23],[61,26,44,26,"__importDefault"],[61,41,44,41],[61,42,44,42,"require"],[61,49,44,49],[61,50,44,49,"_dependencyMap"],[61,64,44,49],[61,67,44,69],[61,68,44,70],[61,69,44,71],[62,2,45,0],[62,6,45,6,"noop"],[62,10,45,10],[62,13,45,13,"noop"],[62,14,45,13],[62,19,45,19],[62,20,45,21],[62,21,45,22],[63,2,46,0],[64,2,47,0],[64,6,47,6,"CONNECTION_TIMEOUTS"],[64,25,47,25],[64,28,47,28],[65,4,48,4,"HEARTBEAT_INTERVAL"],[65,22,48,22],[65,24,48,24],[65,29,48,29],[66,4,49,4,"RECONNECT_DELAY"],[66,19,49,19],[66,21,49,21],[66,23,49,23],[67,4,50,4,"HEARTBEAT_TIMEOUT_FALLBACK"],[67,30,50,30],[67,32,50,32],[68,2,51,0],[68,3,51,1],[69,2,52,0],[69,6,52,6,"RECONNECT_INTERVALS"],[69,25,52,25],[69,28,52,28],[69,29,52,29],[69,33,52,33],[69,35,52,35],[69,39,52,39],[69,41,52,41],[69,45,52,45],[69,47,52,47],[69,52,52,52],[69,53,52,53],[70,2,53,0],[70,6,53,6,"DEFAULT_RECONNECT_FALLBACK"],[70,32,53,32],[70,35,53,35],[70,40,53,40],[71,2,54,0],[71,6,54,6,"WORKER_SCRIPT"],[71,19,54,19],[71,22,54,22],[72,0,55,0],[73,0,56,0],[74,0,57,0],[75,0,58,0],[76,0,59,0],[76,6,59,6],[77,2,59,7],[77,6,60,6,"RealtimeClient"],[77,20,60,20],[78,4,61,4],[79,0,62,0],[80,0,63,0],[81,0,64,0],[82,0,65,0],[83,0,66,0],[84,0,67,0],[85,0,68,0],[86,0,69,0],[87,0,70,0],[88,0,71,0],[89,0,72,0],[90,0,73,0],[91,0,74,0],[92,0,75,0],[93,0,76,0],[94,0,77,0],[95,0,78,0],[96,4,79,4],[96,13,79,4,"RealtimeClient"],[96,28,79,16,"endPoint"],[96,36,79,24],[96,38,79,26,"options"],[96,45,79,33],[96,47,79,35],[97,6,79,35,"_classCallCheck"],[97,21,79,35],[97,28,79,35,"RealtimeClient"],[97,42,79,35],[98,6,80,8],[98,10,80,12,"_a"],[98,12,80,14],[99,6,81,8],[99,10,81,12],[99,11,81,13,"accessTokenValue"],[99,27,81,29],[99,30,81,32],[99,34,81,36],[100,6,82,8],[100,10,82,12],[100,11,82,13,"apiKey"],[100,17,82,19],[100,20,82,22],[100,24,82,26],[101,6,83,8],[101,10,83,12],[101,11,83,13,"channels"],[101,19,83,21],[101,22,83,24],[101,26,83,28,"Array"],[101,31,83,33],[101,32,83,34],[101,33,83,35],[102,6,84,8],[102,10,84,12],[102,11,84,13,"endPoint"],[102,19,84,21],[102,22,84,24],[102,24,84,26],[103,6,85,8],[103,10,85,12],[103,11,85,13,"httpEndpoint"],[103,23,85,25],[103,26,85,28],[103,28,85,30],[104,6,86,8],[105,6,87,8],[105,10,87,12],[105,11,87,13,"headers"],[105,18,87,20],[105,21,87,23],[105,22,87,24],[105,23,87,25],[106,6,88,8],[106,10,88,12],[106,11,88,13,"params"],[106,17,88,19],[106,20,88,22],[106,21,88,23],[106,22,88,24],[107,6,89,8],[107,10,89,12],[107,11,89,13,"timeout"],[107,18,89,20],[107,21,89,23,"constants_1"],[107,32,89,34],[107,33,89,35,"DEFAULT_TIMEOUT"],[107,48,89,50],[108,6,90,8],[108,10,90,12],[108,11,90,13,"transport"],[108,20,90,22],[108,23,90,25],[108,27,90,29],[109,6,91,8],[109,10,91,12],[109,11,91,13,"heartbeatIntervalMs"],[109,30,91,32],[109,33,91,35,"CONNECTION_TIMEOUTS"],[109,52,91,54],[109,53,91,55,"HEARTBEAT_INTERVAL"],[109,71,91,73],[110,6,92,8],[110,10,92,12],[110,11,92,13,"heartbeatTimer"],[110,25,92,27],[110,28,92,30,"undefined"],[110,37,92,39],[111,6,93,8],[111,10,93,12],[111,11,93,13,"pendingHeartbeatRef"],[111,30,93,32],[111,33,93,35],[111,37,93,39],[112,6,94,8],[112,10,94,12],[112,11,94,13,"heartbeatCallback"],[112,28,94,30],[112,31,94,33,"noop"],[112,35,94,37],[113,6,95,8],[113,10,95,12],[113,11,95,13,"ref"],[113,14,95,16],[113,17,95,19],[113,18,95,20],[114,6,96,8],[114,10,96,12],[114,11,96,13,"reconnectTimer"],[114,25,96,27],[114,28,96,30],[114,32,96,34],[115,6,97,8],[115,10,97,12],[115,11,97,13,"logger"],[115,17,97,19],[115,20,97,22,"noop"],[115,24,97,26],[116,6,98,8],[116,10,98,12],[116,11,98,13,"conn"],[116,15,98,17],[116,18,98,20],[116,22,98,24],[117,6,99,8],[117,10,99,12],[117,11,99,13,"sendBuffer"],[117,21,99,23],[117,24,99,26],[117,26,99,28],[118,6,100,8],[118,10,100,12],[118,11,100,13,"serializer"],[118,21,100,23],[118,24,100,26],[118,28,100,30,"serializer_1"],[118,40,100,42],[118,41,100,43,"default"],[118,48,100,50],[118,49,100,51],[118,50,100,52],[119,6,101,8],[119,10,101,12],[119,11,101,13,"stateChangeCallbacks"],[119,31,101,33],[119,34,101,36],[120,8,102,12,"open"],[120,12,102,16],[120,14,102,18],[120,16,102,20],[121,8,103,12,"close"],[121,13,103,17],[121,15,103,19],[121,17,103,21],[122,8,104,12,"error"],[122,13,104,17],[122,15,104,19],[122,17,104,21],[123,8,105,12,"message"],[123,15,105,19],[123,17,105,21],[124,6,106,8],[124,7,106,9],[125,6,107,8],[125,10,107,12],[125,11,107,13,"accessToken"],[125,22,107,24],[125,25,107,27],[125,29,107,31],[126,6,108,8],[126,10,108,12],[126,11,108,13,"_connectionState"],[126,27,108,29],[126,30,108,32],[126,44,108,46],[127,6,109,8],[127,10,109,12],[127,11,109,13,"_wasManualDisconnect"],[127,31,109,33],[127,34,109,36],[127,39,109,41],[128,6,110,8],[128,10,110,12],[128,11,110,13,"_authPromise"],[128,23,110,25],[128,26,110,28],[128,30,110,32],[129,6,111,8],[130,0,112,0],[131,0,113,0],[132,0,114,0],[133,0,115,0],[134,6,116,8],[134,10,116,12],[134,11,116,13,"_resolveFetch"],[134,24,116,26],[134,27,116,30,"customFetch"],[134,38,116,41],[134,42,116,46],[135,8,117,12],[135,12,117,16,"_fetch"],[135,18,117,22],[136,8,118,12],[136,12,118,16,"customFetch"],[136,23,118,27],[136,25,118,29],[137,10,119,16,"_fetch"],[137,16,119,22],[137,19,119,25,"customFetch"],[137,30,119,36],[138,8,120,12],[138,9,120,13],[138,15,121,17],[138,19,121,21],[138,26,121,28,"fetch"],[138,31,121,33],[138,36,121,38],[138,47,121,49],[138,49,121,51],[139,10,122,16],[140,10,123,16,"_fetch"],[140,16,123,22],[140,19,123,25],[140,28,123,25,"_fetch"],[140,29,123,25],[141,12,123,25],[141,21,123,25,"_len"],[141,25,123,25],[141,28,123,25,"arguments"],[141,37,123,25],[141,38,123,25,"length"],[141,44,123,25],[141,46,123,29,"args"],[141,50,123,33],[141,57,123,33,"Array"],[141,62,123,33],[141,63,123,33,"_len"],[141,67,123,33],[141,70,123,33,"_key"],[141,74,123,33],[141,80,123,33,"_key"],[141,84,123,33],[141,87,123,33,"_len"],[141,91,123,33],[141,93,123,33,"_key"],[141,97,123,33],[142,14,123,29,"args"],[142,18,123,33],[142,19,123,33,"_key"],[142,23,123,33],[142,27,123,33,"arguments"],[142,36,123,33],[142,37,123,33,"_key"],[142,41,123,33],[143,12,123,33],[144,12,123,33],[144,19,123,38,"Promise"],[144,26,123,45],[144,27,123,46,"resolve"],[144,34,123,53],[144,35,123,54],[144,38,123,57],[144,60,123,79],[144,62,123,81],[144,63,123,82],[144,64,123,83,"then"],[144,68,123,87],[144,69,123,88,"s"],[144,70,123,89],[144,74,123,93,"__importStar"],[144,86,123,105],[144,97,123,105,"line"],[144,101,123,105],[145,14,123,105],[145,24,123,105,"Error"],[145,29,123,105],[145,67,123,105,"line"],[145,71,123,105],[146,12,123,105],[146,18,123,116],[146,19,123,117],[146,20,123,118],[146,21,123,119,"then"],[146,25,123,123],[146,26,123,124,"_ref"],[146,30,123,124],[147,14,123,124],[147,18,123,136,"fetch"],[147,23,123,141],[147,26,123,141,"_ref"],[147,30,123,141],[147,31,123,127,"default"],[147,38,123,134],[148,14,123,134],[148,21,123,148,"fetch"],[148,26,123,153],[148,27,123,154],[148,30,123,157,"args"],[148,34,123,161],[148,35,123,162],[149,12,123,162],[149,14,123,163],[149,15,124,21,"catch"],[149,20,124,26],[149,21,124,28,"error"],[149,26,124,33],[149,30,124,38],[150,14,125,20],[150,20,125,26],[150,24,125,30,"Error"],[150,29,125,35],[150,30,125,36],[150,70,125,76,"error"],[150,75,125,81],[150,76,125,82,"message"],[150,83,125,89],[150,87,125,93],[150,90,126,24],[150,172,126,106],[150,173,126,107],[151,12,127,16],[151,13,127,17],[151,14,127,18],[152,10,127,18],[153,8,128,12],[153,9,128,13],[153,15,129,17],[154,10,130,16,"_fetch"],[154,16,130,22],[154,19,130,25,"fetch"],[154,24,130,30],[155,8,131,12],[156,8,132,12],[156,15,132,19],[157,10,132,19],[157,17,132,32,"_fetch"],[157,23,132,38],[157,24,132,39],[157,27,132,39,"arguments"],[157,36,132,46],[157,37,132,47],[158,8,132,47],[159,6,133,8],[159,7,133,9],[160,6,134,8],[161,6,135,8],[161,10,135,12],[161,12,135,14],[161,13,135,15,"_a"],[161,15,135,17],[161,18,135,20,"options"],[161,25,135,27],[161,30,135,32],[161,34,135,36],[161,38,135,40,"options"],[161,45,135,47],[161,50,135,47,"undefined"],[161,59,135,58],[161,62,135,58,"undefined"],[161,71,135,58],[161,74,135,70,"options"],[161,81,135,77],[161,82,135,78,"params"],[161,88,135,84],[161,94,135,90],[161,98,135,94],[161,102,135,98,"_a"],[161,104,135,100],[161,109,135,100,"undefined"],[161,118,135,111],[161,121,135,111,"undefined"],[161,130,135,111],[161,133,135,123,"_a"],[161,135,135,125],[161,136,135,126,"apikey"],[161,142,135,132],[161,143,135,133],[161,145,135,135],[162,8,136,12],[162,14,136,18],[162,18,136,22,"Error"],[162,23,136,27],[162,24,136,28],[162,68,136,72],[162,69,136,73],[163,6,137,8],[164,6,138,8],[164,10,138,12],[164,11,138,13,"apiKey"],[164,17,138,19],[164,20,138,22,"options"],[164,27,138,29],[164,28,138,30,"params"],[164,34,138,36],[164,35,138,37,"apikey"],[164,41,138,43],[165,6,139,8],[166,6,140,8],[166,10,140,12],[166,11,140,13,"endPoint"],[166,19,140,21],[166,22,140,24],[166,25,140,27,"endPoint"],[166,33,140,35],[166,37,140,39,"constants_1"],[166,48,140,50],[166,49,140,51,"TRANSPORTS"],[166,59,140,61],[166,60,140,62,"websocket"],[166,69,140,71],[166,71,140,73],[167,6,141,8],[167,10,141,12],[167,11,141,13,"httpEndpoint"],[167,23,141,25],[167,26,141,28],[167,27,141,29],[167,28,141,30],[167,30,141,32,"transformers_1"],[167,44,141,46],[167,45,141,47,"httpEndpointURL"],[167,60,141,62],[167,62,141,64,"endPoint"],[167,70,141,72],[167,71,141,73],[168,6,142,8],[168,10,142,12],[168,11,142,13,"_initializeOptions"],[168,29,142,31],[168,30,142,32,"options"],[168,37,142,39],[168,38,142,40],[169,6,143,8],[169,10,143,12],[169,11,143,13,"_setupReconnectionTimer"],[169,34,143,36],[169,35,143,37],[169,36,143,38],[170,6,144,8],[170,10,144,12],[170,11,144,13,"fetch"],[170,16,144,18],[170,19,144,21],[170,23,144,25],[170,24,144,26,"_resolveFetch"],[170,37,144,39],[170,38,144,40,"options"],[170,45,144,47],[170,50,144,52],[170,54,144,56],[170,58,144,60,"options"],[170,65,144,67],[170,70,144,67,"undefined"],[170,79,144,78],[170,82,144,78,"undefined"],[170,91,144,78],[170,94,144,90,"options"],[170,101,144,97],[170,102,144,98,"fetch"],[170,107,144,103],[170,108,144,104],[171,4,145,4],[172,4,146,4],[173,0,147,0],[174,0,148,0],[175,4,146,4],[175,11,146,4,"_createClass"],[175,23,146,4],[175,24,146,4,"RealtimeClient"],[175,38,146,4],[176,6,146,4,"key"],[176,9,146,4],[177,6,146,4,"value"],[177,11,146,4],[177,13,149,4],[177,22,149,4,"connect"],[177,29,149,11,"connect"],[177,30,149,11],[177,32,149,14],[178,8,150,8],[179,8,151,8],[179,12,151,12],[179,16,151,16],[179,17,151,17,"isConnecting"],[179,29,151,29],[179,30,151,30],[179,31,151,31],[179,35,152,12],[179,39,152,16],[179,40,152,17,"isDisconnecting"],[179,55,152,32],[179,56,152,33],[179,57,152,34],[179,61,153,13],[179,65,153,17],[179,66,153,18,"conn"],[179,70,153,22],[179,75,153,27],[179,79,153,31],[179,83,153,35],[179,87,153,39],[179,88,153,40,"isConnected"],[179,99,153,51],[179,100,153,52],[179,101,153,54],[179,103,153,56],[180,10,154,12],[181,8,155,8],[182,8,156,8],[182,12,156,12],[182,13,156,13,"_setConnectionState"],[182,32,156,32],[182,33,156,33],[182,45,156,45],[182,46,156,46],[183,8,157,8],[183,12,157,12],[183,13,157,13,"_setAuthSafely"],[183,27,157,27],[183,28,157,28],[183,37,157,37],[183,38,157,38],[184,8,158,8],[185,8,159,8],[185,12,159,12],[185,16,159,16],[185,17,159,17,"transport"],[185,26,159,26],[185,28,159,28],[186,10,160,12],[187,10,161,12],[187,14,161,16],[187,15,161,17,"conn"],[187,19,161,21],[187,22,161,24],[187,26,161,28],[187,30,161,32],[187,31,161,33,"transport"],[187,40,161,42],[187,41,161,43],[187,45,161,47],[187,46,161,48,"endpointURL"],[187,57,161,59],[187,58,161,60],[187,59,161,61],[187,60,161,62],[188,8,162,8],[188,9,162,9],[188,15,163,13],[189,10,164,12],[190,10,165,12],[190,14,165,16],[191,12,166,16],[191,16,166,20],[191,17,166,21,"conn"],[191,21,166,25],[191,24,166,28,"websocket_factory_1"],[191,43,166,47],[191,44,166,48,"default"],[191,51,166,55],[191,52,166,56,"createWebSocket"],[191,67,166,71],[191,68,166,72],[191,72,166,76],[191,73,166,77,"endpointURL"],[191,84,166,88],[191,85,166,89],[191,86,166,90],[191,87,166,91],[192,10,167,12],[192,11,167,13],[192,12,168,12],[192,19,168,19,"error"],[192,24,168,24],[192,26,168,26],[193,12,169,16],[193,16,169,20],[193,17,169,21,"_setConnectionState"],[193,36,169,40],[193,37,169,41],[193,51,169,55],[193,52,169,56],[194,12,170,16],[194,16,170,22,"errorMessage"],[194,28,170,34],[194,31,170,37,"error"],[194,36,170,42],[194,37,170,43,"message"],[194,44,170,50],[195,12,171,16],[196,12,172,16],[196,16,172,20,"errorMessage"],[196,28,172,32],[196,29,172,33,"includes"],[196,37,172,41],[196,38,172,42],[196,47,172,51],[196,48,172,52],[196,50,172,54],[197,14,173,20],[197,20,173,26],[197,24,173,30,"Error"],[197,29,173,35],[197,30,173,36],[197,33,173,39,"errorMessage"],[197,45,173,51],[197,51,173,57],[197,54,174,24],[197,135,174,105],[197,138,175,24],[197,202,175,88],[197,205,176,24],[197,258,176,77],[197,261,177,24],[197,283,177,46],[197,286,178,24],[197,311,178,49],[197,314,179,24],[197,360,179,70],[197,363,180,24],[197,382,180,43],[197,385,181,24],[197,406,181,45],[197,409,182,24],[197,415,182,30],[197,416,182,31],[198,12,183,16],[199,12,184,16],[199,18,184,22],[199,22,184,26,"Error"],[199,27,184,31],[199,28,184,32],[199,56,184,60,"errorMessage"],[199,68,184,72],[199,70,184,74],[199,71,184,75],[200,10,185,12],[201,8,186,8],[202,8,187,8],[202,12,187,12],[202,13,187,13,"_setupConnectionHandlers"],[202,37,187,37],[202,38,187,38],[202,39,187,39],[203,6,188,4],[204,6,189,4],[205,0,190,0],[206,0,191,0],[207,0,192,0],[208,4,189,4],[209,6,189,4,"key"],[209,9,189,4],[210,6,189,4,"value"],[210,11,189,4],[210,13,193,4],[210,22,193,4,"endpointURL"],[210,33,193,15,"endpointURL"],[210,34,193,15],[210,36,193,18],[211,8,194,8],[211,15,194,15],[211,19,194,19],[211,20,194,20,"_appendParams"],[211,33,194,33],[211,34,194,34],[211,38,194,38],[211,39,194,39,"endPoint"],[211,47,194,47],[211,49,194,49,"Object"],[211,55,194,55],[211,56,194,56,"assign"],[211,62,194,62],[211,63,194,63],[211,64,194,64],[211,65,194,65],[211,67,194,67],[211,71,194,71],[211,72,194,72,"params"],[211,78,194,78],[211,80,194,80],[212,10,194,82,"vsn"],[212,13,194,85],[212,15,194,87,"constants_1"],[212,26,194,98],[212,27,194,99,"VSN"],[213,8,194,103],[213,9,194,104],[213,10,194,105],[213,11,194,106],[214,6,195,4],[215,6,196,4],[216,0,197,0],[217,0,198,0],[218,0,199,0],[219,0,200,0],[220,0,201,0],[221,4,196,4],[222,6,196,4,"key"],[222,9,196,4],[223,6,196,4,"value"],[223,11,196,4],[223,13,202,4],[223,22,202,4,"disconnect"],[223,32,202,14,"disconnect"],[223,33,202,15,"code"],[223,37,202,19],[223,39,202,21,"reason"],[223,45,202,27],[223,47,202,29],[224,8,203,8],[224,12,203,12],[224,16,203,16],[224,17,203,17,"isDisconnecting"],[224,32,203,32],[224,33,203,33],[224,34,203,34],[224,36,203,36],[225,10,204,12],[226,8,205,8],[227,8,206,8],[227,12,206,12],[227,13,206,13,"_setConnectionState"],[227,32,206,32],[227,33,206,33],[227,48,206,48],[227,50,206,50],[227,54,206,54],[227,55,206,55],[228,8,207,8],[228,12,207,12],[228,16,207,16],[228,17,207,17,"conn"],[228,21,207,21],[228,23,207,23],[229,10,208,12],[230,10,209,12],[230,14,209,18,"fallbackTimer"],[230,27,209,31],[230,30,209,34,"setTimeout"],[230,40,209,44],[230,41,209,45],[230,47,209,51],[231,12,210,16],[231,16,210,20],[231,17,210,21,"_setConnectionState"],[231,36,210,40],[231,37,210,41],[231,51,210,55],[231,52,210,56],[232,10,211,12],[232,11,211,13],[232,13,211,15],[232,16,211,18],[232,17,211,19],[233,10,212,12],[233,14,212,16],[233,15,212,17,"conn"],[233,19,212,21],[233,20,212,22,"onclose"],[233,27,212,29],[233,30,212,32],[233,36,212,38],[234,12,213,16,"clearTimeout"],[234,24,213,28],[234,25,213,29,"fallbackTimer"],[234,38,213,42],[234,39,213,43],[235,12,214,16],[235,16,214,20],[235,17,214,21,"_setConnectionState"],[235,36,214,40],[235,37,214,41],[235,51,214,55],[235,52,214,56],[236,10,215,12],[236,11,215,13],[237,10,216,12],[238,10,217,12],[238,14,217,16,"code"],[238,18,217,20],[238,20,217,22],[239,12,218,16],[239,16,218,20],[239,17,218,21,"conn"],[239,21,218,25],[239,22,218,26,"close"],[239,27,218,31],[239,28,218,32,"code"],[239,32,218,36],[239,34,218,38,"reason"],[239,40,218,44],[239,45,218,49],[239,49,218,53],[239,53,218,57,"reason"],[239,59,218,63],[239,64,218,63,"undefined"],[239,73,218,74],[239,76,218,77,"reason"],[239,82,218,83],[239,85,218,86],[239,87,218,88],[239,88,218,89],[240,10,219,12],[240,11,219,13],[240,17,220,17],[241,12,221,16],[241,16,221,20],[241,17,221,21,"conn"],[241,21,221,25],[241,22,221,26,"close"],[241,27,221,31],[241,28,221,32],[241,29,221,33],[242,10,222,12],[243,10,223,12],[243,14,223,16],[243,15,223,17,"_teardownConnection"],[243,34,223,36],[243,35,223,37],[243,36,223,38],[244,8,224,8],[244,9,224,9],[244,15,225,13],[245,10,226,12],[245,14,226,16],[245,15,226,17,"_setConnectionState"],[245,34,226,36],[245,35,226,37],[245,49,226,51],[245,50,226,52],[246,8,227,8],[247,6,228,4],[248,6,229,4],[249,0,230,0],[250,0,231,0],[251,4,229,4],[252,6,229,4,"key"],[252,9,229,4],[253,6,229,4,"value"],[253,11,229,4],[253,13,232,4],[253,22,232,4,"getChannels"],[253,33,232,15,"getChannels"],[253,34,232,15],[253,36,232,18],[254,8,233,8],[254,15,233,15],[254,19,233,19],[254,20,233,20,"channels"],[254,28,233,28],[255,6,234,4],[256,6,235,4],[257,0,236,0],[258,0,237,0],[259,0,238,0],[260,4,235,4],[261,6,235,4,"key"],[261,9,235,4],[262,6,235,4,"value"],[262,11,235,4],[263,8,235,4],[263,12,235,4,"_removeChannel"],[263,26,235,4],[263,29,235,4,"_asyncToGenerator"],[263,46,235,4],[263,47,239,4],[263,58,239,24,"channel"],[263,65,239,31],[263,67,239,33],[264,10,240,8],[264,14,240,14,"status"],[264,20,240,20],[264,29,240,29,"channel"],[264,36,240,36],[264,37,240,37,"unsubscribe"],[264,48,240,48],[264,49,240,49],[264,50,240,50],[265,10,241,8],[265,14,241,12],[265,18,241,16],[265,19,241,17,"channels"],[265,27,241,25],[265,28,241,26,"length"],[265,34,241,32],[265,39,241,37],[265,40,241,38],[265,42,241,40],[266,12,242,12],[266,16,242,16],[266,17,242,17,"disconnect"],[266,27,242,27],[266,28,242,28],[266,29,242,29],[267,10,243,8],[268,10,244,8],[268,17,244,15,"status"],[268,23,244,21],[269,8,245,4],[269,9,245,5],[270,8,245,5],[270,17,239,10,"removeChannel"],[270,30,239,23,"removeChannel"],[270,31,239,23,"_x"],[270,33,239,23],[271,10,239,23],[271,17,239,23,"_removeChannel"],[271,31,239,23],[271,32,239,23,"apply"],[271,37,239,23],[271,44,239,23,"arguments"],[271,53,239,23],[272,8,239,23],[273,8,239,23],[273,15,239,10,"removeChannel"],[273,28,239,23],[274,6,239,23],[275,6,246,4],[276,0,247,0],[277,0,248,0],[278,6,246,4],[279,4,246,4],[280,6,246,4,"key"],[280,9,246,4],[281,6,246,4,"value"],[281,11,246,4],[282,8,246,4],[282,12,246,4,"_removeAllChannels"],[282,30,246,4],[282,33,246,4,"_asyncToGenerator"],[282,50,246,4],[282,51,249,4],[282,64,249,30],[283,10,250,8],[283,14,250,14,"values_1"],[283,22,250,22],[283,31,250,31,"Promise"],[283,38,250,38],[283,39,250,39,"all"],[283,42,250,42],[283,43,250,43],[283,47,250,47],[283,48,250,48,"channels"],[283,56,250,56],[283,57,250,57,"map"],[283,60,250,60],[283,61,250,62,"channel"],[283,68,250,69],[283,72,250,74,"channel"],[283,79,250,81],[283,80,250,82,"unsubscribe"],[283,91,250,93],[283,92,250,94],[283,93,250,95],[283,94,250,96],[283,95,250,97],[284,10,251,8],[284,14,251,12],[284,15,251,13,"channels"],[284,23,251,21],[284,26,251,24],[284,28,251,26],[285,10,252,8],[285,14,252,12],[285,15,252,13,"disconnect"],[285,25,252,23],[285,26,252,24],[285,27,252,25],[286,10,253,8],[286,17,253,15,"values_1"],[286,25,253,23],[287,8,254,4],[287,9,254,5],[288,8,254,5],[288,17,249,10,"removeAllChannels"],[288,34,249,27,"removeAllChannels"],[288,35,249,27],[289,10,249,27],[289,17,249,27,"_removeAllChannels"],[289,35,249,27],[289,36,249,27,"apply"],[289,41,249,27],[289,48,249,27,"arguments"],[289,57,249,27],[290,8,249,27],[291,8,249,27],[291,15,249,10,"removeAllChannels"],[291,32,249,27],[292,6,249,27],[293,6,255,4],[294,0,256,0],[295,0,257,0],[296,0,258,0],[297,0,259,0],[298,6,255,4],[299,4,255,4],[300,6,255,4,"key"],[300,9,255,4],[301,6,255,4,"value"],[301,11,255,4],[301,13,260,4],[301,22,260,4,"log"],[301,25,260,7,"log"],[301,26,260,8,"kind"],[301,30,260,12],[301,32,260,14,"msg"],[301,35,260,17],[301,37,260,19,"data"],[301,41,260,23],[301,43,260,25],[302,8,261,8],[302,12,261,12],[302,13,261,13,"logger"],[302,19,261,19],[302,20,261,20,"kind"],[302,24,261,24],[302,26,261,26,"msg"],[302,29,261,29],[302,31,261,31,"data"],[302,35,261,35],[302,36,261,36],[303,6,262,4],[304,6,263,4],[305,0,264,0],[306,0,265,0],[307,4,263,4],[308,6,263,4,"key"],[308,9,263,4],[309,6,263,4,"value"],[309,11,263,4],[309,13,266,4],[309,22,266,4,"connectionState"],[309,37,266,19,"connectionState"],[309,38,266,19],[309,40,266,22],[310,8,267,8],[310,16,267,16],[310,20,267,20],[310,21,267,21,"conn"],[310,25,267,25],[310,29,267,29],[310,33,267,33],[310,34,267,34,"conn"],[310,38,267,38],[310,39,267,39,"readyState"],[310,49,267,49],[311,10,268,12],[311,15,268,17,"constants_1"],[311,26,268,28],[311,27,268,29,"SOCKET_STATES"],[311,40,268,42],[311,41,268,43,"connecting"],[311,51,268,53],[312,12,269,16],[312,19,269,23,"constants_1"],[312,30,269,34],[312,31,269,35,"CONNECTION_STATE"],[312,47,269,51],[312,48,269,52,"Connecting"],[312,58,269,62],[313,10,270,12],[313,15,270,17,"constants_1"],[313,26,270,28],[313,27,270,29,"SOCKET_STATES"],[313,40,270,42],[313,41,270,43,"open"],[313,45,270,47],[314,12,271,16],[314,19,271,23,"constants_1"],[314,30,271,34],[314,31,271,35,"CONNECTION_STATE"],[314,47,271,51],[314,48,271,52,"Open"],[314,52,271,56],[315,10,272,12],[315,15,272,17,"constants_1"],[315,26,272,28],[315,27,272,29,"SOCKET_STATES"],[315,40,272,42],[315,41,272,43,"closing"],[315,48,272,50],[316,12,273,16],[316,19,273,23,"constants_1"],[316,30,273,34],[316,31,273,35,"CONNECTION_STATE"],[316,47,273,51],[316,48,273,52,"Closing"],[316,55,273,59],[317,10,274,12],[318,12,275,16],[318,19,275,23,"constants_1"],[318,30,275,34],[318,31,275,35,"CONNECTION_STATE"],[318,47,275,51],[318,48,275,52,"Closed"],[318,54,275,58],[319,8,276,8],[320,6,277,4],[321,6,278,4],[322,0,279,0],[323,0,280,0],[324,4,278,4],[325,6,278,4,"key"],[325,9,278,4],[326,6,278,4,"value"],[326,11,278,4],[326,13,281,4],[326,22,281,4,"isConnected"],[326,33,281,15,"isConnected"],[326,34,281,15],[326,36,281,18],[327,8,282,8],[327,15,282,15],[327,19,282,19],[327,20,282,20,"connectionState"],[327,35,282,35],[327,36,282,36],[327,37,282,37],[327,42,282,42,"constants_1"],[327,53,282,53],[327,54,282,54,"CONNECTION_STATE"],[327,70,282,70],[327,71,282,71,"Open"],[327,75,282,75],[328,6,283,4],[329,6,284,4],[330,0,285,0],[331,0,286,0],[332,4,284,4],[333,6,284,4,"key"],[333,9,284,4],[334,6,284,4,"value"],[334,11,284,4],[334,13,287,4],[334,22,287,4,"isConnecting"],[334,34,287,16,"isConnecting"],[334,35,287,16],[334,37,287,19],[335,8,288,8],[335,15,288,15],[335,19,288,19],[335,20,288,20,"_connectionState"],[335,36,288,36],[335,41,288,41],[335,53,288,53],[336,6,289,4],[337,6,290,4],[338,0,291,0],[339,0,292,0],[340,4,290,4],[341,6,290,4,"key"],[341,9,290,4],[342,6,290,4,"value"],[342,11,290,4],[342,13,293,4],[342,22,293,4,"isDisconnecting"],[342,37,293,19,"isDisconnecting"],[342,38,293,19],[342,40,293,22],[343,8,294,8],[343,15,294,15],[343,19,294,19],[343,20,294,20,"_connectionState"],[343,36,294,36],[343,41,294,41],[343,56,294,56],[344,6,295,4],[345,4,295,5],[346,6,295,5,"key"],[346,9,295,5],[347,6,295,5,"value"],[347,11,295,5],[347,13,296,4],[347,22,296,4,"channel"],[347,29,296,11,"channel"],[347,30,296,12,"topic"],[347,35,296,17],[347,37,296,44],[348,8,296,44],[348,12,296,19,"params"],[348,18,296,25],[348,21,296,25,"arguments"],[348,30,296,25],[348,31,296,25,"length"],[348,37,296,25],[348,45,296,25,"arguments"],[348,54,296,25],[348,62,296,25,"undefined"],[348,71,296,25],[348,74,296,25,"arguments"],[348,83,296,25],[348,89,296,28],[349,10,296,30,"config"],[349,16,296,36],[349,18,296,38],[349,19,296,39],[350,8,296,41],[350,9,296,42],[351,8,297,8],[351,12,297,14,"realtimeTopic"],[351,25,297,27],[351,28,297,30],[351,40,297,42,"topic"],[351,45,297,47],[351,47,297,49],[352,8,298,8],[352,12,298,14,"exists"],[352,18,298,20],[352,21,298,23],[352,25,298,27],[352,26,298,28,"getChannels"],[352,37,298,39],[352,38,298,40],[352,39,298,41],[352,40,298,42,"find"],[352,44,298,46],[352,45,298,48,"c"],[352,46,298,49],[352,50,298,54,"c"],[352,51,298,55],[352,52,298,56,"topic"],[352,57,298,61],[352,62,298,66,"realtimeTopic"],[352,75,298,79],[352,76,298,80],[353,8,299,8],[353,12,299,12],[353,13,299,13,"exists"],[353,19,299,19],[353,21,299,21],[354,10,300,12],[354,14,300,18,"chan"],[354,18,300,22],[354,21,300,25],[354,25,300,29,"RealtimeChannel_1"],[354,42,300,46],[354,43,300,47,"default"],[354,50,300,54],[354,51,300,55],[354,63,300,67,"topic"],[354,68,300,72],[354,70,300,74],[354,72,300,76,"params"],[354,78,300,82],[354,80,300,84],[354,84,300,88],[354,85,300,89],[355,10,301,12],[355,14,301,16],[355,15,301,17,"channels"],[355,23,301,25],[355,24,301,26,"push"],[355,28,301,30],[355,29,301,31,"chan"],[355,33,301,35],[355,34,301,36],[356,10,302,12],[356,17,302,19,"chan"],[356,21,302,23],[357,8,303,8],[357,9,303,9],[357,15,304,13],[358,10,305,12],[358,17,305,19,"exists"],[358,23,305,25],[359,8,306,8],[360,6,307,4],[361,6,308,4],[362,0,309,0],[363,0,310,0],[364,0,311,0],[365,0,312,0],[366,4,308,4],[367,6,308,4,"key"],[367,9,308,4],[368,6,308,4,"value"],[368,11,308,4],[368,13,313,4],[368,22,313,4,"push"],[368,26,313,8,"push"],[368,27,313,9,"data"],[368,31,313,13],[368,33,313,15],[369,8,314,8],[369,12,314,16,"topic"],[369,17,314,21],[369,20,314,47,"data"],[369,24,314,51],[369,25,314,16,"topic"],[369,30,314,21],[370,10,314,23,"event"],[370,15,314,28],[370,18,314,47,"data"],[370,22,314,51],[370,23,314,23,"event"],[370,28,314,28],[371,10,314,30,"payload"],[371,17,314,37],[371,20,314,47,"data"],[371,24,314,51],[371,25,314,30,"payload"],[371,32,314,37],[372,10,314,39,"ref"],[372,13,314,42],[372,16,314,47,"data"],[372,20,314,51],[372,21,314,39,"ref"],[372,24,314,42],[373,8,315,8],[373,12,315,14,"callback"],[373,20,315,22],[373,23,315,25,"callback"],[373,24,315,25],[373,29,315,31],[374,10,316,12],[374,14,316,16],[374,15,316,17,"encode"],[374,21,316,23],[374,22,316,24,"data"],[374,26,316,28],[374,28,316,31,"result"],[374,34,316,37],[374,38,316,42],[375,12,317,16],[375,16,317,20,"_a"],[375,18,317,22],[376,12,318,16],[376,13,318,17,"_a"],[376,15,318,19],[376,18,318,22],[376,22,318,26],[376,23,318,27,"conn"],[376,27,318,31],[376,33,318,37],[376,37,318,41],[376,41,318,45,"_a"],[376,43,318,47],[376,48,318,47,"undefined"],[376,57,318,58],[376,60,318,58,"undefined"],[376,69,318,58],[376,72,318,70,"_a"],[376,74,318,72],[376,75,318,73,"send"],[376,79,318,77],[376,80,318,78,"result"],[376,86,318,84],[376,87,318,85],[377,10,319,12],[377,11,319,13],[377,12,319,14],[378,8,320,8],[378,9,320,9],[379,8,321,8],[379,12,321,12],[379,13,321,13,"log"],[379,16,321,16],[379,17,321,17],[379,23,321,23],[379,25,321,25],[379,28,321,28,"topic"],[379,33,321,33],[379,37,321,37,"event"],[379,42,321,42],[379,47,321,47,"ref"],[379,50,321,50],[379,53,321,53],[379,55,321,55,"payload"],[379,62,321,62],[379,63,321,63],[380,8,322,8],[380,12,322,12],[380,16,322,16],[380,17,322,17,"isConnected"],[380,28,322,28],[380,29,322,29],[380,30,322,30],[380,32,322,32],[381,10,323,12,"callback"],[381,18,323,20],[381,19,323,21],[381,20,323,22],[382,8,324,8],[382,9,324,9],[382,15,325,13],[383,10,326,12],[383,14,326,16],[383,15,326,17,"sendBuffer"],[383,25,326,27],[383,26,326,28,"push"],[383,30,326,32],[383,31,326,33,"callback"],[383,39,326,41],[383,40,326,42],[384,8,327,8],[385,6,328,4],[386,6,329,4],[387,0,330,0],[388,0,331,0],[389,0,332,0],[390,0,333,0],[391,0,334,0],[392,0,335,0],[393,0,336,0],[394,0,337,0],[395,4,329,4],[396,6,329,4,"key"],[396,9,329,4],[397,6,329,4,"value"],[397,11,329,4],[398,8,329,4],[398,12,329,4,"_setAuth"],[398,20,329,4],[398,23,329,4,"_asyncToGenerator"],[398,40,329,4],[398,41,338,4],[398,54,338,32],[399,10,338,32],[399,14,338,18,"token"],[399,19,338,23],[399,22,338,23,"arguments"],[399,31,338,23],[399,32,338,23,"length"],[399,38,338,23],[399,46,338,23,"arguments"],[399,55,338,23],[399,63,338,23,"undefined"],[399,72,338,23],[399,75,338,23,"arguments"],[399,84,338,23],[399,90,338,26],[399,94,338,30],[400,10,339,8],[400,14,339,12],[400,15,339,13,"_authPromise"],[400,27,339,25],[400,30,339,28],[400,34,339,32],[400,35,339,33,"_performAuth"],[400,47,339,45],[400,48,339,46,"token"],[400,53,339,51],[400,54,339,52],[401,10,340,8],[401,14,340,12],[402,12,341,12],[402,18,341,18],[402,22,341,22],[402,23,341,23,"_authPromise"],[402,35,341,35],[403,10,342,8],[403,11,342,9],[403,20,343,16],[404,12,344,12],[404,16,344,16],[404,17,344,17,"_authPromise"],[404,29,344,29],[404,32,344,32],[404,36,344,36],[405,10,345,8],[406,8,346,4],[406,9,346,5],[407,8,346,5],[407,17,338,10,"setAuth"],[407,24,338,17,"setAuth"],[407,25,338,17],[408,10,338,17],[408,17,338,17,"_setAuth"],[408,25,338,17],[408,26,338,17,"apply"],[408,31,338,17],[408,38,338,17,"arguments"],[408,47,338,17],[409,8,338,17],[410,8,338,17],[410,15,338,10,"setAuth"],[410,22,338,17],[411,6,338,17],[412,6,347,4],[413,0,348,0],[414,0,349,0],[415,6,347,4],[416,4,347,4],[417,6,347,4,"key"],[417,9,347,4],[418,6,347,4,"value"],[418,11,347,4],[419,8,347,4],[419,12,347,4,"_sendHeartbeat"],[419,26,347,4],[419,29,347,4,"_asyncToGenerator"],[419,46,347,4],[419,47,350,4],[419,60,350,26],[420,10,351,8],[420,14,351,12,"_a"],[420,16,351,14],[421,10,352,8],[421,14,352,12],[421,15,352,13],[421,19,352,17],[421,20,352,18,"isConnected"],[421,31,352,29],[421,32,352,30],[421,33,352,31],[421,35,352,33],[422,12,353,12],[422,16,353,16],[422,17,353,17,"heartbeatCallback"],[422,34,353,34],[422,35,353,35],[422,49,353,49],[422,50,353,50],[423,12,354,12],[424,10,355,8],[425,10,356,8],[426,10,357,8],[426,14,357,12],[426,18,357,16],[426,19,357,17,"pendingHeartbeatRef"],[426,38,357,36],[426,40,357,38],[427,12,358,12],[427,16,358,16],[427,17,358,17,"pendingHeartbeatRef"],[427,36,358,36],[427,39,358,39],[427,43,358,43],[428,12,359,12],[428,16,359,16],[428,17,359,17,"log"],[428,20,359,20],[428,21,359,21],[428,32,359,32],[428,34,359,34],[428,92,359,92],[428,93,359,93],[429,12,360,12],[429,16,360,16],[429,17,360,17,"heartbeatCallback"],[429,34,360,34],[429,35,360,35],[429,44,360,44],[429,45,360,45],[430,12,361,12],[431,12,362,12],[431,16,362,16],[431,17,362,17,"_wasManualDisconnect"],[431,37,362,37],[431,40,362,40],[431,45,362,45],[432,12,363,12],[432,13,363,13,"_a"],[432,15,363,15],[432,18,363,18],[432,22,363,22],[432,23,363,23,"conn"],[432,27,363,27],[432,33,363,33],[432,37,363,37],[432,41,363,41,"_a"],[432,43,363,43],[432,48,363,43,"undefined"],[432,57,363,54],[432,60,363,54,"undefined"],[432,69,363,54],[432,72,363,66,"_a"],[432,74,363,68],[432,75,363,69,"close"],[432,80,363,74],[432,81,363,75,"constants_1"],[432,92,363,86],[432,93,363,87,"WS_CLOSE_NORMAL"],[432,108,363,102],[432,110,363,104],[432,129,363,123],[432,130,363,124],[433,12,364,12,"setTimeout"],[433,22,364,22],[433,23,364,23],[433,29,364,29],[434,14,365,16],[434,18,365,20,"_a"],[434,20,365,22],[435,14,366,16],[435,18,366,20],[435,19,366,21],[435,23,366,25],[435,24,366,26,"isConnected"],[435,35,366,37],[435,36,366,38],[435,37,366,39],[435,39,366,41],[436,16,367,20],[436,17,367,21,"_a"],[436,19,367,23],[436,22,367,26],[436,26,367,30],[436,27,367,31,"reconnectTimer"],[436,41,367,45],[436,47,367,51],[436,51,367,55],[436,55,367,59,"_a"],[436,57,367,61],[436,62,367,61,"undefined"],[436,71,367,72],[436,74,367,72,"undefined"],[436,83,367,72],[436,86,367,84,"_a"],[436,88,367,86],[436,89,367,87,"scheduleTimeout"],[436,104,367,102],[436,105,367,103],[436,106,367,104],[437,14,368,16],[438,12,369,12],[438,13,369,13],[438,15,369,15,"CONNECTION_TIMEOUTS"],[438,34,369,34],[438,35,369,35,"HEARTBEAT_TIMEOUT_FALLBACK"],[438,61,369,61],[438,62,369,62],[439,12,370,12],[440,10,371,8],[441,10,372,8],[442,10,373,8],[442,14,373,12],[442,15,373,13,"pendingHeartbeatRef"],[442,34,373,32],[442,37,373,35],[442,41,373,39],[442,42,373,40,"_makeRef"],[442,50,373,48],[442,51,373,49],[442,52,373,50],[443,10,374,8],[443,14,374,12],[443,15,374,13,"push"],[443,19,374,17],[443,20,374,18],[444,12,375,12,"topic"],[444,17,375,17],[444,19,375,19],[444,28,375,28],[445,12,376,12,"event"],[445,17,376,17],[445,19,376,19],[445,30,376,30],[446,12,377,12,"payload"],[446,19,377,19],[446,21,377,21],[446,22,377,22],[446,23,377,23],[447,12,378,12,"ref"],[447,15,378,15],[447,17,378,17],[447,21,378,21],[447,22,378,22,"pendingHeartbeatRef"],[448,10,379,8],[448,11,379,9],[448,12,379,10],[449,10,380,8],[449,14,380,12],[449,15,380,13,"heartbeatCallback"],[449,32,380,30],[449,33,380,31],[449,39,380,37],[449,40,380,38],[450,10,381,8],[450,14,381,12],[450,15,381,13,"_setAuthSafely"],[450,29,381,27],[450,30,381,28],[450,41,381,39],[450,42,381,40],[451,8,382,4],[451,9,382,5],[452,8,382,5],[452,17,350,10,"sendHeartbeat"],[452,30,350,23,"sendHeartbeat"],[452,31,350,23],[453,10,350,23],[453,17,350,23,"_sendHeartbeat"],[453,31,350,23],[453,32,350,23,"apply"],[453,37,350,23],[453,44,350,23,"arguments"],[453,53,350,23],[454,8,350,23],[455,8,350,23],[455,15,350,10,"sendHeartbeat"],[455,28,350,23],[456,6,350,23],[457,4,350,23],[458,6,350,23,"key"],[458,9,350,23],[459,6,350,23,"value"],[459,11,350,23],[459,13,383,4],[459,22,383,4,"onHeartbeat"],[459,33,383,15,"onHeartbeat"],[459,34,383,16,"callback"],[459,42,383,24],[459,44,383,26],[460,8,384,8],[460,12,384,12],[460,13,384,13,"heartbeatCallback"],[460,30,384,30],[460,33,384,33,"callback"],[460,41,384,41],[461,6,385,4],[462,6,386,4],[463,0,387,0],[464,0,388,0],[465,4,386,4],[466,6,386,4,"key"],[466,9,386,4],[467,6,386,4,"value"],[467,11,386,4],[467,13,389,4],[467,22,389,4,"flushSendBuffer"],[467,37,389,19,"flushSendBuffer"],[467,38,389,19],[467,40,389,22],[468,8,390,8],[468,12,390,12],[468,16,390,16],[468,17,390,17,"isConnected"],[468,28,390,28],[468,29,390,29],[468,30,390,30],[468,34,390,34],[468,38,390,38],[468,39,390,39,"sendBuffer"],[468,49,390,49],[468,50,390,50,"length"],[468,56,390,56],[468,59,390,59],[468,60,390,60],[468,62,390,62],[469,10,391,12],[469,14,391,16],[469,15,391,17,"sendBuffer"],[469,25,391,27],[469,26,391,28,"forEach"],[469,33,391,35],[469,34,391,37,"callback"],[469,42,391,45],[469,46,391,50,"callback"],[469,54,391,58],[469,55,391,59],[469,56,391,60],[469,57,391,61],[470,10,392,12],[470,14,392,16],[470,15,392,17,"sendBuffer"],[470,25,392,27],[470,28,392,30],[470,30,392,32],[471,8,393,8],[472,6,394,4],[473,6,395,4],[474,0,396,0],[475,0,397,0],[476,0,398,0],[477,0,399,0],[478,4,395,4],[479,6,395,4,"key"],[479,9,395,4],[480,6,395,4,"value"],[480,11,395,4],[480,13,400,4],[480,22,400,4,"_makeRef"],[480,30,400,12,"_makeRef"],[480,31,400,12],[480,33,400,15],[481,8,401,8],[481,12,401,12,"newRef"],[481,18,401,18],[481,21,401,21],[481,25,401,25],[481,26,401,26,"ref"],[481,29,401,29],[481,32,401,32],[481,33,401,33],[482,8,402,8],[482,12,402,12,"newRef"],[482,18,402,18],[482,23,402,23],[482,27,402,27],[482,28,402,28,"ref"],[482,31,402,31],[482,33,402,33],[483,10,403,12],[483,14,403,16],[483,15,403,17,"ref"],[483,18,403,20],[483,21,403,23],[483,22,403,24],[484,8,404,8],[484,9,404,9],[484,15,405,13],[485,10,406,12],[485,14,406,16],[485,15,406,17,"ref"],[485,18,406,20],[485,21,406,23,"newRef"],[485,27,406,29],[486,8,407,8],[487,8,408,8],[487,15,408,15],[487,19,408,19],[487,20,408,20,"ref"],[487,23,408,23],[487,24,408,24,"toString"],[487,32,408,32],[487,33,408,33],[487,34,408,34],[488,6,409,4],[489,6,410,4],[490,0,411,0],[491,0,412,0],[492,0,413,0],[493,0,414,0],[494,4,410,4],[495,6,410,4,"key"],[495,9,410,4],[496,6,410,4,"value"],[496,11,410,4],[496,13,415,4],[496,22,415,4,"_leaveOpenTopic"],[496,37,415,19,"_leaveOpenTopic"],[496,38,415,20,"topic"],[496,43,415,25],[496,45,415,27],[497,8,416,8],[497,12,416,12,"dupChannel"],[497,22,416,22],[497,25,416,25],[497,29,416,29],[497,30,416,30,"channels"],[497,38,416,38],[497,39,416,39,"find"],[497,43,416,43],[497,44,416,45,"c"],[497,45,416,46],[497,49,416,51,"c"],[497,50,416,52],[497,51,416,53,"topic"],[497,56,416,58],[497,61,416,63,"topic"],[497,66,416,68],[497,71,416,73,"c"],[497,72,416,74],[497,73,416,75,"_isJoined"],[497,82,416,84],[497,83,416,85],[497,84,416,86],[497,88,416,90,"c"],[497,89,416,91],[497,90,416,92,"_isJoining"],[497,100,416,102],[497,101,416,103],[497,102,416,104],[497,103,416,105],[497,104,416,106],[498,8,417,8],[498,12,417,12,"dupChannel"],[498,22,417,22],[498,24,417,24],[499,10,418,12],[499,14,418,16],[499,15,418,17,"log"],[499,18,418,20],[499,19,418,21],[499,30,418,32],[499,32,418,34],[499,60,418,62,"topic"],[499,65,418,67],[499,68,418,70],[499,69,418,71],[500,10,419,12,"dupChannel"],[500,20,419,22],[500,21,419,23,"unsubscribe"],[500,32,419,34],[500,33,419,35],[500,34,419,36],[501,8,420,8],[502,6,421,4],[503,6,422,4],[504,0,423,0],[505,0,424,0],[506,0,425,0],[507,0,426,0],[508,0,427,0],[509,0,428,0],[510,4,422,4],[511,6,422,4,"key"],[511,9,422,4],[512,6,422,4,"value"],[512,11,422,4],[512,13,429,4],[512,22,429,4,"_remove"],[512,29,429,11,"_remove"],[512,30,429,12,"channel"],[512,37,429,19],[512,39,429,21],[513,8,430,8],[513,12,430,12],[513,13,430,13,"channels"],[513,21,430,21],[513,24,430,24],[513,28,430,28],[513,29,430,29,"channels"],[513,37,430,37],[513,38,430,38,"filter"],[513,44,430,44],[513,45,430,46,"c"],[513,46,430,47],[513,50,430,52,"c"],[513,51,430,53],[513,52,430,54,"topic"],[513,57,430,59],[513,62,430,64,"channel"],[513,69,430,71],[513,70,430,72,"topic"],[513,75,430,77],[513,76,430,78],[514,6,431,4],[515,6,432,4],[516,4,432,4],[517,6,432,4,"key"],[517,9,432,4],[518,6,432,4,"value"],[518,11,432,4],[518,13,433,4],[518,22,433,4,"_onConnMessage"],[518,36,433,18,"_onConnMessage"],[518,37,433,19,"rawMessage"],[518,47,433,29],[518,49,433,31],[519,8,434,8],[519,12,434,12],[519,13,434,13,"decode"],[519,19,434,19],[519,20,434,20,"rawMessage"],[519,30,434,30],[519,31,434,31,"data"],[519,35,434,35],[519,37,434,38,"msg"],[519,40,434,41],[519,44,434,46],[520,10,435,12],[521,10,436,12],[521,14,436,16,"msg"],[521,17,436,19],[521,18,436,20,"topic"],[521,23,436,25],[521,28,436,30],[521,37,436,39],[521,41,436,43,"msg"],[521,44,436,46],[521,45,436,47,"event"],[521,50,436,52],[521,55,436,57],[521,66,436,68],[521,68,436,70],[522,12,437,16],[522,16,437,20],[522,17,437,21,"heartbeatCallback"],[522,34,437,38],[522,35,437,39,"msg"],[522,38,437,42],[522,39,437,43,"payload"],[522,46,437,50],[522,47,437,51,"status"],[522,53,437,57],[522,58,437,62],[522,62,437,66],[522,65,437,69],[522,69,437,73],[522,72,437,76],[522,79,437,83],[522,80,437,84],[523,10,438,12],[524,10,439,12],[525,10,440,12],[525,14,440,16,"msg"],[525,17,440,19],[525,18,440,20,"ref"],[525,21,440,23],[525,25,440,27,"msg"],[525,28,440,30],[525,29,440,31,"ref"],[525,32,440,34],[525,37,440,39],[525,41,440,43],[525,42,440,44,"pendingHeartbeatRef"],[525,61,440,63],[525,63,440,65],[526,12,441,16],[526,16,441,20],[526,17,441,21,"pendingHeartbeatRef"],[526,36,441,40],[526,39,441,43],[526,43,441,47],[527,10,442,12],[528,10,443,12],[529,10,444,12],[529,14,444,20,"topic"],[529,19,444,25],[529,22,444,51,"msg"],[529,25,444,54],[529,26,444,20,"topic"],[529,31,444,25],[530,12,444,27,"event"],[530,17,444,32],[530,20,444,51,"msg"],[530,23,444,54],[530,24,444,27,"event"],[530,29,444,32],[531,12,444,34,"payload"],[531,19,444,41],[531,22,444,51,"msg"],[531,25,444,54],[531,26,444,34,"payload"],[531,33,444,41],[532,12,444,43,"ref"],[532,15,444,46],[532,18,444,51,"msg"],[532,21,444,54],[532,22,444,43,"ref"],[532,25,444,46],[533,10,445,12],[533,14,445,18,"refString"],[533,23,445,27],[533,26,445,30,"ref"],[533,29,445,33],[533,32,445,36],[533,36,445,40,"ref"],[533,39,445,43],[533,42,445,46],[533,45,445,49],[533,47,445,51],[534,10,446,12],[534,14,446,18,"status"],[534,20,446,24],[534,23,446,27,"payload"],[534,30,446,34],[534,31,446,35,"status"],[534,37,446,41],[534,41,446,45],[534,43,446,47],[535,10,447,12],[535,14,447,16],[535,15,447,17,"log"],[535,18,447,20],[535,19,447,21],[535,28,447,30],[535,30,447,32],[535,33,447,35,"status"],[535,39,447,41],[535,43,447,45,"topic"],[535,48,447,50],[535,52,447,54,"event"],[535,57,447,59],[535,61,447,63,"refString"],[535,70,447,72],[535,72,447,74],[535,73,447,75,"trim"],[535,77,447,79],[535,78,447,80],[535,79,447,81],[535,81,447,83,"payload"],[535,88,447,90],[535,89,447,91],[536,10,448,12],[537,10,449,12],[537,14,449,16],[537,15,449,17,"channels"],[537,23,449,25],[537,24,450,17,"filter"],[537,30,450,23],[537,31,450,25,"channel"],[537,38,450,32],[537,42,450,37,"channel"],[537,49,450,44],[537,50,450,45,"_isMember"],[537,59,450,54],[537,60,450,55,"topic"],[537,65,450,60],[537,66,450,61],[537,67,450,62],[537,68,451,17,"forEach"],[537,75,451,24],[537,76,451,26,"channel"],[537,83,451,33],[537,87,451,38,"channel"],[537,94,451,45],[537,95,451,46,"_trigger"],[537,103,451,54],[537,104,451,55,"event"],[537,109,451,60],[537,111,451,62,"payload"],[537,118,451,69],[537,120,451,71,"ref"],[537,123,451,74],[537,124,451,75],[537,125,451,76],[538,10,452,12],[538,14,452,16],[538,15,452,17,"_triggerStateCallbacks"],[538,37,452,39],[538,38,452,40],[538,47,452,49],[538,49,452,51,"msg"],[538,52,452,54],[538,53,452,55],[539,8,453,8],[539,9,453,9],[539,10,453,10],[540,6,454,4],[541,6,455,4],[542,0,456,0],[543,0,457,0],[544,0,458,0],[545,4,455,4],[546,6,455,4,"key"],[546,9,455,4],[547,6,455,4,"value"],[547,11,455,4],[547,13,459,4],[547,22,459,4,"_clearTimer"],[547,33,459,15,"_clearTimer"],[547,34,459,16,"timer"],[547,39,459,21],[547,41,459,23],[548,8,460,8],[548,12,460,12,"_a"],[548,14,460,14],[549,8,461,8],[549,12,461,12,"timer"],[549,17,461,17],[549,22,461,22],[549,33,461,33],[549,37,461,37],[549,41,461,41],[549,42,461,42,"heartbeatTimer"],[549,56,461,56],[549,58,461,58],[550,10,462,12,"clearInterval"],[550,23,462,25],[550,24,462,26],[550,28,462,30],[550,29,462,31,"heartbeatTimer"],[550,43,462,45],[550,44,462,46],[551,10,463,12],[551,14,463,16],[551,15,463,17,"heartbeatTimer"],[551,29,463,31],[551,32,463,34,"undefined"],[551,41,463,43],[552,8,464,8],[552,9,464,9],[552,15,465,13],[552,19,465,17,"timer"],[552,24,465,22],[552,29,465,27],[552,40,465,38],[552,42,465,40],[553,10,466,12],[553,11,466,13,"_a"],[553,13,466,15],[553,16,466,18],[553,20,466,22],[553,21,466,23,"reconnectTimer"],[553,35,466,37],[553,41,466,43],[553,45,466,47],[553,49,466,51,"_a"],[553,51,466,53],[553,56,466,53,"undefined"],[553,65,466,64],[553,68,466,64,"undefined"],[553,77,466,64],[553,80,466,76,"_a"],[553,82,466,78],[553,83,466,79,"reset"],[553,88,466,84],[553,89,466,85],[553,90,466,86],[554,8,467,8],[555,6,468,4],[556,6,469,4],[557,0,470,0],[558,0,471,0],[559,0,472,0],[560,4,469,4],[561,6,469,4,"key"],[561,9,469,4],[562,6,469,4,"value"],[562,11,469,4],[562,13,473,4],[562,22,473,4,"_clearAllTimers"],[562,37,473,19,"_clearAllTimers"],[562,38,473,19],[562,40,473,22],[563,8,474,8],[563,12,474,12],[563,13,474,13,"_clearTimer"],[563,24,474,24],[563,25,474,25],[563,36,474,36],[563,37,474,37],[564,8,475,8],[564,12,475,12],[564,13,475,13,"_clearTimer"],[564,24,475,24],[564,25,475,25],[564,36,475,36],[564,37,475,37],[565,6,476,4],[566,6,477,4],[567,0,478,0],[568,0,479,0],[569,0,480,0],[570,4,477,4],[571,6,477,4,"key"],[571,9,477,4],[572,6,477,4,"value"],[572,11,477,4],[572,13,481,4],[572,22,481,4,"_setupConnectionHandlers"],[572,46,481,28,"_setupConnectionHandlers"],[572,47,481,28],[572,49,481,31],[573,8,482,8],[573,12,482,12],[573,13,482,13],[573,17,482,17],[573,18,482,18,"conn"],[573,22,482,22],[573,24,483,12],[574,8,484,8],[575,8,485,8],[575,12,485,12],[575,24,485,24],[575,28,485,28],[575,32,485,32],[575,33,485,33,"conn"],[575,37,485,37],[575,39,485,39],[576,10,486,12],[577,10,487,12],[577,14,487,16],[577,15,487,17,"conn"],[577,19,487,21],[577,20,487,22,"binaryType"],[577,30,487,32],[577,33,487,35],[577,46,487,48],[578,8,488,8],[579,8,489,8],[579,12,489,12],[579,13,489,13,"conn"],[579,17,489,17],[579,18,489,18,"onopen"],[579,24,489,24],[579,27,489,27],[579,33,489,33],[579,37,489,37],[579,38,489,38,"_onConnOpen"],[579,49,489,49],[579,50,489,50],[579,51,489,51],[580,8,490,8],[580,12,490,12],[580,13,490,13,"conn"],[580,17,490,17],[580,18,490,18,"onerror"],[580,25,490,25],[580,28,490,29,"error"],[580,33,490,34],[580,37,490,39],[580,41,490,43],[580,42,490,44,"_onConnError"],[580,54,490,56],[580,55,490,57,"error"],[580,60,490,62],[580,61,490,63],[581,8,491,8],[581,12,491,12],[581,13,491,13,"conn"],[581,17,491,17],[581,18,491,18,"onmessage"],[581,27,491,27],[581,30,491,31,"event"],[581,35,491,36],[581,39,491,41],[581,43,491,45],[581,44,491,46,"_onConnMessage"],[581,58,491,60],[581,59,491,61,"event"],[581,64,491,66],[581,65,491,67],[582,8,492,8],[582,12,492,12],[582,13,492,13,"conn"],[582,17,492,17],[582,18,492,18,"onclose"],[582,25,492,25],[582,28,492,29,"event"],[582,33,492,34],[582,37,492,39],[582,41,492,43],[582,42,492,44,"_onConnClose"],[582,54,492,56],[582,55,492,57,"event"],[582,60,492,62],[582,61,492,63],[583,6,493,4],[584,6,494,4],[585,0,495,0],[586,0,496,0],[587,0,497,0],[588,4,494,4],[589,6,494,4,"key"],[589,9,494,4],[590,6,494,4,"value"],[590,11,494,4],[590,13,498,4],[590,22,498,4,"_teardownConnection"],[590,41,498,23,"_teardownConnection"],[590,42,498,23],[590,44,498,26],[591,8,499,8],[591,12,499,12],[591,16,499,16],[591,17,499,17,"conn"],[591,21,499,21],[591,23,499,23],[592,10,500,12],[592,14,500,16],[592,15,500,17,"conn"],[592,19,500,21],[592,20,500,22,"onopen"],[592,26,500,28],[592,29,500,31],[592,33,500,35],[593,10,501,12],[593,14,501,16],[593,15,501,17,"conn"],[593,19,501,21],[593,20,501,22,"onerror"],[593,27,501,29],[593,30,501,32],[593,34,501,36],[594,10,502,12],[594,14,502,16],[594,15,502,17,"conn"],[594,19,502,21],[594,20,502,22,"onmessage"],[594,29,502,31],[594,32,502,34],[594,36,502,38],[595,10,503,12],[595,14,503,16],[595,15,503,17,"conn"],[595,19,503,21],[595,20,503,22,"onclose"],[595,27,503,29],[595,30,503,32],[595,34,503,36],[596,10,504,12],[596,14,504,16],[596,15,504,17,"conn"],[596,19,504,21],[596,22,504,24],[596,26,504,28],[597,8,505,8],[598,8,506,8],[598,12,506,12],[598,13,506,13,"_clearAllTimers"],[598,28,506,28],[598,29,506,29],[598,30,506,30],[599,8,507,8],[599,12,507,12],[599,13,507,13,"channels"],[599,21,507,21],[599,22,507,22,"forEach"],[599,29,507,29],[599,30,507,31,"channel"],[599,37,507,38],[599,41,507,43,"channel"],[599,48,507,50],[599,49,507,51,"teardown"],[599,57,507,59],[599,58,507,60],[599,59,507,61],[599,60,507,62],[600,6,508,4],[601,6,509,4],[602,4,509,4],[603,6,509,4,"key"],[603,9,509,4],[604,6,509,4,"value"],[604,11,509,4],[604,13,510,4],[604,22,510,4,"_onConnOpen"],[604,33,510,15,"_onConnOpen"],[604,34,510,15],[604,36,510,18],[605,8,511,8],[605,12,511,12],[605,13,511,13,"_setConnectionState"],[605,32,511,32],[605,33,511,33],[605,44,511,44],[605,45,511,45],[606,8,512,8],[606,12,512,12],[606,13,512,13,"log"],[606,16,512,16],[606,17,512,17],[606,28,512,28],[606,30,512,30],[606,46,512,46],[606,50,512,50],[606,51,512,51,"endpointURL"],[606,62,512,62],[606,63,512,63],[606,64,512,64],[606,66,512,66],[606,67,512,67],[607,8,513,8],[607,12,513,12],[607,13,513,13,"flushSendBuffer"],[607,28,513,28],[607,29,513,29],[607,30,513,30],[608,8,514,8],[608,12,514,12],[608,13,514,13,"_clearTimer"],[608,24,514,24],[608,25,514,25],[608,36,514,36],[608,37,514,37],[609,8,515,8],[609,12,515,12],[609,13,515,13],[609,17,515,17],[609,18,515,18,"worker"],[609,24,515,24],[609,26,515,26],[610,10,516,12],[610,14,516,16],[610,15,516,17,"_startHeartbeat"],[610,30,516,32],[610,31,516,33],[610,32,516,34],[611,8,517,8],[611,9,517,9],[611,15,518,13],[612,10,519,12],[612,14,519,16],[612,15,519,17],[612,19,519,21],[612,20,519,22,"workerRef"],[612,29,519,31],[612,31,519,33],[613,12,520,16],[613,16,520,20],[613,17,520,21,"_startWorkerHeartbeat"],[613,38,520,42],[613,39,520,43],[613,40,520,44],[614,10,521,12],[615,8,522,8],[616,8,523,8],[616,12,523,12],[616,13,523,13,"_triggerStateCallbacks"],[616,35,523,35],[616,36,523,36],[616,42,523,42],[616,43,523,43],[617,6,524,4],[618,6,525,4],[619,4,525,4],[620,6,525,4,"key"],[620,9,525,4],[621,6,525,4,"value"],[621,11,525,4],[621,13,526,4],[621,22,526,4,"_startHeartbeat"],[621,37,526,19,"_startHeartbeat"],[621,38,526,19],[621,40,526,22],[622,8,527,8],[622,12,527,12],[622,13,527,13,"heartbeatTimer"],[622,27,527,27],[622,31,527,31,"clearInterval"],[622,44,527,44],[622,45,527,45],[622,49,527,49],[622,50,527,50,"heartbeatTimer"],[622,64,527,64],[622,65,527,65],[623,8,528,8],[623,12,528,12],[623,13,528,13,"heartbeatTimer"],[623,27,528,27],[623,30,528,30,"setInterval"],[623,41,528,41],[623,42,528,42],[623,48,528,48],[623,52,528,52],[623,53,528,53,"sendHeartbeat"],[623,66,528,66],[623,67,528,67],[623,68,528,68],[623,70,528,70],[623,74,528,74],[623,75,528,75,"heartbeatIntervalMs"],[623,94,528,94],[623,95,528,95],[624,6,529,4],[625,6,530,4],[626,4,530,4],[627,6,530,4,"key"],[627,9,530,4],[628,6,530,4,"value"],[628,11,530,4],[628,13,531,4],[628,22,531,4,"_startWorkerHeartbeat"],[628,43,531,25,"_startWorkerHeartbeat"],[628,44,531,25],[628,46,531,28],[629,8,532,8],[629,12,532,12],[629,16,532,16],[629,17,532,17,"workerUrl"],[629,26,532,26],[629,28,532,28],[630,10,533,12],[630,14,533,16],[630,15,533,17,"log"],[630,18,533,20],[630,19,533,21],[630,27,533,29],[630,29,533,31],[630,57,533,59],[630,61,533,63],[630,62,533,64,"workerUrl"],[630,71,533,73],[630,73,533,75],[630,74,533,76],[631,8,534,8],[631,9,534,9],[631,15,535,13],[632,10,536,12],[632,14,536,16],[632,15,536,17,"log"],[632,18,536,20],[632,19,536,21],[632,27,536,29],[632,29,536,31],[632,54,536,56],[632,55,536,57],[633,8,537,8],[634,8,538,8],[634,12,538,14,"objectUrl"],[634,21,538,23],[634,24,538,26],[634,28,538,30],[634,29,538,31,"_workerObjectUrl"],[634,45,538,47],[634,46,538,48],[634,50,538,52],[634,51,538,53,"workerUrl"],[634,60,538,62],[634,61,538,63],[635,8,539,8],[635,12,539,12],[635,13,539,13,"workerRef"],[635,22,539,22],[635,25,539,25],[635,29,539,29,"Worker"],[635,35,539,35],[635,36,539,36,"objectUrl"],[635,45,539,45],[635,46,539,46],[636,8,540,8],[636,12,540,12],[636,13,540,13,"workerRef"],[636,22,540,22],[636,23,540,23,"onerror"],[636,30,540,30],[636,33,540,34,"error"],[636,38,540,39],[636,42,540,44],[637,10,541,12],[637,14,541,16],[637,15,541,17,"log"],[637,18,541,20],[637,19,541,21],[637,27,541,29],[637,29,541,31],[637,43,541,45],[637,45,541,47,"error"],[637,50,541,52],[637,51,541,53,"message"],[637,58,541,60],[637,59,541,61],[638,10,542,12],[638,14,542,16],[638,15,542,17,"workerRef"],[638,24,542,26],[638,25,542,27,"terminate"],[638,34,542,36],[638,35,542,37],[638,36,542,38],[639,8,543,8],[639,9,543,9],[640,8,544,8],[640,12,544,12],[640,13,544,13,"workerRef"],[640,22,544,22],[640,23,544,23,"onmessage"],[640,32,544,32],[640,35,544,36,"event"],[640,40,544,41],[640,44,544,46],[641,10,545,12],[641,14,545,16,"event"],[641,19,545,21],[641,20,545,22,"data"],[641,24,545,26],[641,25,545,27,"event"],[641,30,545,32],[641,35,545,37],[641,46,545,48],[641,48,545,50],[642,12,546,16],[642,16,546,20],[642,17,546,21,"sendHeartbeat"],[642,30,546,34],[642,31,546,35],[642,32,546,36],[643,10,547,12],[644,8,548,8],[644,9,548,9],[645,8,549,8],[645,12,549,12],[645,13,549,13,"workerRef"],[645,22,549,22],[645,23,549,23,"postMessage"],[645,34,549,34],[645,35,549,35],[646,10,550,12,"event"],[646,15,550,17],[646,17,550,19],[646,24,550,26],[647,10,551,12,"interval"],[647,18,551,20],[647,20,551,22],[647,24,551,26],[647,25,551,27,"heartbeatIntervalMs"],[648,8,552,8],[648,9,552,9],[648,10,552,10],[649,6,553,4],[650,6,554,4],[651,4,554,4],[652,6,554,4,"key"],[652,9,554,4],[653,6,554,4,"value"],[653,11,554,4],[653,13,555,4],[653,22,555,4,"_onConnClose"],[653,34,555,16,"_onConnClose"],[653,35,555,17,"event"],[653,40,555,22],[653,42,555,24],[654,8,556,8],[654,12,556,12,"_a"],[654,14,556,14],[655,8,557,8],[655,12,557,12],[655,13,557,13,"_setConnectionState"],[655,32,557,32],[655,33,557,33],[655,47,557,47],[655,48,557,48],[656,8,558,8],[656,12,558,12],[656,13,558,13,"log"],[656,16,558,16],[656,17,558,17],[656,28,558,28],[656,30,558,30],[656,37,558,37],[656,39,558,39,"event"],[656,44,558,44],[656,45,558,45],[657,8,559,8],[657,12,559,12],[657,13,559,13,"_triggerChanError"],[657,30,559,30],[657,31,559,31],[657,32,559,32],[658,8,560,8],[658,12,560,12],[658,13,560,13,"_clearTimer"],[658,24,560,24],[658,25,560,25],[658,36,560,36],[658,37,560,37],[659,8,561,8],[660,8,562,8],[660,12,562,12],[660,13,562,13],[660,17,562,17],[660,18,562,18,"_wasManualDisconnect"],[660,38,562,38],[660,40,562,40],[661,10,563,12],[661,11,563,13,"_a"],[661,13,563,15],[661,16,563,18],[661,20,563,22],[661,21,563,23,"reconnectTimer"],[661,35,563,37],[661,41,563,43],[661,45,563,47],[661,49,563,51,"_a"],[661,51,563,53],[661,56,563,53,"undefined"],[661,65,563,64],[661,68,563,64,"undefined"],[661,77,563,64],[661,80,563,76,"_a"],[661,82,563,78],[661,83,563,79,"scheduleTimeout"],[661,98,563,94],[661,99,563,95],[661,100,563,96],[662,8,564,8],[663,8,565,8],[663,12,565,12],[663,13,565,13,"_triggerStateCallbacks"],[663,35,565,35],[663,36,565,36],[663,43,565,43],[663,45,565,45,"event"],[663,50,565,50],[663,51,565,51],[664,6,566,4],[665,6,567,4],[666,4,567,4],[667,6,567,4,"key"],[667,9,567,4],[668,6,567,4,"value"],[668,11,567,4],[668,13,568,4],[668,22,568,4,"_onConnError"],[668,34,568,16,"_onConnError"],[668,35,568,17,"error"],[668,40,568,22],[668,42,568,24],[669,8,569,8],[669,12,569,12],[669,13,569,13,"_setConnectionState"],[669,32,569,32],[669,33,569,33],[669,47,569,47],[669,48,569,48],[670,8,570,8],[670,12,570,12],[670,13,570,13,"log"],[670,16,570,16],[670,17,570,17],[670,28,570,28],[670,30,570,30],[670,33,570,33,"error"],[670,38,570,38],[670,40,570,40],[670,41,570,41],[671,8,571,8],[671,12,571,12],[671,13,571,13,"_triggerChanError"],[671,30,571,30],[671,31,571,31],[671,32,571,32],[672,8,572,8],[672,12,572,12],[672,13,572,13,"_triggerStateCallbacks"],[672,35,572,35],[672,36,572,36],[672,43,572,43],[672,45,572,45,"error"],[672,50,572,50],[672,51,572,51],[673,6,573,4],[674,6,574,4],[675,4,574,4],[676,6,574,4,"key"],[676,9,574,4],[677,6,574,4,"value"],[677,11,574,4],[677,13,575,4],[677,22,575,4,"_triggerChanError"],[677,39,575,21,"_triggerChanError"],[677,40,575,21],[677,42,575,24],[678,8,576,8],[678,12,576,12],[678,13,576,13,"channels"],[678,21,576,21],[678,22,576,22,"forEach"],[678,29,576,29],[678,30,576,31,"channel"],[678,37,576,38],[678,41,576,43,"channel"],[678,48,576,50],[678,49,576,51,"_trigger"],[678,57,576,59],[678,58,576,60,"constants_1"],[678,69,576,71],[678,70,576,72,"CHANNEL_EVENTS"],[678,84,576,86],[678,85,576,87,"error"],[678,90,576,92],[678,91,576,93],[678,92,576,94],[679,6,577,4],[680,6,578,4],[681,4,578,4],[682,6,578,4,"key"],[682,9,578,4],[683,6,578,4,"value"],[683,11,578,4],[683,13,579,4],[683,22,579,4,"_appendParams"],[683,35,579,17,"_appendParams"],[683,36,579,18,"url"],[683,39,579,21],[683,41,579,23,"params"],[683,47,579,29],[683,49,579,31],[684,8,580,8],[684,12,580,12,"Object"],[684,18,580,18],[684,19,580,19,"keys"],[684,23,580,23],[684,24,580,24,"params"],[684,30,580,30],[684,31,580,31],[684,32,580,32,"length"],[684,38,580,38],[684,43,580,43],[684,44,580,44],[684,46,580,46],[685,10,581,12],[685,17,581,19,"url"],[685,20,581,22],[686,8,582,8],[687,8,583,8],[687,12,583,14,"prefix"],[687,18,583,20],[687,21,583,23,"url"],[687,24,583,26],[687,25,583,27,"match"],[687,30,583,32],[687,31,583,33],[687,35,583,37],[687,36,583,38],[687,39,583,41],[687,42,583,44],[687,45,583,47],[687,48,583,50],[688,8,584,8],[688,12,584,14,"query"],[688,17,584,19],[688,20,584,22],[688,24,584,26,"URLSearchParams"],[688,39,584,41],[688,40,584,42,"params"],[688,46,584,48],[688,47,584,49],[689,8,585,8],[689,15,585,15],[689,18,585,18,"url"],[689,21,585,21],[689,24,585,24,"prefix"],[689,30,585,30],[689,33,585,33,"query"],[689,38,585,38],[689,40,585,40],[690,6,586,4],[691,4,586,5],[692,6,586,5,"key"],[692,9,586,5],[693,6,586,5,"value"],[693,11,586,5],[693,13,587,4],[693,22,587,4,"_workerObjectUrl"],[693,38,587,20,"_workerObjectUrl"],[693,39,587,21,"url"],[693,42,587,24],[693,44,587,26],[694,8,588,8],[694,12,588,12,"result_url"],[694,22,588,22],[695,8,589,8],[695,12,589,12,"url"],[695,15,589,15],[695,17,589,17],[696,10,590,12,"result_url"],[696,20,590,22],[696,23,590,25,"url"],[696,26,590,28],[697,8,591,8],[697,9,591,9],[697,15,592,13],[698,10,593,12],[698,14,593,18,"blob"],[698,18,593,22],[698,21,593,25],[698,25,593,29,"Blob"],[698,29,593,33],[698,30,593,34],[698,31,593,35,"WORKER_SCRIPT"],[698,44,593,48],[698,45,593,49],[698,47,593,51],[699,12,593,53,"type"],[699,16,593,57],[699,18,593,59],[700,10,593,84],[700,11,593,85],[700,12,593,86],[701,10,594,12,"result_url"],[701,20,594,22],[701,23,594,25,"URL"],[701,26,594,28],[701,27,594,29,"createObjectURL"],[701,42,594,44],[701,43,594,45,"blob"],[701,47,594,49],[701,48,594,50],[702,8,595,8],[703,8,596,8],[703,15,596,15,"result_url"],[703,25,596,25],[704,6,597,4],[705,6,598,4],[706,0,599,0],[707,0,600,0],[708,0,601,0],[709,4,598,4],[710,6,598,4,"key"],[710,9,598,4],[711,6,598,4,"value"],[711,11,598,4],[711,13,602,4],[711,22,602,4,"_setConnectionState"],[711,41,602,23,"_setConnectionState"],[711,42,602,24,"state"],[711,47,602,29],[711,49,602,47],[712,8,602,47],[712,12,602,31,"manual"],[712,18,602,37],[712,21,602,37,"arguments"],[712,30,602,37],[712,31,602,37,"length"],[712,37,602,37],[712,45,602,37,"arguments"],[712,54,602,37],[712,62,602,37,"undefined"],[712,71,602,37],[712,74,602,37,"arguments"],[712,83,602,37],[712,89,602,40],[712,94,602,45],[713,8,603,8],[713,12,603,12],[713,13,603,13,"_connectionState"],[713,29,603,29],[713,32,603,32,"state"],[713,37,603,37],[714,8,604,8],[714,12,604,12,"state"],[714,17,604,17],[714,22,604,22],[714,34,604,34],[714,36,604,36],[715,10,605,12],[715,14,605,16],[715,15,605,17,"_wasManualDisconnect"],[715,35,605,37],[715,38,605,40],[715,43,605,45],[716,8,606,8],[716,9,606,9],[716,15,607,13],[716,19,607,17,"state"],[716,24,607,22],[716,29,607,27],[716,44,607,42],[716,46,607,44],[717,10,608,12],[717,14,608,16],[717,15,608,17,"_wasManualDisconnect"],[717,35,608,37],[717,38,608,40,"manual"],[717,44,608,46],[718,8,609,8],[719,6,610,4],[720,6,611,4],[721,0,612,0],[722,0,613,0],[723,0,614,0],[724,4,611,4],[725,6,611,4,"key"],[725,9,611,4],[726,6,611,4,"value"],[726,11,611,4],[727,8,611,4],[727,12,611,4,"_performAuth2"],[727,25,611,4],[727,28,611,4,"_asyncToGenerator"],[727,45,611,4],[727,46,615,4],[727,59,615,37],[728,10,615,37],[728,14,615,23,"token"],[728,19,615,28],[728,22,615,28,"arguments"],[728,31,615,28],[728,32,615,28,"length"],[728,38,615,28],[728,46,615,28,"arguments"],[728,55,615,28],[728,63,615,28,"undefined"],[728,72,615,28],[728,75,615,28,"arguments"],[728,84,615,28],[728,90,615,31],[728,94,615,35],[729,10,616,8],[729,14,616,12,"tokenToSend"],[729,25,616,23],[730,10,617,8],[730,14,617,12,"token"],[730,19,617,17],[730,21,617,19],[731,12,618,12,"tokenToSend"],[731,23,618,23],[731,26,618,26,"token"],[731,31,618,31],[732,10,619,8],[732,11,619,9],[732,17,620,13],[732,21,620,17],[732,25,620,21],[732,26,620,22,"accessToken"],[732,37,620,33],[732,39,620,35],[733,12,621,12],[734,12,622,12,"tokenToSend"],[734,23,622,23],[734,32,622,32],[734,36,622,36],[734,37,622,37,"accessToken"],[734,48,622,48],[734,49,622,49],[734,50,622,50],[735,10,623,8],[735,11,623,9],[735,17,624,13],[736,12,625,12,"tokenToSend"],[736,23,625,23],[736,26,625,26],[736,30,625,30],[736,31,625,31,"accessTokenValue"],[736,47,625,47],[737,10,626,8],[738,10,627,8],[738,14,627,12],[738,18,627,16],[738,19,627,17,"accessTokenValue"],[738,35,627,33],[738,39,627,37,"tokenToSend"],[738,50,627,48],[738,52,627,50],[739,12,628,12],[739,16,628,16],[739,17,628,17,"accessTokenValue"],[739,33,628,33],[739,36,628,36,"tokenToSend"],[739,47,628,47],[740,12,629,12],[740,16,629,16],[740,17,629,17,"channels"],[740,25,629,25],[740,26,629,26,"forEach"],[740,33,629,33],[740,34,629,35,"channel"],[740,41,629,42],[740,45,629,47],[741,14,630,16],[741,18,630,22,"payload"],[741,25,630,29],[741,28,630,32],[742,16,631,20,"access_token"],[742,28,631,32],[742,30,631,34,"tokenToSend"],[742,41,631,45],[743,16,632,20,"version"],[743,23,632,27],[743,25,632,29,"constants_1"],[743,36,632,40],[743,37,632,41,"DEFAULT_VERSION"],[744,14,633,16],[744,15,633,17],[745,14,634,16,"tokenToSend"],[745,25,634,27],[745,29,634,31,"channel"],[745,36,634,38],[745,37,634,39,"updateJoinPayload"],[745,54,634,56],[745,55,634,57,"payload"],[745,62,634,64],[745,63,634,65],[746,14,635,16],[746,18,635,20,"channel"],[746,25,635,27],[746,26,635,28,"joinedOnce"],[746,36,635,38],[746,40,635,42,"channel"],[746,47,635,49],[746,48,635,50,"_isJoined"],[746,57,635,59],[746,58,635,60],[746,59,635,61],[746,61,635,63],[747,16,636,20,"channel"],[747,23,636,27],[747,24,636,28,"_push"],[747,29,636,33],[747,30,636,34,"constants_1"],[747,41,636,45],[747,42,636,46,"CHANNEL_EVENTS"],[747,56,636,60],[747,57,636,61,"access_token"],[747,69,636,73],[747,71,636,75],[748,18,637,24,"access_token"],[748,30,637,36],[748,32,637,38,"tokenToSend"],[749,16,638,20],[749,17,638,21],[749,18,638,22],[750,14,639,16],[751,12,640,12],[751,13,640,13],[751,14,640,14],[752,10,641,8],[753,8,642,4],[753,9,642,5],[754,8,642,5],[754,17,615,10,"_performAuth"],[754,29,615,22,"_performAuth"],[754,30,615,22],[755,10,615,22],[755,17,615,22,"_performAuth2"],[755,30,615,22],[755,31,615,22,"apply"],[755,36,615,22],[755,43,615,22,"arguments"],[755,52,615,22],[756,8,615,22],[757,8,615,22],[757,15,615,10,"_performAuth"],[757,27,615,22],[758,6,615,22],[759,6,643,4],[760,0,644,0],[761,0,645,0],[762,0,646,0],[763,6,643,4],[764,4,643,4],[765,6,643,4,"key"],[765,9,643,4],[766,6,643,4,"value"],[766,11,643,4],[767,8,643,4],[767,12,643,4,"_waitForAuthIfNeeded2"],[767,33,643,4],[767,36,643,4,"_asyncToGenerator"],[767,53,643,4],[767,54,647,4],[767,67,647,33],[768,10,648,8],[768,14,648,12],[768,18,648,16],[768,19,648,17,"_authPromise"],[768,31,648,29],[768,33,648,31],[769,12,649,12],[769,18,649,18],[769,22,649,22],[769,23,649,23,"_authPromise"],[769,35,649,35],[770,10,650,8],[771,8,651,4],[771,9,651,5],[772,8,651,5],[772,17,647,10,"_waitForAuthIfNeeded"],[772,37,647,30,"_waitForAuthIfNeeded"],[772,38,647,30],[773,10,647,30],[773,17,647,30,"_waitForAuthIfNeeded2"],[773,38,647,30],[773,39,647,30,"apply"],[773,44,647,30],[773,51,647,30,"arguments"],[773,60,647,30],[774,8,647,30],[775,8,647,30],[775,15,647,10,"_waitForAuthIfNeeded"],[775,35,647,30],[776,6,647,30],[777,6,652,4],[778,0,653,0],[779,0,654,0],[780,0,655,0],[781,6,652,4],[782,4,652,4],[783,6,652,4,"key"],[783,9,652,4],[784,6,652,4,"value"],[784,11,652,4],[784,13,656,4],[784,22,656,4,"_setAuthSafely"],[784,36,656,18,"_setAuthSafely"],[784,37,656,18],[784,39,656,40],[785,8,656,40],[785,12,656,19,"context"],[785,19,656,26],[785,22,656,26,"arguments"],[785,31,656,26],[785,32,656,26,"length"],[785,38,656,26],[785,46,656,26,"arguments"],[785,55,656,26],[785,63,656,26,"undefined"],[785,72,656,26],[785,75,656,26,"arguments"],[785,84,656,26],[785,90,656,29],[785,99,656,38],[786,8,657,8],[786,12,657,12],[786,13,657,13,"setAuth"],[786,20,657,20],[786,21,657,21],[786,22,657,22],[786,23,657,23,"catch"],[786,28,657,28],[786,29,657,30,"e"],[786,30,657,31],[786,34,657,36],[787,10,658,12],[787,14,658,16],[787,15,658,17,"log"],[787,18,658,20],[787,19,658,21],[787,26,658,28],[787,28,658,30],[787,53,658,55,"context"],[787,60,658,62],[787,62,658,64],[787,64,658,66,"e"],[787,65,658,67],[787,66,658,68],[788,8,659,8],[788,9,659,9],[788,10,659,10],[789,6,660,4],[790,6,661,4],[791,0,662,0],[792,0,663,0],[793,0,664,0],[794,4,661,4],[795,6,661,4,"key"],[795,9,661,4],[796,6,661,4,"value"],[796,11,661,4],[796,13,665,4],[796,22,665,4,"_triggerStateCallbacks"],[796,44,665,26,"_triggerStateCallbacks"],[796,45,665,27,"event"],[796,50,665,32],[796,52,665,34,"data"],[796,56,665,38],[796,58,665,40],[797,8,666,8],[797,12,666,12],[798,10,667,12],[798,14,667,16],[798,15,667,17,"stateChangeCallbacks"],[798,35,667,37],[798,36,667,38,"event"],[798,41,667,43],[798,42,667,44],[798,43,667,45,"forEach"],[798,50,667,52],[798,51,667,54,"callback"],[798,59,667,62],[798,63,667,67],[799,12,668,16],[799,16,668,20],[800,14,669,20,"callback"],[800,22,669,28],[800,23,669,29,"data"],[800,27,669,33],[800,28,669,34],[801,12,670,16],[801,13,670,17],[801,14,671,16],[801,21,671,23,"e"],[801,22,671,24],[801,24,671,26],[802,14,672,20],[802,18,672,24],[802,19,672,25,"log"],[802,22,672,28],[802,23,672,29],[802,30,672,36],[802,32,672,38],[802,44,672,50,"event"],[802,49,672,55],[802,60,672,66],[802,62,672,68,"e"],[802,63,672,69],[802,64,672,70],[803,12,673,16],[804,10,674,12],[804,11,674,13],[804,12,674,14],[805,8,675,8],[805,9,675,9],[805,10,676,8],[805,17,676,15,"e"],[805,18,676,16],[805,20,676,18],[806,10,677,12],[806,14,677,16],[806,15,677,17,"log"],[806,18,677,20],[806,19,677,21],[806,26,677,28],[806,28,677,30],[806,48,677,50,"event"],[806,53,677,55],[806,65,677,67],[806,67,677,69,"e"],[806,68,677,70],[806,69,677,71],[807,8,678,8],[808,6,679,4],[809,6,680,4],[810,0,681,0],[811,0,682,0],[812,0,683,0],[813,4,680,4],[814,6,680,4,"key"],[814,9,680,4],[815,6,680,4,"value"],[815,11,680,4],[815,13,684,4],[815,22,684,4,"_setupReconnectionTimer"],[815,45,684,27,"_setupReconnectionTimer"],[815,46,684,27],[815,48,684,30],[816,8,684,30],[816,12,684,30,"_this"],[816,17,684,30],[817,8,685,8],[817,12,685,12],[817,13,685,13,"reconnectTimer"],[817,27,685,27],[817,30,685,30],[817,34,685,34,"timer_1"],[817,41,685,41],[817,42,685,42,"default"],[817,49,685,49],[817,63,685,49,"_asyncToGenerator"],[817,80,685,49],[817,81,685,50],[817,94,685,62],[818,10,686,12,"setTimeout"],[818,20,686,22],[818,34,686,22,"_asyncToGenerator"],[818,51,686,22],[818,52,686,23],[818,65,686,35],[819,12,687,16],[819,18,687,22,"_this"],[819,23,687,26],[819,24,687,27,"_waitForAuthIfNeeded"],[819,44,687,47],[819,45,687,48],[819,46,687,49],[820,12,688,16],[820,16,688,20],[820,17,688,21,"_this"],[820,22,688,25],[820,23,688,26,"isConnected"],[820,34,688,37],[820,35,688,38],[820,36,688,39],[820,38,688,41],[821,14,689,20,"_this"],[821,19,689,24],[821,20,689,25,"connect"],[821,27,689,32],[821,28,689,33],[821,29,689,34],[822,12,690,16],[823,10,691,12],[823,11,691,13],[823,14,691,15,"CONNECTION_TIMEOUTS"],[823,33,691,34],[823,34,691,35,"RECONNECT_DELAY"],[823,49,691,50],[823,50,691,51],[824,8,692,8],[824,9,692,9],[824,12,692,11],[824,16,692,15],[824,17,692,16,"reconnectAfterMs"],[824,33,692,32],[824,34,692,33],[825,6,693,4],[826,6,694,4],[827,0,695,0],[828,0,696,0],[829,0,697,0],[830,4,694,4],[831,6,694,4,"key"],[831,9,694,4],[832,6,694,4,"value"],[832,11,694,4],[832,13,698,4],[832,22,698,4,"_initializeOptions"],[832,40,698,22,"_initializeOptions"],[832,41,698,23,"options"],[832,48,698,30],[832,50,698,32],[833,8,699,8],[833,12,699,12,"_a"],[833,14,699,14],[833,16,699,16,"_b"],[833,18,699,18],[833,20,699,20,"_c"],[833,22,699,22],[833,24,699,24,"_d"],[833,26,699,26],[833,28,699,28,"_e"],[833,30,699,30],[833,32,699,32,"_f"],[833,34,699,34],[833,36,699,36,"_g"],[833,38,699,38],[833,40,699,40,"_h"],[833,42,699,42],[834,8,700,8],[835,8,701,8],[835,12,701,12],[835,13,701,13,"transport"],[835,22,701,22],[835,25,701,25],[835,26,701,26,"_a"],[835,28,701,28],[835,31,701,31,"options"],[835,38,701,38],[835,43,701,43],[835,47,701,47],[835,51,701,51,"options"],[835,58,701,58],[835,63,701,58,"undefined"],[835,72,701,69],[835,75,701,69,"undefined"],[835,84,701,69],[835,87,701,81,"options"],[835,94,701,88],[835,95,701,89,"transport"],[835,104,701,98],[835,110,701,104],[835,114,701,108],[835,118,701,112,"_a"],[835,120,701,114],[835,125,701,114,"undefined"],[835,134,701,125],[835,137,701,128,"_a"],[835,139,701,130],[835,142,701,133],[835,146,701,137],[836,8,702,8],[836,12,702,12],[836,13,702,13,"timeout"],[836,20,702,20],[836,23,702,23],[836,24,702,24,"_b"],[836,26,702,26],[836,29,702,29,"options"],[836,36,702,36],[836,41,702,41],[836,45,702,45],[836,49,702,49,"options"],[836,56,702,56],[836,61,702,56,"undefined"],[836,70,702,67],[836,73,702,67,"undefined"],[836,82,702,67],[836,85,702,79,"options"],[836,92,702,86],[836,93,702,87,"timeout"],[836,100,702,94],[836,106,702,100],[836,110,702,104],[836,114,702,108,"_b"],[836,116,702,110],[836,121,702,110,"undefined"],[836,130,702,121],[836,133,702,124,"_b"],[836,135,702,126],[836,138,702,129,"constants_1"],[836,149,702,140],[836,150,702,141,"DEFAULT_TIMEOUT"],[836,165,702,156],[837,8,703,8],[837,12,703,12],[837,13,703,13,"heartbeatIntervalMs"],[837,32,703,32],[837,35,704,12],[837,36,704,13,"_c"],[837,38,704,15],[837,41,704,18,"options"],[837,48,704,25],[837,53,704,30],[837,57,704,34],[837,61,704,38,"options"],[837,68,704,45],[837,73,704,45,"undefined"],[837,82,704,56],[837,85,704,56,"undefined"],[837,94,704,56],[837,97,704,68,"options"],[837,104,704,75],[837,105,704,76,"heartbeatIntervalMs"],[837,124,704,95],[837,130,704,101],[837,134,704,105],[837,138,704,109,"_c"],[837,140,704,111],[837,145,704,111,"undefined"],[837,154,704,122],[837,157,704,125,"_c"],[837,159,704,127],[837,162,704,130,"CONNECTION_TIMEOUTS"],[837,181,704,149],[837,182,704,150,"HEARTBEAT_INTERVAL"],[837,200,704,168],[838,8,705,8],[838,12,705,12],[838,13,705,13,"worker"],[838,19,705,19],[838,22,705,22],[838,23,705,23,"_d"],[838,25,705,25],[838,28,705,28,"options"],[838,35,705,35],[838,40,705,40],[838,44,705,44],[838,48,705,48,"options"],[838,55,705,55],[838,60,705,55,"undefined"],[838,69,705,66],[838,72,705,66,"undefined"],[838,81,705,66],[838,84,705,78,"options"],[838,91,705,85],[838,92,705,86,"worker"],[838,98,705,92],[838,104,705,98],[838,108,705,102],[838,112,705,106,"_d"],[838,114,705,108],[838,119,705,108,"undefined"],[838,128,705,119],[838,131,705,122,"_d"],[838,133,705,124],[838,136,705,127],[838,141,705,132],[839,8,706,8],[839,12,706,12],[839,13,706,13,"accessToken"],[839,24,706,24],[839,27,706,27],[839,28,706,28,"_e"],[839,30,706,30],[839,33,706,33,"options"],[839,40,706,40],[839,45,706,45],[839,49,706,49],[839,53,706,53,"options"],[839,60,706,60],[839,65,706,60,"undefined"],[839,74,706,71],[839,77,706,71,"undefined"],[839,86,706,71],[839,89,706,83,"options"],[839,96,706,90],[839,97,706,91,"accessToken"],[839,108,706,102],[839,114,706,108],[839,118,706,112],[839,122,706,116,"_e"],[839,124,706,118],[839,129,706,118,"undefined"],[839,138,706,129],[839,141,706,132,"_e"],[839,143,706,134],[839,146,706,137],[839,150,706,141],[840,8,707,8],[841,8,708,8],[841,12,708,12,"options"],[841,19,708,19],[841,24,708,24],[841,28,708,28],[841,32,708,32,"options"],[841,39,708,39],[841,44,708,39,"undefined"],[841,53,708,50],[841,56,708,50,"undefined"],[841,65,708,50],[841,68,708,62,"options"],[841,75,708,69],[841,76,708,70,"params"],[841,82,708,76],[841,84,709,12],[841,88,709,16],[841,89,709,17,"params"],[841,95,709,23],[841,98,709,26,"options"],[841,105,709,33],[841,106,709,34,"params"],[841,112,709,40],[842,8,710,8],[842,12,710,12,"options"],[842,19,710,19],[842,24,710,24],[842,28,710,28],[842,32,710,32,"options"],[842,39,710,39],[842,44,710,39,"undefined"],[842,53,710,50],[842,56,710,50,"undefined"],[842,65,710,50],[842,68,710,62,"options"],[842,75,710,69],[842,76,710,70,"logger"],[842,82,710,76],[842,84,711,12],[842,88,711,16],[842,89,711,17,"logger"],[842,95,711,23],[842,98,711,26,"options"],[842,105,711,33],[842,106,711,34,"logger"],[842,112,711,40],[843,8,712,8],[843,12,712,12],[843,13,712,13,"options"],[843,20,712,20],[843,25,712,25],[843,29,712,29],[843,33,712,33,"options"],[843,40,712,40],[843,45,712,40,"undefined"],[843,54,712,51],[843,57,712,51,"undefined"],[843,66,712,51],[843,69,712,63,"options"],[843,76,712,70],[843,77,712,71,"logLevel"],[843,85,712,79],[843,91,712,85,"options"],[843,98,712,92],[843,103,712,97],[843,107,712,101],[843,111,712,105,"options"],[843,118,712,112],[843,123,712,112,"undefined"],[843,132,712,123],[843,135,712,123,"undefined"],[843,144,712,123],[843,147,712,135,"options"],[843,154,712,142],[843,155,712,143,"log_level"],[843,164,712,152],[843,165,712,153],[843,167,712,155],[844,10,713,12],[844,14,713,16],[844,15,713,17,"logLevel"],[844,23,713,25],[844,26,713,28,"options"],[844,33,713,35],[844,34,713,36,"logLevel"],[844,42,713,44],[844,46,713,48,"options"],[844,53,713,55],[844,54,713,56,"log_level"],[844,63,713,65],[845,10,714,12],[845,14,714,16],[845,15,714,17,"params"],[845,21,714,23],[845,24,714,26,"Object"],[845,30,714,32],[845,31,714,33,"assign"],[845,37,714,39],[845,38,714,40,"Object"],[845,44,714,46],[845,45,714,47,"assign"],[845,51,714,53],[845,52,714,54],[845,53,714,55],[845,54,714,56],[845,56,714,58],[845,60,714,62],[845,61,714,63,"params"],[845,67,714,69],[845,68,714,70],[845,70,714,72],[846,12,714,74,"log_level"],[846,21,714,83],[846,23,714,85],[846,27,714,89],[846,28,714,90,"logLevel"],[847,10,714,99],[847,11,714,100],[847,12,714,101],[848,8,715,8],[849,8,716,8],[850,8,717,8],[850,12,717,12],[850,13,717,13,"reconnectAfterMs"],[850,29,717,29],[850,32,718,12],[850,33,718,13,"_f"],[850,35,718,15],[850,38,718,18,"options"],[850,45,718,25],[850,50,718,30],[850,54,718,34],[850,58,718,38,"options"],[850,65,718,45],[850,70,718,45,"undefined"],[850,79,718,56],[850,82,718,56,"undefined"],[850,91,718,56],[850,94,718,68,"options"],[850,101,718,75],[850,102,718,76,"reconnectAfterMs"],[850,118,718,92],[850,124,718,98],[850,128,718,102],[850,132,718,106,"_f"],[850,134,718,108],[850,139,718,108,"undefined"],[850,148,718,119],[850,151,718,122,"_f"],[850,153,718,124],[850,156,718,129,"tries"],[850,161,718,134],[850,165,718,139],[851,10,719,16],[851,17,719,23,"RECONNECT_INTERVALS"],[851,36,719,42],[851,37,719,43,"tries"],[851,42,719,48],[851,45,719,51],[851,46,719,52],[851,47,719,53],[851,51,719,57,"DEFAULT_RECONNECT_FALLBACK"],[851,77,719,83],[852,8,720,12],[852,9,720,14],[853,8,721,8],[853,12,721,12],[853,13,721,13,"encode"],[853,19,721,19],[853,22,722,12],[853,23,722,13,"_g"],[853,25,722,15],[853,28,722,18,"options"],[853,35,722,25],[853,40,722,30],[853,44,722,34],[853,48,722,38,"options"],[853,55,722,45],[853,60,722,45,"undefined"],[853,69,722,56],[853,72,722,56,"undefined"],[853,81,722,56],[853,84,722,68,"options"],[853,91,722,75],[853,92,722,76,"encode"],[853,98,722,82],[853,104,722,88],[853,108,722,92],[853,112,722,96,"_g"],[853,114,722,98],[853,119,722,98,"undefined"],[853,128,722,109],[853,131,722,112,"_g"],[853,133,722,114],[853,136,722,118],[853,137,722,119,"payload"],[853,144,722,126],[853,146,722,128,"callback"],[853,154,722,136],[853,159,722,141],[854,10,723,16],[854,17,723,23,"callback"],[854,25,723,31],[854,26,723,32,"JSON"],[854,30,723,36],[854,31,723,37,"stringify"],[854,40,723,46],[854,41,723,47,"payload"],[854,48,723,54],[854,49,723,55],[854,50,723,56],[855,8,724,12],[855,9,724,14],[856,8,725,8],[856,12,725,12],[856,13,725,13,"decode"],[856,19,725,19],[856,22,726,12],[856,23,726,13,"_h"],[856,25,726,15],[856,28,726,18,"options"],[856,35,726,25],[856,40,726,30],[856,44,726,34],[856,48,726,38,"options"],[856,55,726,45],[856,60,726,45,"undefined"],[856,69,726,56],[856,72,726,56,"undefined"],[856,81,726,56],[856,84,726,68,"options"],[856,91,726,75],[856,92,726,76,"decode"],[856,98,726,82],[856,104,726,88],[856,108,726,92],[856,112,726,96,"_h"],[856,114,726,98],[856,119,726,98,"undefined"],[856,128,726,109],[856,131,726,112,"_h"],[856,133,726,114],[856,136,726,117],[856,140,726,121],[856,141,726,122,"serializer"],[856,151,726,132],[856,152,726,133,"decode"],[856,158,726,139],[856,159,726,140,"bind"],[856,163,726,144],[856,164,726,145],[856,168,726,149],[856,169,726,150,"serializer"],[856,179,726,160],[856,180,726,161],[857,8,727,8],[858,8,728,8],[858,12,728,12],[858,16,728,16],[858,17,728,17,"worker"],[858,23,728,23],[858,25,728,25],[859,10,729,12],[859,14,729,16],[859,21,729,23,"window"],[859,27,729,29],[859,32,729,34],[859,43,729,45],[859,47,729,49],[859,48,729,50,"window"],[859,54,729,56],[859,55,729,57,"Worker"],[859,61,729,63],[859,63,729,65],[860,12,730,16],[860,18,730,22],[860,22,730,26,"Error"],[860,27,730,31],[860,28,730,32],[860,57,730,61],[860,58,730,62],[861,10,731,12],[862,10,732,12],[862,14,732,16],[862,15,732,17,"workerUrl"],[862,24,732,26],[862,27,732,29,"options"],[862,34,732,36],[862,39,732,41],[862,43,732,45],[862,47,732,49,"options"],[862,54,732,56],[862,59,732,56,"undefined"],[862,68,732,67],[862,71,732,67,"undefined"],[862,80,732,67],[862,83,732,79,"options"],[862,90,732,86],[862,91,732,87,"workerUrl"],[862,100,732,96],[863,8,733,8],[864,6,734,4],[865,4,734,5],[866,2,734,5],[867,2,736,0,"exports"],[867,9,736,7],[867,10,736,8,"default"],[867,17,736,15],[867,20,736,18,"RealtimeClient"],[867,34,736,32],[868,0,736,33],[868,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","noop","RealtimeClient","constructor","_resolveFetch","_fetch","Promise.resolve.then$argument_0","Promise.resolve.then.then$argument_0","Promise.resolve.then.then._catch$argument_0","connect","endpointURL","disconnect","setTimeout$argument_0","conn.onclose","getChannels","removeChannel","removeAllChannels","channels.map$argument_0","log","connectionState","isConnected","isConnecting","isDisconnecting","channel","getChannels.find$argument_0","push","callback","encode$argument_1","setAuth","sendHeartbeat","onHeartbeat","flushSendBuffer","sendBuffer.forEach$argument_0","_makeRef","_leaveOpenTopic","channels.find$argument_0","_remove","channels.filter$argument_0","_onConnMessage","decode$argument_1","channels.filter.forEach$argument_0","_clearTimer","_clearAllTimers","_setupConnectionHandlers","conn.onopen","conn.onerror","conn.onmessage","_teardownConnection","channels.forEach$argument_0","_onConnOpen","_startHeartbeat","setInterval$argument_0","_startWorkerHeartbeat","workerRef.onerror","workerRef.onmessage","_onConnClose","_onConnError","_triggerChanError","_appendParams","_workerObjectUrl","_setConnectionState","_performAuth","_waitForAuthIfNeeded","_setAuthSafely","setAuth._catch$argument_0","_triggerStateCallbacks","stateChangeCallbacks.event.forEach$argument_0","_setupReconnectionTimer","timer_1._default$argument_0","_initializeOptions"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;aIQ,SJ;AKe;ICmB;6BCqC;yBCO,+DC,6BD,OE,sCF;2BGC;iBHG,CD;mBNK,4BM;SDC;KDY;IOI;KPuC;IQK;KRE;ISO;6CCO;aDE;gCEC;aFG;KTa;IYI;KZE;IaK;KbM;IcI;6DCC,kCD;KdI;IgBM;KhBE;IiBI;KjBW;IkBI;KlBE;ImBI;KnBE;IoBI;KpBE;IqBC;+CCE,gCD;KrBS;IuBM;yBCE;8BCC;aDG;SDC;KvBQ;I0BU;K1BQ;I2BI;uBjBc;aiBK;K3Ba;I4BC;K5BE;I6BI;oCCE,wBD;K7BG;I+BM;K/BS;IgCM;4CCC,6DD;KhCK;IkCQ;6CCC,gCD;KlCC;IoCE;qCCC;wBFgB,qCE;yBCC,kDD;SDE;KpCC;IuCK;KvCS;IwCK;KxCG;IyCK;2BCQ,wBD;4BEC,mCF;8BGC,qCH;4B9BC,mC8B;KzCC;I6CK;8BCS,+BD;K7CC;I+CE;K/Cc;IgDE;0CCE,0BD;KhDC;IkDE;iCCS;SDG;mCEC;SFI;KlDK;IqDE;KrDW;IsDE;KtDK;IuDE;8BTC,+DS;KvDC;IwDE;KxDO;IyDC;KzDU;I0DK;K1DQ;I2DK;kCbc;aaW;K3DE;I4DK;K5DI;I6DK;6BCC;SDE;K7DC;I+DK;qDCE;aDO;K/DK;IiEK;kDCC;uBxDC;awDK;SDC;KjEC;ImEK;gIvEoB;auEE;sHvEE;auEE;KnEU;CLC"}},"type":"js/module"}]}