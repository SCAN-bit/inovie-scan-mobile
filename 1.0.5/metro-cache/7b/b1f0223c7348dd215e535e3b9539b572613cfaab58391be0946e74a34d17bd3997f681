{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":556,"column":42,"index":24754}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":556,"column":42,"index":24754}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../lib/errors","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":12,"column":17,"index":775},"end":{"line":12,"column":41,"index":799}}],"key":"AaylMm75Ll8R4EdO82EiG2MnWxo="}},{"name":"../lib/fetch","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":13,"column":16,"index":817},"end":{"line":13,"column":39,"index":840}}],"key":"gq4d1d8cEf60Z9gIEga4EJaVdvo="}},{"name":"../lib/helpers","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":14,"column":18,"index":860},"end":{"line":14,"column":43,"index":885}}],"key":"Qui0Pd1l+7y+SOwxU35wutG9oJs="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0]);\n  var _createClass = require(_dependencyMap[1]);\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var errors_1 = require(_dependencyMap[2]);\n  var fetch_1 = require(_dependencyMap[3]);\n  var helpers_1 = require(_dependencyMap[4]);\n  var DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  var DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  var StorageFileApi = /*#__PURE__*/function () {\n    function StorageFileApi(url) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n      var fetch = arguments.length > 3 ? arguments[3] : undefined;\n      _classCallCheck(this, StorageFileApi);\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    return _createClass(StorageFileApi, [{\n      key: \"uploadOrUpdate\",\n      value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var body;\n            var options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n              'x-upsert': String(options.upsert)\n            });\n            var metadata = options.metadata;\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n              if (metadata) {\n                headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n              }\n            }\n            if (fileOptions === null || fileOptions === undefined ? undefined : fileOptions.headers) {\n              headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n            }\n            var cleanPath = this._removeEmptyFolders(path);\n            var _path = this._getFinalPath(cleanPath);\n            var data = yield (method == 'PUT' ? fetch_1.put : fetch_1.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n              headers\n            }, (options === null || options === undefined ? undefined : options.duplex) ? {\n              duplex: options.duplex\n            } : {}));\n            return {\n              data: {\n                path: cleanPath,\n                id: data.Id,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Uploads a file to an existing bucket.\n       *\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"upload\",\n      value: function upload(path, fileBody, fileOptions) {\n        return __awaiter(this, undefined, undefined, function* () {\n          return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Upload a file with a token generated from `createSignedUploadUrl`.\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param token The token generated from `createSignedUploadUrl`\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"uploadToSignedUrl\",\n      value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, undefined, undefined, function* () {\n          var cleanPath = this._removeEmptyFolders(path);\n          var _path = this._getFinalPath(cleanPath);\n          var url = new URL(this.url + `/object/upload/sign/${_path}`);\n          url.searchParams.set('token', token);\n          try {\n            var body;\n            var options = Object.assign({\n              upsert: DEFAULT_FILE_OPTIONS.upsert\n            }, fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), {\n              'x-upsert': String(options.upsert)\n            });\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n            }\n            var data = yield (0, fetch_1.put)(this.fetch, url.toString(), body, {\n              headers\n            });\n            return {\n              data: {\n                path: cleanPath,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed upload URL.\n       * Signed upload URLs can be used to upload files to the bucket without further authentication.\n       * They are valid for 2 hours.\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n       */\n    }, {\n      key: \"createSignedUploadUrl\",\n      value: function createSignedUploadUrl(path, options) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var headers = Object.assign({}, this.headers);\n            if (options === null || options === undefined ? undefined : options.upsert) {\n              headers['x-upsert'] = 'true';\n            }\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n              headers\n            });\n            var url = new URL(this.url + data.url);\n            var token = url.searchParams.get('token');\n            if (!token) {\n              throw new errors_1.StorageError('No token returned by API');\n            }\n            return {\n              data: {\n                signedUrl: url.toString(),\n                path,\n                token\n              },\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Replaces an existing file at the specified path with a new one.\n       *\n       * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"update\",\n      value: function update(path, fileBody, fileOptions) {\n        return __awaiter(this, undefined, undefined, function* () {\n          return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Moves an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"move\",\n      value: function move(fromPath, toPath, options) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/move`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === undefined ? undefined : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Copies an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"copy\",\n      value: function copy(fromPath, toPath, options) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/copy`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === undefined ? undefined : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data: {\n                path: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"createSignedUrl\",\n      value: function createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n              expiresIn\n            }, (options === null || options === undefined ? undefined : options.transform) ? {\n              transform: options.transform\n            } : {}), {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === undefined ? undefined : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            var signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n            data = {\n              signedUrl\n            };\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n       * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       */\n    }, {\n      key: \"createSignedUrls\",\n      value: function createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n              expiresIn,\n              paths\n            }, {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === undefined ? undefined : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            return {\n              data: data.map(datum => Object.assign(Object.assign({}, datum), {\n                signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n              })),\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n       *\n       * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"download\",\n      value: function download(path, options) {\n        return __awaiter(this, undefined, undefined, function* () {\n          var wantsTransformation = typeof (options === null || options === undefined ? undefined : options.transform) !== 'undefined';\n          var renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n          var transformationQuery = this.transformOptsToQueryString((options === null || options === undefined ? undefined : options.transform) || {});\n          var queryString = transformationQuery ? `?${transformationQuery}` : '';\n          try {\n            var _path = this._getFinalPath(path);\n            var res = yield (0, fetch_1.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n              headers: this.headers,\n              noResolveJson: true\n            });\n            var data = yield res.blob();\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Retrieves the details of an existing file.\n       * @param path\n       */\n    }, {\n      key: \"info\",\n      value: function info(path) {\n        return __awaiter(this, undefined, undefined, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            var data = yield (0, fetch_1.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: (0, helpers_1.recursiveToCamel)(data),\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Checks the existence of a file.\n       * @param path\n       */\n    }, {\n      key: \"exists\",\n      value: function exists(path) {\n        return __awaiter(this, undefined, undefined, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            yield (0, fetch_1.head)(this.fetch, `${this.url}/object/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: true,\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error) && error instanceof errors_1.StorageUnknownError) {\n              var originalError = error.originalError;\n              if ([400, 404].includes(originalError === null || originalError === undefined ? undefined : originalError.status)) {\n                return {\n                  data: false,\n                  error\n                };\n              }\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n       * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n       *\n       * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n       * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"getPublicUrl\",\n      value: function getPublicUrl(path, options) {\n        var _path = this._getFinalPath(path);\n        var _queryString = [];\n        var downloadQueryParam = (options === null || options === undefined ? undefined : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n        if (downloadQueryParam !== '') {\n          _queryString.push(downloadQueryParam);\n        }\n        var wantsTransformation = typeof (options === null || options === undefined ? undefined : options.transform) !== 'undefined';\n        var renderPath = wantsTransformation ? 'render/image' : 'object';\n        var transformationQuery = this.transformOptsToQueryString((options === null || options === undefined ? undefined : options.transform) || {});\n        if (transformationQuery !== '') {\n          _queryString.push(transformationQuery);\n        }\n        var queryString = _queryString.join('&');\n        if (queryString !== '') {\n          queryString = `?${queryString}`;\n        }\n        return {\n          data: {\n            publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n          }\n        };\n      }\n      /**\n       * Deletes files within the same bucket\n       *\n       * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n       */\n    }, {\n      key: \"remove\",\n      value: function remove(paths) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var data = yield (0, fetch_1.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n              prefixes: paths\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Get file metadata\n       * @param id the file id to retrieve metadata\n       */\n      // async getMetadata(\n      //   id: string\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Update file metadata\n       * @param id the file id to update metadata\n       * @param meta the new file metadata\n       */\n      // async updateMetadata(\n      //   id: string,\n      //   meta: Metadata\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await post(\n      //       this.fetch,\n      //       `${this.url}/metadata/${id}`,\n      //       { ...meta },\n      //       { headers: this.headers }\n      //     )\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Lists all the files within a bucket.\n       * @param path The folder path.\n       * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n       */\n    }, {\n      key: \"list\",\n      value: function list(path, options, parameters) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n              prefix: path || ''\n            });\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * @experimental this method signature might change in the future\n       * @param options search options\n       * @param parameters\n       */\n    }, {\n      key: \"listV2\",\n      value: function listV2(options, parameters) {\n        return __awaiter(this, undefined, undefined, function* () {\n          try {\n            var body = Object.assign({}, options);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n    }, {\n      key: \"encodeMetadata\",\n      value: function encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n      }\n    }, {\n      key: \"toBase64\",\n      value: function toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n          return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n      }\n    }, {\n      key: \"_getFinalPath\",\n      value: function _getFinalPath(path) {\n        return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n      }\n    }, {\n      key: \"_removeEmptyFolders\",\n      value: function _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n      }\n    }, {\n      key: \"transformOptsToQueryString\",\n      value: function transformOptsToQueryString(transform) {\n        var params = [];\n        if (transform.width) {\n          params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n          params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n          params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n          params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n          params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n      }\n    }]);\n  }();\n  exports.default = StorageFileApi;\n});","lineCount":729,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,2,0],[6,6,2,4,"__awaiter"],[6,15,2,13],[6,18,2,17],[6,22,2,21],[6,26,2,25],[6,30,2,29],[6,31,2,30,"__awaiter"],[6,40,2,39],[6,44,2,44],[6,54,2,54,"thisArg"],[6,61,2,61],[6,63,2,63,"_arguments"],[6,73,2,73],[6,75,2,75,"P"],[6,76,2,76],[6,78,2,78,"generator"],[6,87,2,87],[6,89,2,89],[7,4,3,4],[7,13,3,13,"adopt"],[7,18,3,18,"adopt"],[7,19,3,19,"value"],[7,24,3,24],[7,26,3,26],[8,6,3,28],[8,13,3,35,"value"],[8,18,3,40],[8,30,3,52,"P"],[8,31,3,53],[8,34,3,56,"value"],[8,39,3,61],[8,42,3,64],[8,46,3,68,"P"],[8,47,3,69],[8,48,3,70],[8,58,3,80,"resolve"],[8,65,3,87],[8,67,3,89],[9,8,3,91,"resolve"],[9,15,3,98],[9,16,3,99,"value"],[9,21,3,104],[9,22,3,105],[10,6,3,107],[10,7,3,108],[10,8,3,109],[11,4,3,111],[12,4,4,4],[12,11,4,11],[12,16,4,16,"P"],[12,17,4,17],[12,22,4,22,"P"],[12,23,4,23],[12,26,4,26,"Promise"],[12,33,4,33],[12,34,4,34],[12,36,4,36],[12,46,4,46,"resolve"],[12,53,4,53],[12,55,4,55,"reject"],[12,61,4,61],[12,63,4,63],[13,6,5,8],[13,15,5,17,"fulfilled"],[13,24,5,26,"fulfilled"],[13,25,5,27,"value"],[13,30,5,32],[13,32,5,34],[14,8,5,36],[14,12,5,40],[15,10,5,42,"step"],[15,14,5,46],[15,15,5,47,"generator"],[15,24,5,56],[15,25,5,57,"next"],[15,29,5,61],[15,30,5,62,"value"],[15,35,5,67],[15,36,5,68],[15,37,5,69],[16,8,5,71],[16,9,5,72],[16,10,5,73],[16,17,5,80,"e"],[16,18,5,81],[16,20,5,83],[17,10,5,85,"reject"],[17,16,5,91],[17,17,5,92,"e"],[17,18,5,93],[17,19,5,94],[18,8,5,96],[19,6,5,98],[20,6,6,8],[20,15,6,17,"rejected"],[20,23,6,25,"rejected"],[20,24,6,26,"value"],[20,29,6,31],[20,31,6,33],[21,8,6,35],[21,12,6,39],[22,10,6,41,"step"],[22,14,6,45],[22,15,6,46,"generator"],[22,24,6,55],[22,25,6,56],[22,32,6,63],[22,33,6,64],[22,34,6,65,"value"],[22,39,6,70],[22,40,6,71],[22,41,6,72],[23,8,6,74],[23,9,6,75],[23,10,6,76],[23,17,6,83,"e"],[23,18,6,84],[23,20,6,86],[24,10,6,88,"reject"],[24,16,6,94],[24,17,6,95,"e"],[24,18,6,96],[24,19,6,97],[25,8,6,99],[26,6,6,101],[27,6,7,8],[27,15,7,17,"step"],[27,19,7,21,"step"],[27,20,7,22,"result"],[27,26,7,28],[27,28,7,30],[28,8,7,32,"result"],[28,14,7,38],[28,15,7,39,"done"],[28,19,7,43],[28,22,7,46,"resolve"],[28,29,7,53],[28,30,7,54,"result"],[28,36,7,60],[28,37,7,61,"value"],[28,42,7,66],[28,43,7,67],[28,46,7,70,"adopt"],[28,51,7,75],[28,52,7,76,"result"],[28,58,7,82],[28,59,7,83,"value"],[28,64,7,88],[28,65,7,89],[28,66,7,90,"then"],[28,70,7,94],[28,71,7,95,"fulfilled"],[28,80,7,104],[28,82,7,106,"rejected"],[28,90,7,114],[28,91,7,115],[29,6,7,117],[30,6,8,8,"step"],[30,10,8,12],[30,11,8,13],[30,12,8,14,"generator"],[30,21,8,23],[30,24,8,26,"generator"],[30,33,8,35],[30,34,8,36,"apply"],[30,39,8,41],[30,40,8,42,"thisArg"],[30,47,8,49],[30,49,8,51,"_arguments"],[30,59,8,61],[30,63,8,65],[30,65,8,67],[30,66,8,68],[30,68,8,70,"next"],[30,72,8,74],[30,73,8,75],[30,74,8,76],[30,75,8,77],[31,4,9,4],[31,5,9,5],[31,6,9,6],[32,2,10,0],[32,3,10,1],[33,2,11,0,"Object"],[33,8,11,6],[33,9,11,7,"defineProperty"],[33,23,11,21],[33,24,11,22,"exports"],[33,31,11,29],[33,33,11,31],[33,45,11,43],[33,47,11,45],[34,4,11,47,"value"],[34,9,11,52],[34,11,11,54],[35,2,11,59],[35,3,11,60],[35,4,11,61],[36,2,12,0],[36,6,12,6,"errors_1"],[36,14,12,14],[36,17,12,17,"require"],[36,24,12,24],[36,25,12,24,"_dependencyMap"],[36,39,12,24],[36,42,12,40],[36,43,12,41],[37,2,13,0],[37,6,13,6,"fetch_1"],[37,13,13,13],[37,16,13,16,"require"],[37,23,13,23],[37,24,13,23,"_dependencyMap"],[37,38,13,23],[37,41,13,38],[37,42,13,39],[38,2,14,0],[38,6,14,6,"helpers_1"],[38,15,14,15],[38,18,14,18,"require"],[38,25,14,25],[38,26,14,25,"_dependencyMap"],[38,40,14,25],[38,43,14,42],[38,44,14,43],[39,2,15,0],[39,6,15,6,"DEFAULT_SEARCH_OPTIONS"],[39,28,15,28],[39,31,15,31],[40,4,16,4,"limit"],[40,9,16,9],[40,11,16,11],[40,14,16,14],[41,4,17,4,"offset"],[41,10,17,10],[41,12,17,12],[41,13,17,13],[42,4,18,4,"sortBy"],[42,10,18,10],[42,12,18,12],[43,6,19,8,"column"],[43,12,19,14],[43,14,19,16],[43,20,19,22],[44,6,20,8,"order"],[44,11,20,13],[44,13,20,15],[45,4,21,4],[46,2,22,0],[46,3,22,1],[47,2,23,0],[47,6,23,6,"DEFAULT_FILE_OPTIONS"],[47,26,23,26],[47,29,23,29],[48,4,24,4,"cacheControl"],[48,16,24,16],[48,18,24,18],[48,24,24,24],[49,4,25,4,"contentType"],[49,15,25,15],[49,17,25,17],[49,43,25,43],[50,4,26,4,"upsert"],[50,10,26,10],[50,12,26,12],[51,2,27,0],[51,3,27,1],[52,2,27,2],[52,6,28,6,"StorageFileApi"],[52,20,28,20],[53,4,29,4],[53,13,29,4,"StorageFileApi"],[53,28,29,16,"url"],[53,31,29,19],[53,33,29,52],[54,6,29,52],[54,10,29,21,"headers"],[54,17,29,28],[54,20,29,28,"arguments"],[54,29,29,28],[54,30,29,28,"length"],[54,36,29,28],[54,44,29,28,"arguments"],[54,53,29,28],[54,61,29,28,"undefined"],[54,70,29,28],[54,73,29,28,"arguments"],[54,82,29,28],[54,88,29,31],[54,89,29,32],[54,90,29,33],[55,6,29,33],[55,10,29,35,"bucketId"],[55,18,29,43],[55,21,29,43,"arguments"],[55,30,29,43],[55,31,29,43,"length"],[55,37,29,43],[55,44,29,43,"arguments"],[55,53,29,43],[55,59,29,43,"undefined"],[55,68,29,43],[56,6,29,43],[56,10,29,45,"fetch"],[56,15,29,50],[56,18,29,50,"arguments"],[56,27,29,50],[56,28,29,50,"length"],[56,34,29,50],[56,41,29,50,"arguments"],[56,50,29,50],[56,56,29,50,"undefined"],[56,65,29,50],[57,6,29,50,"_classCallCheck"],[57,21,29,50],[57,28,29,50,"StorageFileApi"],[57,42,29,50],[58,6,30,8],[58,10,30,12],[58,11,30,13,"url"],[58,14,30,16],[58,17,30,19,"url"],[58,20,30,22],[59,6,31,8],[59,10,31,12],[59,11,31,13,"headers"],[59,18,31,20],[59,21,31,23,"headers"],[59,28,31,30],[60,6,32,8],[60,10,32,12],[60,11,32,13,"bucketId"],[60,19,32,21],[60,22,32,24,"bucketId"],[60,30,32,32],[61,6,33,8],[61,10,33,12],[61,11,33,13,"fetch"],[61,16,33,18],[61,19,33,21],[61,20,33,22],[61,21,33,23],[61,23,33,25,"helpers_1"],[61,32,33,34],[61,33,33,35,"resolveFetch"],[61,45,33,47],[61,47,33,49,"fetch"],[61,52,33,54],[61,53,33,55],[62,4,34,4],[63,4,35,4],[64,0,36,0],[65,0,37,0],[66,0,38,0],[67,0,39,0],[68,0,40,0],[69,0,41,0],[70,4,35,4],[70,11,35,4,"_createClass"],[70,23,35,4],[70,24,35,4,"StorageFileApi"],[70,38,35,4],[71,6,35,4,"key"],[71,9,35,4],[72,6,35,4,"value"],[72,11,35,4],[72,13,42,4],[72,22,42,4,"uploadOrUpdate"],[72,36,42,18,"uploadOrUpdate"],[72,37,42,19,"method"],[72,43,42,25],[72,45,42,27,"path"],[72,49,42,31],[72,51,42,33,"fileBody"],[72,59,42,41],[72,61,42,43,"fileOptions"],[72,72,42,54],[72,74,42,56],[73,8,43,8],[73,15,43,15,"__awaiter"],[73,24,43,24],[73,25,43,25],[73,29,43,29],[73,31,43,29,"undefined"],[73,40,43,29],[73,42,43,29,"undefined"],[73,51,43,29],[73,53,43,47],[73,66,43,60],[74,10,44,12],[74,14,44,16],[75,12,45,16],[75,16,45,20,"body"],[75,20,45,24],[76,12,46,16],[76,16,46,22,"options"],[76,23,46,29],[76,26,46,32,"Object"],[76,32,46,38],[76,33,46,39,"assign"],[76,39,46,45],[76,40,46,46,"Object"],[76,46,46,52],[76,47,46,53,"assign"],[76,53,46,59],[76,54,46,60],[76,55,46,61],[76,56,46,62],[76,58,46,64,"DEFAULT_FILE_OPTIONS"],[76,78,46,84],[76,79,46,85],[76,81,46,87,"fileOptions"],[76,92,46,98],[76,93,46,99],[77,12,47,16],[77,16,47,20,"headers"],[77,23,47,27],[77,26,47,30,"Object"],[77,32,47,36],[77,33,47,37,"assign"],[77,39,47,43],[77,40,47,44,"Object"],[77,46,47,50],[77,47,47,51,"assign"],[77,53,47,57],[77,54,47,58],[77,55,47,59],[77,56,47,60],[77,58,47,62],[77,62,47,66],[77,63,47,67,"headers"],[77,70,47,74],[77,71,47,75],[77,73,47,78,"method"],[77,79,47,84],[77,84,47,89],[77,90,47,95],[77,94,47,99],[78,14,47,101],[78,24,47,111],[78,26,47,113,"String"],[78,32,47,119],[78,33,47,120,"options"],[78,40,47,127],[78,41,47,128,"upsert"],[78,47,47,134],[79,12,47,136],[79,13,47,138],[79,14,47,139],[80,12,48,16],[80,16,48,22,"metadata"],[80,24,48,30],[80,27,48,33,"options"],[80,34,48,40],[80,35,48,41,"metadata"],[80,43,48,49],[81,12,49,16],[81,16,49,20],[81,23,49,27,"Blob"],[81,27,49,31],[81,32,49,36],[81,43,49,47],[81,47,49,51,"fileBody"],[81,55,49,59],[81,67,49,71,"Blob"],[81,71,49,75],[81,73,49,77],[82,14,50,20,"body"],[82,18,50,24],[82,21,50,27],[82,25,50,31,"FormData"],[82,33,50,39],[82,34,50,40],[82,35,50,41],[83,14,51,20,"body"],[83,18,51,24],[83,19,51,25,"append"],[83,25,51,31],[83,26,51,32],[83,40,51,46],[83,42,51,48,"options"],[83,49,51,55],[83,50,51,56,"cacheControl"],[83,62,51,68],[83,63,51,69],[84,14,52,20],[84,18,52,24,"metadata"],[84,26,52,32],[84,28,52,34],[85,16,53,24,"body"],[85,20,53,28],[85,21,53,29,"append"],[85,27,53,35],[85,28,53,36],[85,38,53,46],[85,40,53,48],[85,44,53,52],[85,45,53,53,"encodeMetadata"],[85,59,53,67],[85,60,53,68,"metadata"],[85,68,53,76],[85,69,53,77],[85,70,53,78],[86,14,54,20],[87,14,55,20,"body"],[87,18,55,24],[87,19,55,25,"append"],[87,25,55,31],[87,26,55,32],[87,28,55,34],[87,30,55,36,"fileBody"],[87,38,55,44],[87,39,55,45],[88,12,56,16],[88,13,56,17],[88,19,57,21],[88,23,57,25],[88,30,57,32,"FormData"],[88,38,57,40],[88,43,57,45],[88,54,57,56],[88,58,57,60,"fileBody"],[88,66,57,68],[88,78,57,80,"FormData"],[88,86,57,88],[88,88,57,90],[89,14,58,20,"body"],[89,18,58,24],[89,21,58,27,"fileBody"],[89,29,58,35],[90,14,59,20,"body"],[90,18,59,24],[90,19,59,25,"append"],[90,25,59,31],[90,26,59,32],[90,40,59,46],[90,42,59,48,"options"],[90,49,59,55],[90,50,59,56,"cacheControl"],[90,62,59,68],[90,63,59,69],[91,14,60,20],[91,18,60,24,"metadata"],[91,26,60,32],[91,28,60,34],[92,16,61,24,"body"],[92,20,61,28],[92,21,61,29,"append"],[92,27,61,35],[92,28,61,36],[92,38,61,46],[92,40,61,48],[92,44,61,52],[92,45,61,53,"encodeMetadata"],[92,59,61,67],[92,60,61,68,"metadata"],[92,68,61,76],[92,69,61,77],[92,70,61,78],[93,14,62,20],[94,12,63,16],[94,13,63,17],[94,19,64,21],[95,14,65,20,"body"],[95,18,65,24],[95,21,65,27,"fileBody"],[95,29,65,35],[96,14,66,20,"headers"],[96,21,66,27],[96,22,66,28],[96,37,66,43],[96,38,66,44],[96,41,66,47],[96,52,66,58,"options"],[96,59,66,65],[96,60,66,66,"cacheControl"],[96,72,66,78],[96,74,66,80],[97,14,67,20,"headers"],[97,21,67,27],[97,22,67,28],[97,36,67,42],[97,37,67,43],[97,40,67,46,"options"],[97,47,67,53],[97,48,67,54,"contentType"],[97,59,67,65],[98,14,68,20],[98,18,68,24,"metadata"],[98,26,68,32],[98,28,68,34],[99,16,69,24,"headers"],[99,23,69,31],[99,24,69,32],[99,36,69,44],[99,37,69,45],[99,40,69,48],[99,44,69,52],[99,45,69,53,"toBase64"],[99,53,69,61],[99,54,69,62],[99,58,69,66],[99,59,69,67,"encodeMetadata"],[99,73,69,81],[99,74,69,82,"metadata"],[99,82,69,90],[99,83,69,91],[99,84,69,92],[100,14,70,20],[101,12,71,16],[102,12,72,16],[102,16,72,20,"fileOptions"],[102,27,72,31],[102,32,72,36],[102,36,72,40],[102,40,72,44,"fileOptions"],[102,51,72,55],[102,56,72,55,"undefined"],[102,65,72,66],[102,68,72,66,"undefined"],[102,77,72,66],[102,80,72,78,"fileOptions"],[102,91,72,89],[102,92,72,90,"headers"],[102,99,72,97],[102,101,72,99],[103,14,73,20,"headers"],[103,21,73,27],[103,24,73,30,"Object"],[103,30,73,36],[103,31,73,37,"assign"],[103,37,73,43],[103,38,73,44,"Object"],[103,44,73,50],[103,45,73,51,"assign"],[103,51,73,57],[103,52,73,58],[103,53,73,59],[103,54,73,60],[103,56,73,62,"headers"],[103,63,73,69],[103,64,73,70],[103,66,73,72,"fileOptions"],[103,77,73,83],[103,78,73,84,"headers"],[103,85,73,91],[103,86,73,92],[104,12,74,16],[105,12,75,16],[105,16,75,22,"cleanPath"],[105,25,75,31],[105,28,75,34],[105,32,75,38],[105,33,75,39,"_removeEmptyFolders"],[105,52,75,58],[105,53,75,59,"path"],[105,57,75,63],[105,58,75,64],[106,12,76,16],[106,16,76,22,"_path"],[106,21,76,27],[106,24,76,30],[106,28,76,34],[106,29,76,35,"_getFinalPath"],[106,42,76,48],[106,43,76,49,"cleanPath"],[106,52,76,58],[106,53,76,59],[107,12,77,16],[107,16,77,22,"data"],[107,20,77,26],[107,23,77,29],[107,29,77,35],[107,30,77,36,"method"],[107,36,77,42],[107,40,77,46],[107,45,77,51],[107,48,77,54,"fetch_1"],[107,55,77,61],[107,56,77,62,"put"],[107,59,77,65],[107,62,77,68,"fetch_1"],[107,69,77,75],[107,70,77,76,"post"],[107,74,77,80],[107,76,77,82],[107,80,77,86],[107,81,77,87,"fetch"],[107,86,77,92],[107,88,77,94],[107,91,77,97],[107,95,77,101],[107,96,77,102,"url"],[107,99,77,105],[107,110,77,116,"_path"],[107,115,77,121],[107,117,77,123],[107,119,77,125,"body"],[107,123,77,129],[107,125,77,131,"Object"],[107,131,77,137],[107,132,77,138,"assign"],[107,138,77,144],[107,139,77,145],[108,14,77,147,"headers"],[109,12,77,155],[109,13,77,156],[109,15,77,159],[109,16,77,160,"options"],[109,23,77,167],[109,28,77,172],[109,32,77,176],[109,36,77,180,"options"],[109,43,77,187],[109,48,77,187,"undefined"],[109,57,77,198],[109,60,77,198,"undefined"],[109,69,77,198],[109,72,77,210,"options"],[109,79,77,217],[109,80,77,218,"duplex"],[109,86,77,224],[109,90,77,228],[110,14,77,230,"duplex"],[110,20,77,236],[110,22,77,238,"options"],[110,29,77,245],[110,30,77,246,"duplex"],[111,12,77,253],[111,13,77,254],[111,16,77,257],[111,17,77,258],[111,18,77,260],[111,19,77,261],[111,20,77,262],[112,12,78,16],[112,19,78,23],[113,14,79,20,"data"],[113,18,79,24],[113,20,79,26],[114,16,79,28,"path"],[114,20,79,32],[114,22,79,34,"cleanPath"],[114,31,79,43],[115,16,79,45,"id"],[115,18,79,47],[115,20,79,49,"data"],[115,24,79,53],[115,25,79,54,"Id"],[115,27,79,56],[116,16,79,58,"fullPath"],[116,24,79,66],[116,26,79,68,"data"],[116,30,79,72],[116,31,79,73,"Key"],[117,14,79,77],[117,15,79,78],[118,14,80,20,"error"],[118,19,80,25],[118,21,80,27],[119,12,81,16],[119,13,81,17],[120,10,82,12],[120,11,82,13],[120,12,83,12],[120,19,83,19,"error"],[120,24,83,24],[120,26,83,26],[121,12,84,16],[121,16,84,20],[121,17,84,21],[121,18,84,22],[121,20,84,24,"errors_1"],[121,28,84,32],[121,29,84,33,"isStorageError"],[121,43,84,47],[121,45,84,49,"error"],[121,50,84,54],[121,51,84,55],[121,53,84,57],[122,14,85,20],[122,21,85,27],[123,16,85,29,"data"],[123,20,85,33],[123,22,85,35],[123,26,85,39],[124,16,85,41,"error"],[125,14,85,47],[125,15,85,48],[126,12,86,16],[127,12,87,16],[127,18,87,22,"error"],[127,23,87,27],[128,10,88,12],[129,8,89,8],[129,9,89,9],[129,10,89,10],[130,6,90,4],[131,6,91,4],[132,0,92,0],[133,0,93,0],[134,0,94,0],[135,0,95,0],[136,0,96,0],[137,4,91,4],[138,6,91,4,"key"],[138,9,91,4],[139,6,91,4,"value"],[139,11,91,4],[139,13,97,4],[139,22,97,4,"upload"],[139,28,97,10,"upload"],[139,29,97,11,"path"],[139,33,97,15],[139,35,97,17,"fileBody"],[139,43,97,25],[139,45,97,27,"fileOptions"],[139,56,97,38],[139,58,97,40],[140,8,98,8],[140,15,98,15,"__awaiter"],[140,24,98,24],[140,25,98,25],[140,29,98,29],[140,31,98,29,"undefined"],[140,40,98,29],[140,42,98,29,"undefined"],[140,51,98,29],[140,53,98,47],[140,66,98,60],[141,10,99,12],[141,17,99,19],[141,21,99,23],[141,22,99,24,"uploadOrUpdate"],[141,36,99,38],[141,37,99,39],[141,43,99,45],[141,45,99,47,"path"],[141,49,99,51],[141,51,99,53,"fileBody"],[141,59,99,61],[141,61,99,63,"fileOptions"],[141,72,99,74],[141,73,99,75],[142,8,100,8],[142,9,100,9],[142,10,100,10],[143,6,101,4],[144,6,102,4],[145,0,103,0],[146,0,104,0],[147,0,105,0],[148,0,106,0],[149,0,107,0],[150,4,102,4],[151,6,102,4,"key"],[151,9,102,4],[152,6,102,4,"value"],[152,11,102,4],[152,13,108,4],[152,22,108,4,"uploadToSignedUrl"],[152,39,108,21,"uploadToSignedUrl"],[152,40,108,22,"path"],[152,44,108,26],[152,46,108,28,"token"],[152,51,108,33],[152,53,108,35,"fileBody"],[152,61,108,43],[152,63,108,45,"fileOptions"],[152,74,108,56],[152,76,108,58],[153,8,109,8],[153,15,109,15,"__awaiter"],[153,24,109,24],[153,25,109,25],[153,29,109,29],[153,31,109,29,"undefined"],[153,40,109,29],[153,42,109,29,"undefined"],[153,51,109,29],[153,53,109,47],[153,66,109,60],[154,10,110,12],[154,14,110,18,"cleanPath"],[154,23,110,27],[154,26,110,30],[154,30,110,34],[154,31,110,35,"_removeEmptyFolders"],[154,50,110,54],[154,51,110,55,"path"],[154,55,110,59],[154,56,110,60],[155,10,111,12],[155,14,111,18,"_path"],[155,19,111,23],[155,22,111,26],[155,26,111,30],[155,27,111,31,"_getFinalPath"],[155,40,111,44],[155,41,111,45,"cleanPath"],[155,50,111,54],[155,51,111,55],[156,10,112,12],[156,14,112,18,"url"],[156,17,112,21],[156,20,112,24],[156,24,112,28,"URL"],[156,27,112,31],[156,28,112,32],[156,32,112,36],[156,33,112,37,"url"],[156,36,112,40],[156,39,112,43],[156,62,112,66,"_path"],[156,67,112,71],[156,69,112,73],[156,70,112,74],[157,10,113,12,"url"],[157,13,113,15],[157,14,113,16,"searchParams"],[157,26,113,28],[157,27,113,29,"set"],[157,30,113,32],[157,31,113,33],[157,38,113,40],[157,40,113,42,"token"],[157,45,113,47],[157,46,113,48],[158,10,114,12],[158,14,114,16],[159,12,115,16],[159,16,115,20,"body"],[159,20,115,24],[160,12,116,16],[160,16,116,22,"options"],[160,23,116,29],[160,26,116,32,"Object"],[160,32,116,38],[160,33,116,39,"assign"],[160,39,116,45],[160,40,116,46],[161,14,116,48,"upsert"],[161,20,116,54],[161,22,116,56,"DEFAULT_FILE_OPTIONS"],[161,42,116,76],[161,43,116,77,"upsert"],[162,12,116,84],[162,13,116,85],[162,15,116,87,"fileOptions"],[162,26,116,98],[162,27,116,99],[163,12,117,16],[163,16,117,22,"headers"],[163,23,117,29],[163,26,117,32,"Object"],[163,32,117,38],[163,33,117,39,"assign"],[163,39,117,45],[163,40,117,46,"Object"],[163,46,117,52],[163,47,117,53,"assign"],[163,53,117,59],[163,54,117,60],[163,55,117,61],[163,56,117,62],[163,58,117,64],[163,62,117,68],[163,63,117,69,"headers"],[163,70,117,76],[163,71,117,77],[163,73,117,79],[164,14,117,81],[164,24,117,91],[164,26,117,93,"String"],[164,32,117,99],[164,33,117,100,"options"],[164,40,117,107],[164,41,117,108,"upsert"],[164,47,117,114],[165,12,117,116],[165,13,117,117],[165,14,117,118],[166,12,118,16],[166,16,118,20],[166,23,118,27,"Blob"],[166,27,118,31],[166,32,118,36],[166,43,118,47],[166,47,118,51,"fileBody"],[166,55,118,59],[166,67,118,71,"Blob"],[166,71,118,75],[166,73,118,77],[167,14,119,20,"body"],[167,18,119,24],[167,21,119,27],[167,25,119,31,"FormData"],[167,33,119,39],[167,34,119,40],[167,35,119,41],[168,14,120,20,"body"],[168,18,120,24],[168,19,120,25,"append"],[168,25,120,31],[168,26,120,32],[168,40,120,46],[168,42,120,48,"options"],[168,49,120,55],[168,50,120,56,"cacheControl"],[168,62,120,68],[168,63,120,69],[169,14,121,20,"body"],[169,18,121,24],[169,19,121,25,"append"],[169,25,121,31],[169,26,121,32],[169,28,121,34],[169,30,121,36,"fileBody"],[169,38,121,44],[169,39,121,45],[170,12,122,16],[170,13,122,17],[170,19,123,21],[170,23,123,25],[170,30,123,32,"FormData"],[170,38,123,40],[170,43,123,45],[170,54,123,56],[170,58,123,60,"fileBody"],[170,66,123,68],[170,78,123,80,"FormData"],[170,86,123,88],[170,88,123,90],[171,14,124,20,"body"],[171,18,124,24],[171,21,124,27,"fileBody"],[171,29,124,35],[172,14,125,20,"body"],[172,18,125,24],[172,19,125,25,"append"],[172,25,125,31],[172,26,125,32],[172,40,125,46],[172,42,125,48,"options"],[172,49,125,55],[172,50,125,56,"cacheControl"],[172,62,125,68],[172,63,125,69],[173,12,126,16],[173,13,126,17],[173,19,127,21],[174,14,128,20,"body"],[174,18,128,24],[174,21,128,27,"fileBody"],[174,29,128,35],[175,14,129,20,"headers"],[175,21,129,27],[175,22,129,28],[175,37,129,43],[175,38,129,44],[175,41,129,47],[175,52,129,58,"options"],[175,59,129,65],[175,60,129,66,"cacheControl"],[175,72,129,78],[175,74,129,80],[176,14,130,20,"headers"],[176,21,130,27],[176,22,130,28],[176,36,130,42],[176,37,130,43],[176,40,130,46,"options"],[176,47,130,53],[176,48,130,54,"contentType"],[176,59,130,65],[177,12,131,16],[178,12,132,16],[178,16,132,22,"data"],[178,20,132,26],[178,23,132,29],[178,29,132,35],[178,30,132,36],[178,31,132,37],[178,33,132,39,"fetch_1"],[178,40,132,46],[178,41,132,47,"put"],[178,44,132,50],[178,46,132,52],[178,50,132,56],[178,51,132,57,"fetch"],[178,56,132,62],[178,58,132,64,"url"],[178,61,132,67],[178,62,132,68,"toString"],[178,70,132,76],[178,71,132,77],[178,72,132,78],[178,74,132,80,"body"],[178,78,132,84],[178,80,132,86],[179,14,132,88,"headers"],[180,12,132,96],[180,13,132,97],[180,14,132,98],[181,12,133,16],[181,19,133,23],[182,14,134,20,"data"],[182,18,134,24],[182,20,134,26],[183,16,134,28,"path"],[183,20,134,32],[183,22,134,34,"cleanPath"],[183,31,134,43],[184,16,134,45,"fullPath"],[184,24,134,53],[184,26,134,55,"data"],[184,30,134,59],[184,31,134,60,"Key"],[185,14,134,64],[185,15,134,65],[186,14,135,20,"error"],[186,19,135,25],[186,21,135,27],[187,12,136,16],[187,13,136,17],[188,10,137,12],[188,11,137,13],[188,12,138,12],[188,19,138,19,"error"],[188,24,138,24],[188,26,138,26],[189,12,139,16],[189,16,139,20],[189,17,139,21],[189,18,139,22],[189,20,139,24,"errors_1"],[189,28,139,32],[189,29,139,33,"isStorageError"],[189,43,139,47],[189,45,139,49,"error"],[189,50,139,54],[189,51,139,55],[189,53,139,57],[190,14,140,20],[190,21,140,27],[191,16,140,29,"data"],[191,20,140,33],[191,22,140,35],[191,26,140,39],[192,16,140,41,"error"],[193,14,140,47],[193,15,140,48],[194,12,141,16],[195,12,142,16],[195,18,142,22,"error"],[195,23,142,27],[196,10,143,12],[197,8,144,8],[197,9,144,9],[197,10,144,10],[198,6,145,4],[199,6,146,4],[200,0,147,0],[201,0,148,0],[202,0,149,0],[203,0,150,0],[204,0,151,0],[205,0,152,0],[206,4,146,4],[207,6,146,4,"key"],[207,9,146,4],[208,6,146,4,"value"],[208,11,146,4],[208,13,153,4],[208,22,153,4,"createSignedUploadUrl"],[208,43,153,25,"createSignedUploadUrl"],[208,44,153,26,"path"],[208,48,153,30],[208,50,153,32,"options"],[208,57,153,39],[208,59,153,41],[209,8,154,8],[209,15,154,15,"__awaiter"],[209,24,154,24],[209,25,154,25],[209,29,154,29],[209,31,154,29,"undefined"],[209,40,154,29],[209,42,154,29,"undefined"],[209,51,154,29],[209,53,154,47],[209,66,154,60],[210,10,155,12],[210,14,155,16],[211,12,156,16],[211,16,156,20,"_path"],[211,21,156,25],[211,24,156,28],[211,28,156,32],[211,29,156,33,"_getFinalPath"],[211,42,156,46],[211,43,156,47,"path"],[211,47,156,51],[211,48,156,52],[212,12,157,16],[212,16,157,22,"headers"],[212,23,157,29],[212,26,157,32,"Object"],[212,32,157,38],[212,33,157,39,"assign"],[212,39,157,45],[212,40,157,46],[212,41,157,47],[212,42,157,48],[212,44,157,50],[212,48,157,54],[212,49,157,55,"headers"],[212,56,157,62],[212,57,157,63],[213,12,158,16],[213,16,158,20,"options"],[213,23,158,27],[213,28,158,32],[213,32,158,36],[213,36,158,40,"options"],[213,43,158,47],[213,48,158,47,"undefined"],[213,57,158,58],[213,60,158,58,"undefined"],[213,69,158,58],[213,72,158,70,"options"],[213,79,158,77],[213,80,158,78,"upsert"],[213,86,158,84],[213,88,158,86],[214,14,159,20,"headers"],[214,21,159,27],[214,22,159,28],[214,32,159,38],[214,33,159,39],[214,36,159,42],[214,42,159,48],[215,12,160,16],[216,12,161,16],[216,16,161,22,"data"],[216,20,161,26],[216,23,161,29],[216,29,161,35],[216,30,161,36],[216,31,161,37],[216,33,161,39,"fetch_1"],[216,40,161,46],[216,41,161,47,"post"],[216,45,161,51],[216,47,161,53],[216,51,161,57],[216,52,161,58,"fetch"],[216,57,161,63],[216,59,161,65],[216,62,161,68],[216,66,161,72],[216,67,161,73,"url"],[216,70,161,76],[216,93,161,99,"_path"],[216,98,161,104],[216,100,161,106],[216,102,161,108],[216,103,161,109],[216,104,161,110],[216,106,161,112],[217,14,161,114,"headers"],[218,12,161,122],[218,13,161,123],[218,14,161,124],[219,12,162,16],[219,16,162,22,"url"],[219,19,162,25],[219,22,162,28],[219,26,162,32,"URL"],[219,29,162,35],[219,30,162,36],[219,34,162,40],[219,35,162,41,"url"],[219,38,162,44],[219,41,162,47,"data"],[219,45,162,51],[219,46,162,52,"url"],[219,49,162,55],[219,50,162,56],[220,12,163,16],[220,16,163,22,"token"],[220,21,163,27],[220,24,163,30,"url"],[220,27,163,33],[220,28,163,34,"searchParams"],[220,40,163,46],[220,41,163,47,"get"],[220,44,163,50],[220,45,163,51],[220,52,163,58],[220,53,163,59],[221,12,164,16],[221,16,164,20],[221,17,164,21,"token"],[221,22,164,26],[221,24,164,28],[222,14,165,20],[222,20,165,26],[222,24,165,30,"errors_1"],[222,32,165,38],[222,33,165,39,"StorageError"],[222,45,165,51],[222,46,165,52],[222,72,165,78],[222,73,165,79],[223,12,166,16],[224,12,167,16],[224,19,167,23],[225,14,167,25,"data"],[225,18,167,29],[225,20,167,31],[226,16,167,33,"signedUrl"],[226,25,167,42],[226,27,167,44,"url"],[226,30,167,47],[226,31,167,48,"toString"],[226,39,167,56],[226,40,167,57],[226,41,167,58],[227,16,167,60,"path"],[227,20,167,64],[228,16,167,66,"token"],[229,14,167,72],[229,15,167,73],[230,14,167,75,"error"],[230,19,167,80],[230,21,167,82],[231,12,167,87],[231,13,167,88],[232,10,168,12],[232,11,168,13],[232,12,169,12],[232,19,169,19,"error"],[232,24,169,24],[232,26,169,26],[233,12,170,16],[233,16,170,20],[233,17,170,21],[233,18,170,22],[233,20,170,24,"errors_1"],[233,28,170,32],[233,29,170,33,"isStorageError"],[233,43,170,47],[233,45,170,49,"error"],[233,50,170,54],[233,51,170,55],[233,53,170,57],[234,14,171,20],[234,21,171,27],[235,16,171,29,"data"],[235,20,171,33],[235,22,171,35],[235,26,171,39],[236,16,171,41,"error"],[237,14,171,47],[237,15,171,48],[238,12,172,16],[239,12,173,16],[239,18,173,22,"error"],[239,23,173,27],[240,10,174,12],[241,8,175,8],[241,9,175,9],[241,10,175,10],[242,6,176,4],[243,6,177,4],[244,0,178,0],[245,0,179,0],[246,0,180,0],[247,0,181,0],[248,0,182,0],[249,4,177,4],[250,6,177,4,"key"],[250,9,177,4],[251,6,177,4,"value"],[251,11,177,4],[251,13,183,4],[251,22,183,4,"update"],[251,28,183,10,"update"],[251,29,183,11,"path"],[251,33,183,15],[251,35,183,17,"fileBody"],[251,43,183,25],[251,45,183,27,"fileOptions"],[251,56,183,38],[251,58,183,40],[252,8,184,8],[252,15,184,15,"__awaiter"],[252,24,184,24],[252,25,184,25],[252,29,184,29],[252,31,184,29,"undefined"],[252,40,184,29],[252,42,184,29,"undefined"],[252,51,184,29],[252,53,184,47],[252,66,184,60],[253,10,185,12],[253,17,185,19],[253,21,185,23],[253,22,185,24,"uploadOrUpdate"],[253,36,185,38],[253,37,185,39],[253,42,185,44],[253,44,185,46,"path"],[253,48,185,50],[253,50,185,52,"fileBody"],[253,58,185,60],[253,60,185,62,"fileOptions"],[253,71,185,73],[253,72,185,74],[254,8,186,8],[254,9,186,9],[254,10,186,10],[255,6,187,4],[256,6,188,4],[257,0,189,0],[258,0,190,0],[259,0,191,0],[260,0,192,0],[261,0,193,0],[262,0,194,0],[263,4,188,4],[264,6,188,4,"key"],[264,9,188,4],[265,6,188,4,"value"],[265,11,188,4],[265,13,195,4],[265,22,195,4,"move"],[265,26,195,8,"move"],[265,27,195,9,"fromPath"],[265,35,195,17],[265,37,195,19,"toPath"],[265,43,195,25],[265,45,195,27,"options"],[265,52,195,34],[265,54,195,36],[266,8,196,8],[266,15,196,15,"__awaiter"],[266,24,196,24],[266,25,196,25],[266,29,196,29],[266,31,196,29,"undefined"],[266,40,196,29],[266,42,196,29,"undefined"],[266,51,196,29],[266,53,196,47],[266,66,196,60],[267,10,197,12],[267,14,197,16],[268,12,198,16],[268,16,198,22,"data"],[268,20,198,26],[268,23,198,29],[268,29,198,35],[268,30,198,36],[268,31,198,37],[268,33,198,39,"fetch_1"],[268,40,198,46],[268,41,198,47,"post"],[268,45,198,51],[268,47,198,53],[268,51,198,57],[268,52,198,58,"fetch"],[268,57,198,63],[268,59,198,65],[268,62,198,68],[268,66,198,72],[268,67,198,73,"url"],[268,70,198,76],[268,84,198,90],[268,86,198,92],[269,14,199,20,"bucketId"],[269,22,199,28],[269,24,199,30],[269,28,199,34],[269,29,199,35,"bucketId"],[269,37,199,43],[270,14,200,20,"sourceKey"],[270,23,200,29],[270,25,200,31,"fromPath"],[270,33,200,39],[271,14,201,20,"destinationKey"],[271,28,201,34],[271,30,201,36,"toPath"],[271,36,201,42],[272,14,202,20,"destinationBucket"],[272,31,202,37],[272,33,202,39,"options"],[272,40,202,46],[272,45,202,51],[272,49,202,55],[272,53,202,59,"options"],[272,60,202,66],[272,65,202,66,"undefined"],[272,74,202,77],[272,77,202,77,"undefined"],[272,86,202,77],[272,89,202,89,"options"],[272,96,202,96],[272,97,202,97,"destinationBucket"],[273,12,203,16],[273,13,203,17],[273,15,203,19],[274,14,203,21,"headers"],[274,21,203,28],[274,23,203,30],[274,27,203,34],[274,28,203,35,"headers"],[275,12,203,43],[275,13,203,44],[275,14,203,45],[276,12,204,16],[276,19,204,23],[277,14,204,25,"data"],[277,18,204,29],[278,14,204,31,"error"],[278,19,204,36],[278,21,204,38],[279,12,204,43],[279,13,204,44],[280,10,205,12],[280,11,205,13],[280,12,206,12],[280,19,206,19,"error"],[280,24,206,24],[280,26,206,26],[281,12,207,16],[281,16,207,20],[281,17,207,21],[281,18,207,22],[281,20,207,24,"errors_1"],[281,28,207,32],[281,29,207,33,"isStorageError"],[281,43,207,47],[281,45,207,49,"error"],[281,50,207,54],[281,51,207,55],[281,53,207,57],[282,14,208,20],[282,21,208,27],[283,16,208,29,"data"],[283,20,208,33],[283,22,208,35],[283,26,208,39],[284,16,208,41,"error"],[285,14,208,47],[285,15,208,48],[286,12,209,16],[287,12,210,16],[287,18,210,22,"error"],[287,23,210,27],[288,10,211,12],[289,8,212,8],[289,9,212,9],[289,10,212,10],[290,6,213,4],[291,6,214,4],[292,0,215,0],[293,0,216,0],[294,0,217,0],[295,0,218,0],[296,0,219,0],[297,0,220,0],[298,4,214,4],[299,6,214,4,"key"],[299,9,214,4],[300,6,214,4,"value"],[300,11,214,4],[300,13,221,4],[300,22,221,4,"copy"],[300,26,221,8,"copy"],[300,27,221,9,"fromPath"],[300,35,221,17],[300,37,221,19,"toPath"],[300,43,221,25],[300,45,221,27,"options"],[300,52,221,34],[300,54,221,36],[301,8,222,8],[301,15,222,15,"__awaiter"],[301,24,222,24],[301,25,222,25],[301,29,222,29],[301,31,222,29,"undefined"],[301,40,222,29],[301,42,222,29,"undefined"],[301,51,222,29],[301,53,222,47],[301,66,222,60],[302,10,223,12],[302,14,223,16],[303,12,224,16],[303,16,224,22,"data"],[303,20,224,26],[303,23,224,29],[303,29,224,35],[303,30,224,36],[303,31,224,37],[303,33,224,39,"fetch_1"],[303,40,224,46],[303,41,224,47,"post"],[303,45,224,51],[303,47,224,53],[303,51,224,57],[303,52,224,58,"fetch"],[303,57,224,63],[303,59,224,65],[303,62,224,68],[303,66,224,72],[303,67,224,73,"url"],[303,70,224,76],[303,84,224,90],[303,86,224,92],[304,14,225,20,"bucketId"],[304,22,225,28],[304,24,225,30],[304,28,225,34],[304,29,225,35,"bucketId"],[304,37,225,43],[305,14,226,20,"sourceKey"],[305,23,226,29],[305,25,226,31,"fromPath"],[305,33,226,39],[306,14,227,20,"destinationKey"],[306,28,227,34],[306,30,227,36,"toPath"],[306,36,227,42],[307,14,228,20,"destinationBucket"],[307,31,228,37],[307,33,228,39,"options"],[307,40,228,46],[307,45,228,51],[307,49,228,55],[307,53,228,59,"options"],[307,60,228,66],[307,65,228,66,"undefined"],[307,74,228,77],[307,77,228,77,"undefined"],[307,86,228,77],[307,89,228,89,"options"],[307,96,228,96],[307,97,228,97,"destinationBucket"],[308,12,229,16],[308,13,229,17],[308,15,229,19],[309,14,229,21,"headers"],[309,21,229,28],[309,23,229,30],[309,27,229,34],[309,28,229,35,"headers"],[310,12,229,43],[310,13,229,44],[310,14,229,45],[311,12,230,16],[311,19,230,23],[312,14,230,25,"data"],[312,18,230,29],[312,20,230,31],[313,16,230,33,"path"],[313,20,230,37],[313,22,230,39,"data"],[313,26,230,43],[313,27,230,44,"Key"],[314,14,230,48],[314,15,230,49],[315,14,230,51,"error"],[315,19,230,56],[315,21,230,58],[316,12,230,63],[316,13,230,64],[317,10,231,12],[317,11,231,13],[317,12,232,12],[317,19,232,19,"error"],[317,24,232,24],[317,26,232,26],[318,12,233,16],[318,16,233,20],[318,17,233,21],[318,18,233,22],[318,20,233,24,"errors_1"],[318,28,233,32],[318,29,233,33,"isStorageError"],[318,43,233,47],[318,45,233,49,"error"],[318,50,233,54],[318,51,233,55],[318,53,233,57],[319,14,234,20],[319,21,234,27],[320,16,234,29,"data"],[320,20,234,33],[320,22,234,35],[320,26,234,39],[321,16,234,41,"error"],[322,14,234,47],[322,15,234,48],[323,12,235,16],[324,12,236,16],[324,18,236,22,"error"],[324,23,236,27],[325,10,237,12],[326,8,238,8],[326,9,238,9],[326,10,238,10],[327,6,239,4],[328,6,240,4],[329,0,241,0],[330,0,242,0],[331,0,243,0],[332,0,244,0],[333,0,245,0],[334,0,246,0],[335,0,247,0],[336,4,240,4],[337,6,240,4,"key"],[337,9,240,4],[338,6,240,4,"value"],[338,11,240,4],[338,13,248,4],[338,22,248,4,"createSignedUrl"],[338,37,248,19,"createSignedUrl"],[338,38,248,20,"path"],[338,42,248,24],[338,44,248,26,"expiresIn"],[338,53,248,35],[338,55,248,37,"options"],[338,62,248,44],[338,64,248,46],[339,8,249,8],[339,15,249,15,"__awaiter"],[339,24,249,24],[339,25,249,25],[339,29,249,29],[339,31,249,29,"undefined"],[339,40,249,29],[339,42,249,29,"undefined"],[339,51,249,29],[339,53,249,47],[339,66,249,60],[340,10,250,12],[340,14,250,16],[341,12,251,16],[341,16,251,20,"_path"],[341,21,251,25],[341,24,251,28],[341,28,251,32],[341,29,251,33,"_getFinalPath"],[341,42,251,46],[341,43,251,47,"path"],[341,47,251,51],[341,48,251,52],[342,12,252,16],[342,16,252,20,"data"],[342,20,252,24],[342,23,252,27],[342,29,252,33],[342,30,252,34],[342,31,252,35],[342,33,252,37,"fetch_1"],[342,40,252,44],[342,41,252,45,"post"],[342,45,252,49],[342,47,252,51],[342,51,252,55],[342,52,252,56,"fetch"],[342,57,252,61],[342,59,252,63],[342,62,252,66],[342,66,252,70],[342,67,252,71,"url"],[342,70,252,74],[342,86,252,90,"_path"],[342,91,252,95],[342,93,252,97],[342,95,252,99,"Object"],[342,101,252,105],[342,102,252,106,"assign"],[342,108,252,112],[342,109,252,113],[343,14,252,115,"expiresIn"],[344,12,252,125],[344,13,252,126],[344,15,252,129],[344,16,252,130,"options"],[344,23,252,137],[344,28,252,142],[344,32,252,146],[344,36,252,150,"options"],[344,43,252,157],[344,48,252,157,"undefined"],[344,57,252,168],[344,60,252,168,"undefined"],[344,69,252,168],[344,72,252,180,"options"],[344,79,252,187],[344,80,252,188,"transform"],[344,89,252,197],[344,93,252,201],[345,14,252,203,"transform"],[345,23,252,212],[345,25,252,214,"options"],[345,32,252,221],[345,33,252,222,"transform"],[346,12,252,232],[346,13,252,233],[346,16,252,236],[346,17,252,237],[346,18,252,239],[346,19,252,240],[346,21,252,242],[347,14,252,244,"headers"],[347,21,252,251],[347,23,252,253],[347,27,252,257],[347,28,252,258,"headers"],[348,12,252,266],[348,13,252,267],[348,14,252,268],[349,12,253,16],[349,16,253,22,"downloadQueryParam"],[349,34,253,40],[349,37,253,43],[349,38,253,44,"options"],[349,45,253,51],[349,50,253,56],[349,54,253,60],[349,58,253,64,"options"],[349,65,253,71],[349,70,253,71,"undefined"],[349,79,253,82],[349,82,253,82,"undefined"],[349,91,253,82],[349,94,253,94,"options"],[349,101,253,101],[349,102,253,102,"download"],[349,110,253,110],[349,114,254,22],[349,127,254,35,"options"],[349,134,254,42],[349,135,254,43,"download"],[349,143,254,51],[349,148,254,56],[349,152,254,60],[349,155,254,63],[349,157,254,65],[349,160,254,68,"options"],[349,167,254,75],[349,168,254,76,"download"],[349,176,254,84],[349,178,254,86],[349,181,255,22],[349,183,255,24],[350,12,256,16],[350,16,256,22,"signedUrl"],[350,25,256,31],[350,28,256,34,"encodeURI"],[350,37,256,43],[350,38,256,44],[350,41,256,47],[350,45,256,51],[350,46,256,52,"url"],[350,49,256,55],[350,52,256,58,"data"],[350,56,256,62],[350,57,256,63,"signedURL"],[350,66,256,72],[350,69,256,75,"downloadQueryParam"],[350,87,256,93],[350,89,256,95],[350,90,256,96],[351,12,257,16,"data"],[351,16,257,20],[351,19,257,23],[352,14,257,25,"signedUrl"],[353,12,257,35],[353,13,257,36],[354,12,258,16],[354,19,258,23],[355,14,258,25,"data"],[355,18,258,29],[356,14,258,31,"error"],[356,19,258,36],[356,21,258,38],[357,12,258,43],[357,13,258,44],[358,10,259,12],[358,11,259,13],[358,12,260,12],[358,19,260,19,"error"],[358,24,260,24],[358,26,260,26],[359,12,261,16],[359,16,261,20],[359,17,261,21],[359,18,261,22],[359,20,261,24,"errors_1"],[359,28,261,32],[359,29,261,33,"isStorageError"],[359,43,261,47],[359,45,261,49,"error"],[359,50,261,54],[359,51,261,55],[359,53,261,57],[360,14,262,20],[360,21,262,27],[361,16,262,29,"data"],[361,20,262,33],[361,22,262,35],[361,26,262,39],[362,16,262,41,"error"],[363,14,262,47],[363,15,262,48],[364,12,263,16],[365,12,264,16],[365,18,264,22,"error"],[365,23,264,27],[366,10,265,12],[367,8,266,8],[367,9,266,9],[367,10,266,10],[368,6,267,4],[369,6,268,4],[370,0,269,0],[371,0,270,0],[372,0,271,0],[373,0,272,0],[374,0,273,0],[375,0,274,0],[376,4,268,4],[377,6,268,4,"key"],[377,9,268,4],[378,6,268,4,"value"],[378,11,268,4],[378,13,275,4],[378,22,275,4,"createSignedUrls"],[378,38,275,20,"createSignedUrls"],[378,39,275,21,"paths"],[378,44,275,26],[378,46,275,28,"expiresIn"],[378,55,275,37],[378,57,275,39,"options"],[378,64,275,46],[378,66,275,48],[379,8,276,8],[379,15,276,15,"__awaiter"],[379,24,276,24],[379,25,276,25],[379,29,276,29],[379,31,276,29,"undefined"],[379,40,276,29],[379,42,276,29,"undefined"],[379,51,276,29],[379,53,276,47],[379,66,276,60],[380,10,277,12],[380,14,277,16],[381,12,278,16],[381,16,278,22,"data"],[381,20,278,26],[381,23,278,29],[381,29,278,35],[381,30,278,36],[381,31,278,37],[381,33,278,39,"fetch_1"],[381,40,278,46],[381,41,278,47,"post"],[381,45,278,51],[381,47,278,53],[381,51,278,57],[381,52,278,58,"fetch"],[381,57,278,63],[381,59,278,65],[381,62,278,68],[381,66,278,72],[381,67,278,73,"url"],[381,70,278,76],[381,86,278,92],[381,90,278,96],[381,91,278,97,"bucketId"],[381,99,278,105],[381,101,278,107],[381,103,278,109],[382,14,278,111,"expiresIn"],[382,23,278,120],[383,14,278,122,"paths"],[384,12,278,128],[384,13,278,129],[384,15,278,131],[385,14,278,133,"headers"],[385,21,278,140],[385,23,278,142],[385,27,278,146],[385,28,278,147,"headers"],[386,12,278,155],[386,13,278,156],[386,14,278,157],[387,12,279,16],[387,16,279,22,"downloadQueryParam"],[387,34,279,40],[387,37,279,43],[387,38,279,44,"options"],[387,45,279,51],[387,50,279,56],[387,54,279,60],[387,58,279,64,"options"],[387,65,279,71],[387,70,279,71,"undefined"],[387,79,279,82],[387,82,279,82,"undefined"],[387,91,279,82],[387,94,279,94,"options"],[387,101,279,101],[387,102,279,102,"download"],[387,110,279,110],[387,114,280,22],[387,127,280,35,"options"],[387,134,280,42],[387,135,280,43,"download"],[387,143,280,51],[387,148,280,56],[387,152,280,60],[387,155,280,63],[387,157,280,65],[387,160,280,68,"options"],[387,167,280,75],[387,168,280,76,"download"],[387,176,280,84],[387,178,280,86],[387,181,281,22],[387,183,281,24],[388,12,282,16],[388,19,282,23],[389,14,283,20,"data"],[389,18,283,24],[389,20,283,26,"data"],[389,24,283,30],[389,25,283,31,"map"],[389,28,283,34],[389,29,283,36,"datum"],[389,34,283,41],[389,38,283,47,"Object"],[389,44,283,53],[389,45,283,54,"assign"],[389,51,283,60],[389,52,283,61,"Object"],[389,58,283,67],[389,59,283,68,"assign"],[389,65,283,74],[389,66,283,75],[389,67,283,76],[389,68,283,77],[389,70,283,79,"datum"],[389,75,283,84],[389,76,283,85],[389,78,283,87],[390,16,283,89,"signedUrl"],[390,25,283,98],[390,27,283,100,"datum"],[390,32,283,105],[390,33,283,106,"signedURL"],[390,42,283,115],[390,45,284,30,"encodeURI"],[390,54,284,39],[390,55,284,40],[390,58,284,43],[390,62,284,47],[390,63,284,48,"url"],[390,66,284,51],[390,69,284,54,"datum"],[390,74,284,59],[390,75,284,60,"signedURL"],[390,84,284,69],[390,87,284,72,"downloadQueryParam"],[390,105,284,90],[390,107,284,92],[390,108,284,93],[390,111,285,30],[391,14,285,35],[391,15,285,36],[391,16,285,38],[391,17,285,39],[392,14,286,20,"error"],[392,19,286,25],[392,21,286,27],[393,12,287,16],[393,13,287,17],[394,10,288,12],[394,11,288,13],[394,12,289,12],[394,19,289,19,"error"],[394,24,289,24],[394,26,289,26],[395,12,290,16],[395,16,290,20],[395,17,290,21],[395,18,290,22],[395,20,290,24,"errors_1"],[395,28,290,32],[395,29,290,33,"isStorageError"],[395,43,290,47],[395,45,290,49,"error"],[395,50,290,54],[395,51,290,55],[395,53,290,57],[396,14,291,20],[396,21,291,27],[397,16,291,29,"data"],[397,20,291,33],[397,22,291,35],[397,26,291,39],[398,16,291,41,"error"],[399,14,291,47],[399,15,291,48],[400,12,292,16],[401,12,293,16],[401,18,293,22,"error"],[401,23,293,27],[402,10,294,12],[403,8,295,8],[403,9,295,9],[403,10,295,10],[404,6,296,4],[405,6,297,4],[406,0,298,0],[407,0,299,0],[408,0,300,0],[409,0,301,0],[410,0,302,0],[411,4,297,4],[412,6,297,4,"key"],[412,9,297,4],[413,6,297,4,"value"],[413,11,297,4],[413,13,303,4],[413,22,303,4,"download"],[413,30,303,12,"download"],[413,31,303,13,"path"],[413,35,303,17],[413,37,303,19,"options"],[413,44,303,26],[413,46,303,28],[414,8,304,8],[414,15,304,15,"__awaiter"],[414,24,304,24],[414,25,304,25],[414,29,304,29],[414,31,304,29,"undefined"],[414,40,304,29],[414,42,304,29,"undefined"],[414,51,304,29],[414,53,304,47],[414,66,304,60],[415,10,305,12],[415,14,305,18,"wantsTransformation"],[415,33,305,37],[415,36,305,40],[415,44,305,48,"options"],[415,51,305,55],[415,56,305,60],[415,60,305,64],[415,64,305,68,"options"],[415,71,305,75],[415,76,305,75,"undefined"],[415,85,305,86],[415,88,305,86,"undefined"],[415,97,305,86],[415,100,305,98,"options"],[415,107,305,105],[415,108,305,106,"transform"],[415,117,305,115],[415,118,305,116],[415,123,305,121],[415,134,305,132],[416,10,306,12],[416,14,306,18,"renderPath"],[416,24,306,28],[416,27,306,31,"wantsTransformation"],[416,46,306,50],[416,49,306,53],[416,77,306,81],[416,80,306,84],[416,88,306,92],[417,10,307,12],[417,14,307,18,"transformationQuery"],[417,33,307,37],[417,36,307,40],[417,40,307,44],[417,41,307,45,"transformOptsToQueryString"],[417,67,307,71],[417,68,307,72],[417,69,307,73,"options"],[417,76,307,80],[417,81,307,85],[417,85,307,89],[417,89,307,93,"options"],[417,96,307,100],[417,101,307,100,"undefined"],[417,110,307,111],[417,113,307,111,"undefined"],[417,122,307,111],[417,125,307,123,"options"],[417,132,307,130],[417,133,307,131,"transform"],[417,142,307,140],[417,147,307,145],[417,148,307,146],[417,149,307,147],[417,150,307,148],[418,10,308,12],[418,14,308,18,"queryString"],[418,25,308,29],[418,28,308,32,"transformationQuery"],[418,47,308,51],[418,50,308,54],[418,54,308,58,"transformationQuery"],[418,73,308,77],[418,75,308,79],[418,78,308,82],[418,80,308,84],[419,10,309,12],[419,14,309,16],[420,12,310,16],[420,16,310,22,"_path"],[420,21,310,27],[420,24,310,30],[420,28,310,34],[420,29,310,35,"_getFinalPath"],[420,42,310,48],[420,43,310,49,"path"],[420,47,310,53],[420,48,310,54],[421,12,311,16],[421,16,311,22,"res"],[421,19,311,25],[421,22,311,28],[421,28,311,34],[421,29,311,35],[421,30,311,36],[421,32,311,38,"fetch_1"],[421,39,311,45],[421,40,311,46,"get"],[421,43,311,49],[421,45,311,51],[421,49,311,55],[421,50,311,56,"fetch"],[421,55,311,61],[421,57,311,63],[421,60,311,66],[421,64,311,70],[421,65,311,71,"url"],[421,68,311,74],[421,72,311,78,"renderPath"],[421,82,311,88],[421,86,311,92,"_path"],[421,91,311,97],[421,94,311,100,"queryString"],[421,105,311,111],[421,107,311,113],[421,109,311,115],[422,14,312,20,"headers"],[422,21,312,27],[422,23,312,29],[422,27,312,33],[422,28,312,34,"headers"],[422,35,312,41],[423,14,313,20,"noResolveJson"],[423,27,313,33],[423,29,313,35],[424,12,314,16],[424,13,314,17],[424,14,314,18],[425,12,315,16],[425,16,315,22,"data"],[425,20,315,26],[425,23,315,29],[425,29,315,35,"res"],[425,32,315,38],[425,33,315,39,"blob"],[425,37,315,43],[425,38,315,44],[425,39,315,45],[426,12,316,16],[426,19,316,23],[427,14,316,25,"data"],[427,18,316,29],[428,14,316,31,"error"],[428,19,316,36],[428,21,316,38],[429,12,316,43],[429,13,316,44],[430,10,317,12],[430,11,317,13],[430,12,318,12],[430,19,318,19,"error"],[430,24,318,24],[430,26,318,26],[431,12,319,16],[431,16,319,20],[431,17,319,21],[431,18,319,22],[431,20,319,24,"errors_1"],[431,28,319,32],[431,29,319,33,"isStorageError"],[431,43,319,47],[431,45,319,49,"error"],[431,50,319,54],[431,51,319,55],[431,53,319,57],[432,14,320,20],[432,21,320,27],[433,16,320,29,"data"],[433,20,320,33],[433,22,320,35],[433,26,320,39],[434,16,320,41,"error"],[435,14,320,47],[435,15,320,48],[436,12,321,16],[437,12,322,16],[437,18,322,22,"error"],[437,23,322,27],[438,10,323,12],[439,8,324,8],[439,9,324,9],[439,10,324,10],[440,6,325,4],[441,6,326,4],[442,0,327,0],[443,0,328,0],[444,0,329,0],[445,4,326,4],[446,6,326,4,"key"],[446,9,326,4],[447,6,326,4,"value"],[447,11,326,4],[447,13,330,4],[447,22,330,4,"info"],[447,26,330,8,"info"],[447,27,330,9,"path"],[447,31,330,13],[447,33,330,15],[448,8,331,8],[448,15,331,15,"__awaiter"],[448,24,331,24],[448,25,331,25],[448,29,331,29],[448,31,331,29,"undefined"],[448,40,331,29],[448,42,331,29,"undefined"],[448,51,331,29],[448,53,331,47],[448,66,331,60],[449,10,332,12],[449,14,332,18,"_path"],[449,19,332,23],[449,22,332,26],[449,26,332,30],[449,27,332,31,"_getFinalPath"],[449,40,332,44],[449,41,332,45,"path"],[449,45,332,49],[449,46,332,50],[450,10,333,12],[450,14,333,16],[451,12,334,16],[451,16,334,22,"data"],[451,20,334,26],[451,23,334,29],[451,29,334,35],[451,30,334,36],[451,31,334,37],[451,33,334,39,"fetch_1"],[451,40,334,46],[451,41,334,47,"get"],[451,44,334,50],[451,46,334,52],[451,50,334,56],[451,51,334,57,"fetch"],[451,56,334,62],[451,58,334,64],[451,61,334,67],[451,65,334,71],[451,66,334,72,"url"],[451,69,334,75],[451,85,334,91,"_path"],[451,90,334,96],[451,92,334,98],[451,94,334,100],[452,14,335,20,"headers"],[452,21,335,27],[452,23,335,29],[452,27,335,33],[452,28,335,34,"headers"],[453,12,336,16],[453,13,336,17],[453,14,336,18],[454,12,337,16],[454,19,337,23],[455,14,337,25,"data"],[455,18,337,29],[455,20,337,31],[455,21,337,32],[455,22,337,33],[455,24,337,35,"helpers_1"],[455,33,337,44],[455,34,337,45,"recursiveToCamel"],[455,50,337,61],[455,52,337,63,"data"],[455,56,337,67],[455,57,337,68],[456,14,337,70,"error"],[456,19,337,75],[456,21,337,77],[457,12,337,82],[457,13,337,83],[458,10,338,12],[458,11,338,13],[458,12,339,12],[458,19,339,19,"error"],[458,24,339,24],[458,26,339,26],[459,12,340,16],[459,16,340,20],[459,17,340,21],[459,18,340,22],[459,20,340,24,"errors_1"],[459,28,340,32],[459,29,340,33,"isStorageError"],[459,43,340,47],[459,45,340,49,"error"],[459,50,340,54],[459,51,340,55],[459,53,340,57],[460,14,341,20],[460,21,341,27],[461,16,341,29,"data"],[461,20,341,33],[461,22,341,35],[461,26,341,39],[462,16,341,41,"error"],[463,14,341,47],[463,15,341,48],[464,12,342,16],[465,12,343,16],[465,18,343,22,"error"],[465,23,343,27],[466,10,344,12],[467,8,345,8],[467,9,345,9],[467,10,345,10],[468,6,346,4],[469,6,347,4],[470,0,348,0],[471,0,349,0],[472,0,350,0],[473,4,347,4],[474,6,347,4,"key"],[474,9,347,4],[475,6,347,4,"value"],[475,11,347,4],[475,13,351,4],[475,22,351,4,"exists"],[475,28,351,10,"exists"],[475,29,351,11,"path"],[475,33,351,15],[475,35,351,17],[476,8,352,8],[476,15,352,15,"__awaiter"],[476,24,352,24],[476,25,352,25],[476,29,352,29],[476,31,352,29,"undefined"],[476,40,352,29],[476,42,352,29,"undefined"],[476,51,352,29],[476,53,352,47],[476,66,352,60],[477,10,353,12],[477,14,353,18,"_path"],[477,19,353,23],[477,22,353,26],[477,26,353,30],[477,27,353,31,"_getFinalPath"],[477,40,353,44],[477,41,353,45,"path"],[477,45,353,49],[477,46,353,50],[478,10,354,12],[478,14,354,16],[479,12,355,16],[479,18,355,22],[479,19,355,23],[479,20,355,24],[479,22,355,26,"fetch_1"],[479,29,355,33],[479,30,355,34,"head"],[479,34,355,38],[479,36,355,40],[479,40,355,44],[479,41,355,45,"fetch"],[479,46,355,50],[479,48,355,52],[479,51,355,55],[479,55,355,59],[479,56,355,60,"url"],[479,59,355,63],[479,70,355,74,"_path"],[479,75,355,79],[479,77,355,81],[479,79,355,83],[480,14,356,20,"headers"],[480,21,356,27],[480,23,356,29],[480,27,356,33],[480,28,356,34,"headers"],[481,12,357,16],[481,13,357,17],[481,14,357,18],[482,12,358,16],[482,19,358,23],[483,14,358,25,"data"],[483,18,358,29],[483,20,358,31],[483,24,358,35],[484,14,358,37,"error"],[484,19,358,42],[484,21,358,44],[485,12,358,49],[485,13,358,50],[486,10,359,12],[486,11,359,13],[486,12,360,12],[486,19,360,19,"error"],[486,24,360,24],[486,26,360,26],[487,12,361,16],[487,16,361,20],[487,17,361,21],[487,18,361,22],[487,20,361,24,"errors_1"],[487,28,361,32],[487,29,361,33,"isStorageError"],[487,43,361,47],[487,45,361,49,"error"],[487,50,361,54],[487,51,361,55],[487,55,361,59,"error"],[487,60,361,64],[487,72,361,76,"errors_1"],[487,80,361,84],[487,81,361,85,"StorageUnknownError"],[487,100,361,104],[487,102,361,106],[488,14,362,20],[488,18,362,26,"originalError"],[488,31,362,39],[488,34,362,42,"error"],[488,39,362,47],[488,40,362,48,"originalError"],[488,53,362,61],[489,14,363,20],[489,18,363,24],[489,19,363,25],[489,22,363,28],[489,24,363,30],[489,27,363,33],[489,28,363,34],[489,29,363,35,"includes"],[489,37,363,43],[489,38,363,44,"originalError"],[489,51,363,57],[489,56,363,62],[489,60,363,66],[489,64,363,70,"originalError"],[489,77,363,83],[489,82,363,83,"undefined"],[489,91,363,94],[489,94,363,94,"undefined"],[489,103,363,94],[489,106,363,106,"originalError"],[489,119,363,119],[489,120,363,120,"status"],[489,126,363,126],[489,127,363,127],[489,129,363,129],[490,16,364,24],[490,23,364,31],[491,18,364,33,"data"],[491,22,364,37],[491,24,364,39],[491,29,364,44],[492,18,364,46,"error"],[493,16,364,52],[493,17,364,53],[494,14,365,20],[495,12,366,16],[496,12,367,16],[496,18,367,22,"error"],[496,23,367,27],[497,10,368,12],[498,8,369,8],[498,9,369,9],[498,10,369,10],[499,6,370,4],[500,6,371,4],[501,0,372,0],[502,0,373,0],[503,0,374,0],[504,0,375,0],[505,0,376,0],[506,0,377,0],[507,0,378,0],[508,4,371,4],[509,6,371,4,"key"],[509,9,371,4],[510,6,371,4,"value"],[510,11,371,4],[510,13,379,4],[510,22,379,4,"getPublicUrl"],[510,34,379,16,"getPublicUrl"],[510,35,379,17,"path"],[510,39,379,21],[510,41,379,23,"options"],[510,48,379,30],[510,50,379,32],[511,8,380,8],[511,12,380,14,"_path"],[511,17,380,19],[511,20,380,22],[511,24,380,26],[511,25,380,27,"_getFinalPath"],[511,38,380,40],[511,39,380,41,"path"],[511,43,380,45],[511,44,380,46],[512,8,381,8],[512,12,381,14,"_queryString"],[512,24,381,26],[512,27,381,29],[512,29,381,31],[513,8,382,8],[513,12,382,14,"downloadQueryParam"],[513,30,382,32],[513,33,382,35],[513,34,382,36,"options"],[513,41,382,43],[513,46,382,48],[513,50,382,52],[513,54,382,56,"options"],[513,61,382,63],[513,66,382,63,"undefined"],[513,75,382,74],[513,78,382,74,"undefined"],[513,87,382,74],[513,90,382,86,"options"],[513,97,382,93],[513,98,382,94,"download"],[513,106,382,102],[513,110,383,14],[513,122,383,26,"options"],[513,129,383,33],[513,130,383,34,"download"],[513,138,383,42],[513,143,383,47],[513,147,383,51],[513,150,383,54],[513,152,383,56],[513,155,383,59,"options"],[513,162,383,66],[513,163,383,67,"download"],[513,171,383,75],[513,173,383,77],[513,176,384,14],[513,178,384,16],[514,8,385,8],[514,12,385,12,"downloadQueryParam"],[514,30,385,30],[514,35,385,35],[514,37,385,37],[514,39,385,39],[515,10,386,12,"_queryString"],[515,22,386,24],[515,23,386,25,"push"],[515,27,386,29],[515,28,386,30,"downloadQueryParam"],[515,46,386,48],[515,47,386,49],[516,8,387,8],[517,8,388,8],[517,12,388,14,"wantsTransformation"],[517,31,388,33],[517,34,388,36],[517,42,388,44,"options"],[517,49,388,51],[517,54,388,56],[517,58,388,60],[517,62,388,64,"options"],[517,69,388,71],[517,74,388,71,"undefined"],[517,83,388,82],[517,86,388,82,"undefined"],[517,95,388,82],[517,98,388,94,"options"],[517,105,388,101],[517,106,388,102,"transform"],[517,115,388,111],[517,116,388,112],[517,121,388,117],[517,132,388,128],[518,8,389,8],[518,12,389,14,"renderPath"],[518,22,389,24],[518,25,389,27,"wantsTransformation"],[518,44,389,46],[518,47,389,49],[518,61,389,63],[518,64,389,66],[518,72,389,74],[519,8,390,8],[519,12,390,14,"transformationQuery"],[519,31,390,33],[519,34,390,36],[519,38,390,40],[519,39,390,41,"transformOptsToQueryString"],[519,65,390,67],[519,66,390,68],[519,67,390,69,"options"],[519,74,390,76],[519,79,390,81],[519,83,390,85],[519,87,390,89,"options"],[519,94,390,96],[519,99,390,96,"undefined"],[519,108,390,107],[519,111,390,107,"undefined"],[519,120,390,107],[519,123,390,119,"options"],[519,130,390,126],[519,131,390,127,"transform"],[519,140,390,136],[519,145,390,141],[519,146,390,142],[519,147,390,143],[519,148,390,144],[520,8,391,8],[520,12,391,12,"transformationQuery"],[520,31,391,31],[520,36,391,36],[520,38,391,38],[520,40,391,40],[521,10,392,12,"_queryString"],[521,22,392,24],[521,23,392,25,"push"],[521,27,392,29],[521,28,392,30,"transformationQuery"],[521,47,392,49],[521,48,392,50],[522,8,393,8],[523,8,394,8],[523,12,394,12,"queryString"],[523,23,394,23],[523,26,394,26,"_queryString"],[523,38,394,38],[523,39,394,39,"join"],[523,43,394,43],[523,44,394,44],[523,47,394,47],[523,48,394,48],[524,8,395,8],[524,12,395,12,"queryString"],[524,23,395,23],[524,28,395,28],[524,30,395,30],[524,32,395,32],[525,10,396,12,"queryString"],[525,21,396,23],[525,24,396,26],[525,28,396,30,"queryString"],[525,39,396,41],[525,41,396,43],[526,8,397,8],[527,8,398,8],[527,15,398,15],[528,10,399,12,"data"],[528,14,399,16],[528,16,399,18],[529,12,399,20,"publicUrl"],[529,21,399,29],[529,23,399,31,"encodeURI"],[529,32,399,40],[529,33,399,41],[529,36,399,44],[529,40,399,48],[529,41,399,49,"url"],[529,44,399,52],[529,48,399,56,"renderPath"],[529,58,399,66],[529,69,399,77,"_path"],[529,74,399,82],[529,77,399,85,"queryString"],[529,88,399,96],[529,90,399,98],[530,10,399,100],[531,8,400,8],[531,9,400,9],[532,6,401,4],[533,6,402,4],[534,0,403,0],[535,0,404,0],[536,0,405,0],[537,0,406,0],[538,4,402,4],[539,6,402,4,"key"],[539,9,402,4],[540,6,402,4,"value"],[540,11,402,4],[540,13,407,4],[540,22,407,4,"remove"],[540,28,407,10,"remove"],[540,29,407,11,"paths"],[540,34,407,16],[540,36,407,18],[541,8,408,8],[541,15,408,15,"__awaiter"],[541,24,408,24],[541,25,408,25],[541,29,408,29],[541,31,408,29,"undefined"],[541,40,408,29],[541,42,408,29,"undefined"],[541,51,408,29],[541,53,408,47],[541,66,408,60],[542,10,409,12],[542,14,409,16],[543,12,410,16],[543,16,410,22,"data"],[543,20,410,26],[543,23,410,29],[543,29,410,35],[543,30,410,36],[543,31,410,37],[543,33,410,39,"fetch_1"],[543,40,410,46],[543,41,410,47,"remove"],[543,47,410,53],[543,49,410,55],[543,53,410,59],[543,54,410,60,"fetch"],[543,59,410,65],[543,61,410,67],[543,64,410,70],[543,68,410,74],[543,69,410,75,"url"],[543,72,410,78],[543,83,410,89],[543,87,410,93],[543,88,410,94,"bucketId"],[543,96,410,102],[543,98,410,104],[543,100,410,106],[544,14,410,108,"prefixes"],[544,22,410,116],[544,24,410,118,"paths"],[545,12,410,124],[545,13,410,125],[545,15,410,127],[546,14,410,129,"headers"],[546,21,410,136],[546,23,410,138],[546,27,410,142],[546,28,410,143,"headers"],[547,12,410,151],[547,13,410,152],[547,14,410,153],[548,12,411,16],[548,19,411,23],[549,14,411,25,"data"],[549,18,411,29],[550,14,411,31,"error"],[550,19,411,36],[550,21,411,38],[551,12,411,43],[551,13,411,44],[552,10,412,12],[552,11,412,13],[552,12,413,12],[552,19,413,19,"error"],[552,24,413,24],[552,26,413,26],[553,12,414,16],[553,16,414,20],[553,17,414,21],[553,18,414,22],[553,20,414,24,"errors_1"],[553,28,414,32],[553,29,414,33,"isStorageError"],[553,43,414,47],[553,45,414,49,"error"],[553,50,414,54],[553,51,414,55],[553,53,414,57],[554,14,415,20],[554,21,415,27],[555,16,415,29,"data"],[555,20,415,33],[555,22,415,35],[555,26,415,39],[556,16,415,41,"error"],[557,14,415,47],[557,15,415,48],[558,12,416,16],[559,12,417,16],[559,18,417,22,"error"],[559,23,417,27],[560,10,418,12],[561,8,419,8],[561,9,419,9],[561,10,419,10],[562,6,420,4],[563,6,421,4],[564,0,422,0],[565,0,423,0],[566,0,424,0],[567,6,425,4],[568,6,426,4],[569,6,427,4],[570,6,428,4],[571,6,429,4],[572,6,430,4],[573,6,431,4],[574,6,432,4],[575,6,433,4],[576,6,434,4],[577,6,435,4],[578,6,436,4],[579,6,437,4],[580,6,438,4],[581,6,439,4],[582,6,440,4],[583,6,441,4],[584,6,442,4],[585,6,443,4],[586,6,444,4],[587,6,445,4],[588,6,446,4],[589,6,447,4],[590,0,448,0],[591,0,449,0],[592,0,450,0],[593,0,451,0],[594,6,452,4],[595,6,453,4],[596,6,454,4],[597,6,455,4],[598,6,456,4],[599,6,457,4],[600,6,458,4],[601,6,459,4],[602,6,460,4],[603,6,461,4],[604,6,462,4],[605,6,463,4],[606,6,464,4],[607,6,465,4],[608,6,466,4],[609,6,467,4],[610,6,468,4],[611,6,469,4],[612,6,470,4],[613,6,471,4],[614,6,472,4],[615,6,473,4],[616,6,474,4],[617,6,475,4],[618,6,476,4],[619,6,477,4],[620,6,478,4],[621,6,479,4],[622,6,480,4],[623,0,481,0],[624,0,482,0],[625,0,483,0],[626,0,484,0],[627,4,480,4],[628,6,480,4,"key"],[628,9,480,4],[629,6,480,4,"value"],[629,11,480,4],[629,13,485,4],[629,22,485,4,"list"],[629,26,485,8,"list"],[629,27,485,9,"path"],[629,31,485,13],[629,33,485,15,"options"],[629,40,485,22],[629,42,485,24,"parameters"],[629,52,485,34],[629,54,485,36],[630,8,486,8],[630,15,486,15,"__awaiter"],[630,24,486,24],[630,25,486,25],[630,29,486,29],[630,31,486,29,"undefined"],[630,40,486,29],[630,42,486,29,"undefined"],[630,51,486,29],[630,53,486,47],[630,66,486,60],[631,10,487,12],[631,14,487,16],[632,12,488,16],[632,16,488,22,"body"],[632,20,488,26],[632,23,488,29,"Object"],[632,29,488,35],[632,30,488,36,"assign"],[632,36,488,42],[632,37,488,43,"Object"],[632,43,488,49],[632,44,488,50,"assign"],[632,50,488,56],[632,51,488,57,"Object"],[632,57,488,63],[632,58,488,64,"assign"],[632,64,488,70],[632,65,488,71],[632,66,488,72],[632,67,488,73],[632,69,488,75,"DEFAULT_SEARCH_OPTIONS"],[632,91,488,97],[632,92,488,98],[632,94,488,100,"options"],[632,101,488,107],[632,102,488,108],[632,104,488,110],[633,14,488,112,"prefix"],[633,20,488,118],[633,22,488,120,"path"],[633,26,488,124],[633,30,488,128],[634,12,488,131],[634,13,488,132],[634,14,488,133],[635,12,489,16],[635,16,489,22,"data"],[635,20,489,26],[635,23,489,29],[635,29,489,35],[635,30,489,36],[635,31,489,37],[635,33,489,39,"fetch_1"],[635,40,489,46],[635,41,489,47,"post"],[635,45,489,51],[635,47,489,53],[635,51,489,57],[635,52,489,58,"fetch"],[635,57,489,63],[635,59,489,65],[635,62,489,68],[635,66,489,72],[635,67,489,73,"url"],[635,70,489,76],[635,86,489,92],[635,90,489,96],[635,91,489,97,"bucketId"],[635,99,489,105],[635,101,489,107],[635,103,489,109,"body"],[635,107,489,113],[635,109,489,115],[636,14,489,117,"headers"],[636,21,489,124],[636,23,489,126],[636,27,489,130],[636,28,489,131,"headers"],[637,12,489,139],[637,13,489,140],[637,15,489,142,"parameters"],[637,25,489,152],[637,26,489,153],[638,12,490,16],[638,19,490,23],[639,14,490,25,"data"],[639,18,490,29],[640,14,490,31,"error"],[640,19,490,36],[640,21,490,38],[641,12,490,43],[641,13,490,44],[642,10,491,12],[642,11,491,13],[642,12,492,12],[642,19,492,19,"error"],[642,24,492,24],[642,26,492,26],[643,12,493,16],[643,16,493,20],[643,17,493,21],[643,18,493,22],[643,20,493,24,"errors_1"],[643,28,493,32],[643,29,493,33,"isStorageError"],[643,43,493,47],[643,45,493,49,"error"],[643,50,493,54],[643,51,493,55],[643,53,493,57],[644,14,494,20],[644,21,494,27],[645,16,494,29,"data"],[645,20,494,33],[645,22,494,35],[645,26,494,39],[646,16,494,41,"error"],[647,14,494,47],[647,15,494,48],[648,12,495,16],[649,12,496,16],[649,18,496,22,"error"],[649,23,496,27],[650,10,497,12],[651,8,498,8],[651,9,498,9],[651,10,498,10],[652,6,499,4],[653,6,500,4],[654,0,501,0],[655,0,502,0],[656,0,503,0],[657,0,504,0],[658,4,500,4],[659,6,500,4,"key"],[659,9,500,4],[660,6,500,4,"value"],[660,11,500,4],[660,13,505,4],[660,22,505,4,"listV2"],[660,28,505,10,"listV2"],[660,29,505,11,"options"],[660,36,505,18],[660,38,505,20,"parameters"],[660,48,505,30],[660,50,505,32],[661,8,506,8],[661,15,506,15,"__awaiter"],[661,24,506,24],[661,25,506,25],[661,29,506,29],[661,31,506,29,"undefined"],[661,40,506,29],[661,42,506,29,"undefined"],[661,51,506,29],[661,53,506,47],[661,66,506,60],[662,10,507,12],[662,14,507,16],[663,12,508,16],[663,16,508,22,"body"],[663,20,508,26],[663,23,508,29,"Object"],[663,29,508,35],[663,30,508,36,"assign"],[663,36,508,42],[663,37,508,43],[663,38,508,44],[663,39,508,45],[663,41,508,47,"options"],[663,48,508,54],[663,49,508,55],[664,12,509,16],[664,16,509,22,"data"],[664,20,509,26],[664,23,509,29],[664,29,509,35],[664,30,509,36],[664,31,509,37],[664,33,509,39,"fetch_1"],[664,40,509,46],[664,41,509,47,"post"],[664,45,509,51],[664,47,509,53],[664,51,509,57],[664,52,509,58,"fetch"],[664,57,509,63],[664,59,509,65],[664,62,509,68],[664,66,509,72],[664,67,509,73,"url"],[664,70,509,76],[664,89,509,95],[664,93,509,99],[664,94,509,100,"bucketId"],[664,102,509,108],[664,104,509,110],[664,106,509,112,"body"],[664,110,509,116],[664,112,509,118],[665,14,509,120,"headers"],[665,21,509,127],[665,23,509,129],[665,27,509,133],[665,28,509,134,"headers"],[666,12,509,142],[666,13,509,143],[666,15,509,145,"parameters"],[666,25,509,155],[666,26,509,156],[667,12,510,16],[667,19,510,23],[668,14,510,25,"data"],[668,18,510,29],[669,14,510,31,"error"],[669,19,510,36],[669,21,510,38],[670,12,510,43],[670,13,510,44],[671,10,511,12],[671,11,511,13],[671,12,512,12],[671,19,512,19,"error"],[671,24,512,24],[671,26,512,26],[672,12,513,16],[672,16,513,20],[672,17,513,21],[672,18,513,22],[672,20,513,24,"errors_1"],[672,28,513,32],[672,29,513,33,"isStorageError"],[672,43,513,47],[672,45,513,49,"error"],[672,50,513,54],[672,51,513,55],[672,53,513,57],[673,14,514,20],[673,21,514,27],[674,16,514,29,"data"],[674,20,514,33],[674,22,514,35],[674,26,514,39],[675,16,514,41,"error"],[676,14,514,47],[676,15,514,48],[677,12,515,16],[678,12,516,16],[678,18,516,22,"error"],[678,23,516,27],[679,10,517,12],[680,8,518,8],[680,9,518,9],[680,10,518,10],[681,6,519,4],[682,4,519,5],[683,6,519,5,"key"],[683,9,519,5],[684,6,519,5,"value"],[684,11,519,5],[684,13,520,4],[684,22,520,4,"encodeMetadata"],[684,36,520,18,"encodeMetadata"],[684,37,520,19,"metadata"],[684,45,520,27],[684,47,520,29],[685,8,521,8],[685,15,521,15,"JSON"],[685,19,521,19],[685,20,521,20,"stringify"],[685,29,521,29],[685,30,521,30,"metadata"],[685,38,521,38],[685,39,521,39],[686,6,522,4],[687,4,522,5],[688,6,522,5,"key"],[688,9,522,5],[689,6,522,5,"value"],[689,11,522,5],[689,13,523,4],[689,22,523,4,"toBase64"],[689,30,523,12,"toBase64"],[689,31,523,13,"data"],[689,35,523,17],[689,37,523,19],[690,8,524,8],[690,12,524,12],[690,19,524,19,"Buffer"],[690,25,524,25],[690,30,524,30],[690,41,524,41],[690,43,524,43],[691,10,525,12],[691,17,525,19,"Buffer"],[691,23,525,25],[691,24,525,26,"from"],[691,28,525,30],[691,29,525,31,"data"],[691,33,525,35],[691,34,525,36],[691,35,525,37,"toString"],[691,43,525,45],[691,44,525,46],[691,52,525,54],[691,53,525,55],[692,8,526,8],[693,8,527,8],[693,15,527,15,"btoa"],[693,19,527,19],[693,20,527,20,"data"],[693,24,527,24],[693,25,527,25],[694,6,528,4],[695,4,528,5],[696,6,528,5,"key"],[696,9,528,5],[697,6,528,5,"value"],[697,11,528,5],[697,13,529,4],[697,22,529,4,"_getFinalPath"],[697,35,529,17,"_getFinalPath"],[697,36,529,18,"path"],[697,40,529,22],[697,42,529,24],[698,8,530,8],[698,15,530,15],[698,18,530,18],[698,22,530,22],[698,23,530,23,"bucketId"],[698,31,530,31],[698,35,530,35,"path"],[698,39,530,39],[698,40,530,40,"replace"],[698,47,530,47],[698,48,530,48],[698,54,530,54],[698,56,530,56],[698,58,530,58],[698,59,530,59],[698,61,530,61],[699,6,531,4],[700,4,531,5],[701,6,531,5,"key"],[701,9,531,5],[702,6,531,5,"value"],[702,11,531,5],[702,13,532,4],[702,22,532,4,"_removeEmptyFolders"],[702,41,532,23,"_removeEmptyFolders"],[702,42,532,24,"path"],[702,46,532,28],[702,48,532,30],[703,8,533,8],[703,15,533,15,"path"],[703,19,533,19],[703,20,533,20,"replace"],[703,27,533,27],[703,28,533,28],[703,38,533,38],[703,40,533,40],[703,42,533,42],[703,43,533,43],[703,44,533,44,"replace"],[703,51,533,51],[703,52,533,52],[703,58,533,58],[703,60,533,60],[703,63,533,63],[703,64,533,64],[704,6,534,4],[705,4,534,5],[706,6,534,5,"key"],[706,9,534,5],[707,6,534,5,"value"],[707,11,534,5],[707,13,535,4],[707,22,535,4,"transformOptsToQueryString"],[707,48,535,30,"transformOptsToQueryString"],[707,49,535,31,"transform"],[707,58,535,40],[707,60,535,42],[708,8,536,8],[708,12,536,14,"params"],[708,18,536,20],[708,21,536,23],[708,23,536,25],[709,8,537,8],[709,12,537,12,"transform"],[709,21,537,21],[709,22,537,22,"width"],[709,27,537,27],[709,29,537,29],[710,10,538,12,"params"],[710,16,538,18],[710,17,538,19,"push"],[710,21,538,23],[710,22,538,24],[710,31,538,33,"transform"],[710,40,538,42],[710,41,538,43,"width"],[710,46,538,48],[710,48,538,50],[710,49,538,51],[711,8,539,8],[712,8,540,8],[712,12,540,12,"transform"],[712,21,540,21],[712,22,540,22,"height"],[712,28,540,28],[712,30,540,30],[713,10,541,12,"params"],[713,16,541,18],[713,17,541,19,"push"],[713,21,541,23],[713,22,541,24],[713,32,541,34,"transform"],[713,41,541,43],[713,42,541,44,"height"],[713,48,541,50],[713,50,541,52],[713,51,541,53],[714,8,542,8],[715,8,543,8],[715,12,543,12,"transform"],[715,21,543,21],[715,22,543,22,"resize"],[715,28,543,28],[715,30,543,30],[716,10,544,12,"params"],[716,16,544,18],[716,17,544,19,"push"],[716,21,544,23],[716,22,544,24],[716,32,544,34,"transform"],[716,41,544,43],[716,42,544,44,"resize"],[716,48,544,50],[716,50,544,52],[716,51,544,53],[717,8,545,8],[718,8,546,8],[718,12,546,12,"transform"],[718,21,546,21],[718,22,546,22,"format"],[718,28,546,28],[718,30,546,30],[719,10,547,12,"params"],[719,16,547,18],[719,17,547,19,"push"],[719,21,547,23],[719,22,547,24],[719,32,547,34,"transform"],[719,41,547,43],[719,42,547,44,"format"],[719,48,547,50],[719,50,547,52],[719,51,547,53],[720,8,548,8],[721,8,549,8],[721,12,549,12,"transform"],[721,21,549,21],[721,22,549,22,"quality"],[721,29,549,29],[721,31,549,31],[722,10,550,12,"params"],[722,16,550,18],[722,17,550,19,"push"],[722,21,550,23],[722,22,550,24],[722,33,550,35,"transform"],[722,42,550,44],[722,43,550,45,"quality"],[722,50,550,52],[722,52,550,54],[722,53,550,55],[723,8,551,8],[724,8,552,8],[724,15,552,15,"params"],[724,21,552,21],[724,22,552,22,"join"],[724,26,552,26],[724,27,552,27],[724,30,552,30],[724,31,552,31],[725,6,553,4],[726,4,553,5],[727,2,553,5],[728,2,555,0,"exports"],[728,9,555,7],[728,10,555,8,"default"],[728,17,555,15],[728,20,555,18,"StorageFileApi"],[728,34,555,32],[729,0,555,33],[729,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageFileApi","constructor","uploadOrUpdate","__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA;4CCC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;AOkB;ICC;KDK;IEQ;+CCC;SD8C;KFC;IIO;+CDC;SCE;KJC;IKO;+CFC;SEmC;KLC;IMQ;+CHC;SGqB;KNC;IOO;+CJC;SIE;KPC;IQQ;+CLC;SKgB;KRC;ISQ;+CNC;SMgB;KTC;IUS;+CPC;SOiB;KVC;IWQ;+CRC;mCSO;sCTE;SQU;KXC;IaO;+CVC;SUoB;KbC;IcK;+CXC;SWc;KdC;IeK;+CZC;SYiB;KfC;IgBS;KhBsB;IiBM;+CdC;ScW;KjBC;IkBiE;+CfC;SeY;KlBC;ImBM;+ChBC;SgBY;KnBC;IoBC;KpBE;IqBC;KrBK;IsBC;KtBE;IuBC;KvBE;IwBC;KxBkB;CPC"}},"type":"js/module"}]}