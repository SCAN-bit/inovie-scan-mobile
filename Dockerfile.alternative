FROM node:20-slim

WORKDIR /app/inovie-scan-mobile

# Installer OpenJDK 11 (plus compatible avec Expo) et les dépendances nécessaires pour Android SDK
RUN apt-get update && apt-get install -y openjdk-11-jdk curl unzip

# Configurer les variables d'environnement Java
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
ENV JDK_VERSION=11
ENV GRADLE_OPTS="-Dorg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8"

# Télécharger et configurer Android SDK Command-line Tools
ENV ANDROID_SDK_ROOT=/opt/android-sdk
ENV PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools

RUN mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
RUN curl -o /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip \
    && unzip /tmp/cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools \
    && mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest

# Accepter les licences Android SDK et installer les plateformes/outils de build
RUN yes | sdkmanager --licenses
RUN sdkmanager --update
RUN sdkmanager "platforms;android-34" "build-tools;34.0.0"

# Copier les fichiers de dépendances pour tirer parti du cache Docker
COPY package.json package-lock.json ./

# Installer les dépendances npm
RUN npm install

# Copier le reste du code de l'application
COPY . .

# Définir le répertoire de travail pour les commandes Gradle
WORKDIR /app/inovie-scan-mobile/android

# Nettoyer le cache Gradle pour forcer le téléchargement des dépendances fraîches
RUN rm -rf /root/.gradle/caches

# Construire l'APK de release avec des options Gradle appropriées
RUN ./gradlew assembleRelease --stacktrace --info --no-daemon

# Exposer les ports si nécessaire (pour un serveur de développement, non critique pour le build d'APK)
EXPOSE 8081

# Commande par défaut (peut être surchargée lors du run)
CMD ["/bin/bash"] 