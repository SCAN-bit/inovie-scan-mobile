import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert, Linking, Platform } from 'react-native';
import * as FileSystem from 'expo-file-system';
import * as IntentLauncher from 'expo-intent-launcher';

class AppUpdateService {
  constructor() {
    // Configuration GitHub Releases (remplace Firebase App Distribution)
    this.GITHUB_OWNER = 'SCAN-bit'; // Nom d'utilisateur GitHub correct
    this.GITHUB_REPO = 'inovie-scan-mobile'; // √Ä remplacer par votre nom de repo
    this.GITHUB_API_URL = `https://api.github.com/repos/${this.GITHUB_OWNER}/${this.GITHUB_REPO}/releases/latest`;
    this.GITHUB_DOWNLOAD_URL = `https://github.com/${this.GITHUB_OWNER}/${this.GITHUB_REPO}/releases/latest`;
    
    this.UPDATE_CHECK_INTERVAL = 60 * 60 * 1000; // V√©rifier toutes les heures
    this.STORAGE_KEYS = {
      LAST_CHECK: 'app_update_last_check',
      LAST_VERSION: 'app_update_last_version',
      UPDATE_AVAILABLE: 'app_update_available',
      LAST_SEEN_VERSION: 'app_update_last_seen_version',
      AUTO_CHECK_ENABLED: 'app_update_auto_check'
    };
  }

  /**
   * V√©rifie s'il y a une mise √† jour disponible
   */
  async checkForUpdates(showNoUpdateMessage = false, forceCheck = false) {
    try {
      // D√©but v√©rification mises √† jour
      
      // Si forceCheck est activ√©, nettoyer le cache
      if (forceCheck) {
        await this.clearUpdateCache();
      }
      
      // Forcer le rechargement de la version actuelle pour √©viter le cache
      const currentVersion = this.getCurrentVersion();
      const latestVersion = await this.getLatestVersion();
      
      // Versions r√©cup√©r√©es
      
      // Comparaison des versions
      const comparisonResult = this.compareVersions(latestVersion, currentVersion);
      const isUpdateAvailable = comparisonResult > 0;
      
      // Comparaison des versions termin√©e
      
      // Sauvegarder les informations
      await AsyncStorage.setItem(this.STORAGE_KEYS.LAST_CHECK, Date.now().toString());
      await AsyncStorage.setItem(this.STORAGE_KEYS.UPDATE_AVAILABLE, isUpdateAvailable.toString());
      await AsyncStorage.setItem(this.STORAGE_KEYS.LAST_VERSION, latestVersion);
      
      if (isUpdateAvailable) {
        // Mise √† jour disponible
        return {
          available: true,
          latestVersion,
          currentVersion,
          downloadUrl: this.latestVersionInfo?.downloadUrl || this.GITHUB_DOWNLOAD_URL,
          releaseNotes: this.latestVersionInfo?.releaseNotes || 'Nouvelle version disponible'
        };
      } else {
        // Application √† jour
        if (showNoUpdateMessage) {
          Alert.alert(
            'Aucune mise √† jour',
            `Votre application est d√©j√† √† la derni√®re version (${currentVersion}).`,
            [{ text: 'OK' }]
          );
        }
        return {
          available: false,
          latestVersion,
          currentVersion
        };
      }
    } catch (error) {
      console.error('[AppUpdateService] Erreur lors de la v√©rification:', error);
      if (showNoUpdateMessage) {
        Alert.alert(
          'Erreur',
          'Impossible de v√©rifier les mises √† jour. V√©rifiez votre connexion internet.',
          [{ text: 'OK' }]
        );
      }
      return { available: false, error: error.message };
    }
  }

  /**
   * T√©l√©charge et installe la mise √† jour
   */
  async downloadAndInstallUpdate(updateInfo) {
    try {
      console.log('[AppUpdateService] T√©l√©chargement de la mise √† jour...');
      
      // Afficher une alerte de confirmation avec les notes de version
      const releaseNotes = this.latestVersionInfo?.releaseNotes || '';
      const message = `Une nouvelle version (${updateInfo.latestVersion}) est disponible.${releaseNotes ? `\n\nNouveaut√©s:\n${releaseNotes}` : ''}\n\nVoulez-vous la t√©l√©charger et l'installer maintenant?`;
      
      return new Promise((resolve) => {
        Alert.alert(
          'Mise √† jour disponible',
          message,
          [
            {
              text: 'Plus tard',
              style: 'cancel',
              onPress: () => resolve(false)
            },
            {
              text: 'T√©l√©charger',
              onPress: async () => {
                try {
                  // Obtenir le lien de t√©l√©chargement direct
                  const downloadUrl = await this.getDirectDownloadUrl();
                  
                  // T√©l√©charger et installer automatiquement l'APK
                  const success = await this.downloadApkAndInstall(downloadUrl);
                  resolve(success);
                } catch (error) {
                  console.error('[AppUpdateService] Erreur t√©l√©chargement:', error);
                  Alert.alert(
                    'Erreur',
                    'Impossible de t√©l√©charger la mise √† jour.',
                    [{ text: 'OK' }]
                  );
                  resolve(false);
                }
              }
            }
          ]
        );
      });
    } catch (error) {
      console.error('[AppUpdateService] Erreur installation:', error);
      throw error;
    }
  }

  /**
   * Ouvre le lien de release GitHub pour t√©l√©charger l'APK
   */
  async downloadApkAndInstall(downloadUrl, onProgress = null) {
    try {
      console.log('üîó [AppUpdateService] Ouverture du lien de release...');
      console.log('üîó [AppUpdateService] URL de release:', downloadUrl);
      
      if (!downloadUrl) {
        throw new Error('URL de release manquante');
      }
      
      // Afficher un message d'information
      Alert.alert(
        'Mise √† jour disponible',
        'Le navigateur va s\'ouvrir pour t√©l√©charger la mise √† jour.\n\nUne fois t√©l√©charg√©e, installez l\'APK manuellement.',
        [
          { text: 'Annuler', style: 'cancel' },
          {
            text: 'Ouvrir',
            onPress: async () => {
              try {
                // Ouvrir le lien de release dans le navigateur
                const supported = await Linking.canOpenURL(downloadUrl);
                if (supported) {
                  await Linking.openURL(downloadUrl);
                  console.log('[AppUpdateService] Lien de release ouvert');
                } else {
                  throw new Error('Impossible d\'ouvrir le lien');
                }
              } catch (error) {
                console.error('[AppUpdateService] Erreur ouverture lien:', error);
                Alert.alert('Erreur', 'Impossible d\'ouvrir le lien de t√©l√©chargement.');
              }
            }
          }
        ]
      );
      
      return true;
    } catch (error) {
      console.error('[AppUpdateService] Erreur ouverture lien:', error);
      Alert.alert(
        'Erreur',
        'Impossible d\'ouvrir le lien de t√©l√©chargement.',
        [{ text: 'OK' }]
      );
      return false;
    }
  }

  /**
   * V√©rification automatique des mises √† jour
   */
  async checkForUpdatesAutomatic() {
    try {
      const autoCheckEnabled = await this.isAutoCheckEnabled();
      if (!autoCheckEnabled) {
        console.log('‚ÑπÔ∏è [AppUpdateService] V√©rification automatique d√©sactiv√©e');
        return null;
      }

      const lastCheck = await AsyncStorage.getItem(this.STORAGE_KEYS.LAST_CHECK);
      const now = Date.now();
      
      // V√©rifier seulement si la derni√®re v√©rification date de plus d'une heure
      if (lastCheck && (now - parseInt(lastCheck)) < this.UPDATE_CHECK_INTERVAL) {
        console.log('‚ÑπÔ∏è [AppUpdateService] V√©rification automatique ignor√©e (trop r√©cente)');
        return null;
      }

      console.log('üîç [AppUpdateService] V√©rification automatique en cours...');
      const updateInfo = await this.checkForUpdates(false, true); // Force la v√©rification
      
      if (updateInfo.available) {
        // V√©rifier si cette version a d√©j√† √©t√© vue
        const lastSeenVersion = await AsyncStorage.getItem(this.STORAGE_KEYS.LAST_SEEN_VERSION);
        if (lastSeenVersion !== updateInfo.latestVersion) {
          // Sauvegarder l'info de mise √† jour pour l'alerte seulement si nouvelle version
          await AsyncStorage.setItem(this.STORAGE_KEYS.UPDATE_AVAILABLE, 'true');
          await AsyncStorage.setItem(this.STORAGE_KEYS.LAST_VERSION, updateInfo.latestVersion);
          console.log('‚úÖ [AppUpdateService] Nouvelle version d√©tect√©e:', updateInfo.latestVersion);
        } else {
          console.log('‚ÑπÔ∏è [AppUpdateService] Version d√©j√† vue:', updateInfo.latestVersion);
        }
      } else {
        console.log('‚ÑπÔ∏è [AppUpdateService] Aucune mise √† jour disponible');
      }
      
      return updateInfo;
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur v√©rification auto:', error);
      return null;
    }
  }

  /**
   * V√©rifie s'il y a une mise √† jour en attente d'affichage
   */
  async hasPendingUpdate() {
    try {
      const updateAvailable = await AsyncStorage.getItem(this.STORAGE_KEYS.UPDATE_AVAILABLE);
      return updateAvailable === 'true';
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur v√©rification mise √† jour en attente:', error);
      return false;
    }
  }

  /**
   * Nettoie le cache des mises √† jour pour forcer une v√©rification fra√Æche
   */
  async clearUpdateCache() {
    try {
      console.log('üßπ [AppUpdateService] Nettoyage du cache des mises √† jour...');
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_CHECK);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.UPDATE_AVAILABLE);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_VERSION);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_SEEN_VERSION);
      console.log('‚úÖ [AppUpdateService] Cache des mises √† jour nettoy√©');
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur nettoyage cache:', error);
    }
  }

  /**
   * Marque la mise √† jour comme vue (masque l'alerte)
   */
  async markUpdateAsSeen() {
    try {
      const lastVersion = await AsyncStorage.getItem(this.STORAGE_KEYS.LAST_VERSION);
      await AsyncStorage.setItem(this.STORAGE_KEYS.UPDATE_AVAILABLE, 'false');
      if (lastVersion) {
        await AsyncStorage.setItem(this.STORAGE_KEYS.LAST_SEEN_VERSION, lastVersion);
      }
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur marquage mise √† jour vue:', error);
    }
  }

  /**
   * Vide compl√®tement le cache des mises √† jour
   */
  async clearUpdateCache() {
    try {
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_CHECK);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_VERSION);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.UPDATE_AVAILABLE);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_SEEN_VERSION);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.AUTO_CHECK_ENABLED);
      
      // Cache clearing d√©sactiv√© pour √©viter les warnings webpack en mode web
      
      console.log('‚úÖ [AppUpdateService] Cache des mises √† jour vid√©');
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur vidage cache:', error);
    }
  }

  /**
   * Obtient la version actuelle de l'application (version + build)
   */
  getCurrentVersion() {
    try {
      // Lire depuis app.json pour la version et le versionCode
      const appJson = require('../app.json');
      const version = appJson.expo.version;
      const buildNumber = appJson.expo.android?.versionCode || 55; // Fallback vers 55 si pas d√©fini
      const fullVersion = `${version}.${buildNumber}`;
      
      // console.log('üì± [AppUpdateService] Version actuelle:', fullVersion);
      return fullVersion;
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur lecture version:', error);
      return '1.0.0.0'; // Version par d√©faut
    }
  }

  /**
   * Obtient la version actuelle de l'application (m√©thode statique pour utilisation dans les composants)
   */
  static getCurrentVersion() {
    try {
      // Lire depuis app.json pour la version et le versionCode
      const appJson = require('../app.json');
      const version = appJson.expo.version;
      const buildNumber = appJson.expo.android?.versionCode || 55; // Fallback vers 55 si pas d√©fini
      const fullVersion = `${version}.${buildNumber}`;
      
      // console.log('üì± [AppUpdateService] Version actuelle (statique):', fullVersion);
      console.log('üì± [AppUpdateService] D√©tails version:', {
        version: version,
        buildNumber: buildNumber,
        fullVersion: fullVersion
      });
      return fullVersion;
    } catch (error) {
      console.warn('‚ùå [AppUpdateService] Impossible de lire la version depuis app.json:', error.message);
      console.warn('‚ùå [AppUpdateService] Utilisation de la version par d√©faut: 1.0.0.0');
      return '1.0.0.0';
    }
  }

  /**
   * Obtient la derni√®re version disponible depuis GitHub Releases
   */
  async getLatestVersion() {
    try {
      console.log('üîç [AppUpdateService] V√©rification GitHub Releases...');
      console.log('üîó [AppUpdateService] URL API:', this.GITHUB_API_URL);
      
      const response = await fetch(this.GITHUB_API_URL, {
        method: 'GET',
        headers: {
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'inovie-scan-mobile'
        }
      });
      
      console.log('üì° [AppUpdateService] Statut r√©ponse:', response.status, response.statusText);
      
      if (response.ok) {
        const data = await response.json();
        console.log('üì¶ [AppUpdateService] Donn√©es GitHub re√ßues:', {
          tag_name: data.tag_name,
          name: data.name,
          published_at: data.published_at,
          html_url: data.html_url
        });
        
        if (data.tag_name || data.name) {
          // Utiliser tag_name si disponible, sinon utiliser name
          const versionSource = data.tag_name || data.name;
          const latestVersion = versionSource.replace(/^[vV]/, ''); // Enlever le 'v' ou 'V' du tag
          const releaseNotes = data.body || 'Nouvelle version disponible';
          
          // Le tag GitHub contient d√©j√† la version compl√®te (ex: v1.0.6.50)
          const fullVersion = latestVersion;
          
          // Utiliser directement le lien de release (plus simple et fiable)
          const releaseUrl = data.html_url;
          console.log('üîó [AppUpdateService] Lien de release:', releaseUrl);
          
          // Sauvegarder les informations
          this.latestVersionInfo = {
            version: fullVersion,
            releaseNotes: releaseNotes,
            isForced: false,
            downloadUrl: releaseUrl,
            releaseId: data.id.toString(),
            publishedAt: data.published_at
          };
          
          console.log('‚úÖ [AppUpdateService] Derni√®re version GitHub trouv√©e:', fullVersion);
          return fullVersion;
        } else {
          console.warn('‚ö†Ô∏è [AppUpdateService] Aucun tag_name ou name dans la r√©ponse GitHub');
        }
      } else {
        console.error('‚ùå [AppUpdateService] Erreur GitHub API:', response.status, response.statusText);
        const errorText = await response.text();
        console.error('‚ùå [AppUpdateService] D√©tails erreur:', errorText);
      }
      
      // M√©thode alternative : version locale
      console.log('üîÑ [AppUpdateService] Fallback vers m√©thode alternative...');
      return await this.getLatestVersionFromPage();
      
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur API GitHub:', error);
      console.error('‚ùå [AppUpdateService] D√©tails erreur:', error.message);
      // En cas d'erreur, essayer la m√©thode alternative
      return await this.getLatestVersionFromPage();
    }
  }

  /**
   * M√©thode alternative : r√©cup√®re la version depuis la page GitHub Releases
   */
  async getLatestVersionFromPage() {
    try {
      console.log('üîç [AppUpdateService] Tentative r√©cup√©ration version depuis page GitHub...');
      
      // Essayer de r√©cup√©rer depuis la page GitHub Releases
      const response = await fetch(this.GITHUB_DOWNLOAD_URL, {
        method: 'GET',
        headers: {
          'User-Agent': 'inovie-scan-mobile'
        }
      });
      
      if (response.ok) {
        const html = await response.text();
        
        // Chercher la version dans le HTML de la page GitHub
        const versionMatch = html.match(/tag\/([0-9]+\.[0-9]+\.[0-9]+(?:\.[0-9]+)?)/);
        if (versionMatch && versionMatch[1]) {
          const latestVersion = versionMatch[1];
          console.log('‚úÖ [AppUpdateService] Version trouv√©e depuis page GitHub:', latestVersion);
          
          this.latestVersionInfo = {
            version: latestVersion,
            releaseNotes: 'Mise √† jour disponible',
            isForced: false,
            downloadUrl: this.GITHUB_DOWNLOAD_URL
          };
          
          return latestVersion;
        }
      }
      
      // Si pas de version trouv√©e, retourner la version actuelle
      const currentVersion = this.getCurrentVersion();
      console.log('‚ö†Ô∏è [AppUpdateService] Aucune version trouv√©e, utilisation version actuelle:', currentVersion);
      
      this.latestVersionInfo = {
        version: currentVersion,
        releaseNotes: 'Application √† jour',
        isForced: false,
        downloadUrl: this.GITHUB_DOWNLOAD_URL
      };
      
      return currentVersion;
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur r√©cup√©ration version page:', error);
      const currentVersion = this.getCurrentVersion();
      console.log('‚ö†Ô∏è [AppUpdateService] Fallback vers version actuelle:', currentVersion);
      return currentVersion;
    }
  }

  /**
   * Compare deux versions (format: "1.2.3.4")
   * Retourne: 1 si version1 > version2, -1 si version1 < version2, 0 si √©gales
   */
  compareVersions(version1, version2) {
    try {
      // Normaliser les versions (enlever les espaces, pr√©fixes 'v', etc.)
      const v1 = version1.trim().replace(/^[vV]/, '').toLowerCase();
      const v2 = version2.trim().replace(/^[vV]/, '').toLowerCase();
      
      console.log(`üîç [AppUpdateService] Comparaison: "${v1}" vs "${v2}"`);
      
      // Diviser en parties num√©riques
      const v1Parts = v1.split('.').map(part => {
        const num = parseInt(part, 10);
        return isNaN(num) ? 0 : num;
      });
      const v2Parts = v2.split('.').map(part => {
        const num = parseInt(part, 10);
        return isNaN(num) ? 0 : num;
      });
      
      // Comparer partie par partie
      const maxLength = Math.max(v1Parts.length, v2Parts.length);
      for (let i = 0; i < maxLength; i++) {
        const v1Part = v1Parts[i] || 0;
        const v2Part = v2Parts[i] || 0;
        
        if (v1Part > v2Part) {
          console.log(`üÜï [AppUpdateService] Version GitHub plus r√©cente (${v1Part} > ${v2Part})`);
          return 1;
        }
        if (v1Part < v2Part) {
          console.log(`üì± [AppUpdateService] Version locale plus r√©cente (${v1Part} < ${v2Part})`);
          return -1;
        }
      }
      
      console.log('‚úÖ [AppUpdateService] Versions identiques - Aucune mise √† jour');
      return 0;
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur comparaison versions:', error);
      // En cas d'erreur, consid√©rer qu'il n'y a pas de mise √† jour
      return 0;
    }
  }

  /**
   * Active/d√©sactive la v√©rification automatique
   */
  async setAutoCheckEnabled(enabled) {
    await AsyncStorage.setItem(this.STORAGE_KEYS.AUTO_CHECK_ENABLED, enabled.toString());
  }

  /**
   * Vide le cache des mises √† jour pour forcer une nouvelle v√©rification
   */
  async clearUpdateCache() {
    try {
      console.log('üóëÔ∏è [AppUpdateService] Vidage du cache des mises √† jour...');
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_CHECK);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_VERSION);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.UPDATE_AVAILABLE);
      await AsyncStorage.removeItem(this.STORAGE_KEYS.LAST_SEEN_VERSION);
      console.log('‚úÖ [AppUpdateService] Cache vid√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur lors du vidage du cache:', error);
    }
  }

  /**
   * Force une v√©rification des mises √† jour (ignore le cache)
   */
  async forceCheckForUpdates(showNoUpdateMessage = false) {
    console.log('üîÑ [AppUpdateService] V√©rification forc√©e des mises √† jour...');
    await this.clearUpdateCache();
    return await this.checkForUpdates(showNoUpdateMessage, true);
  }


  /**
   * V√©rifie si la v√©rification automatique est activ√©e
   */
  async isAutoCheckEnabled() {
    const enabled = await AsyncStorage.getItem(this.STORAGE_KEYS.AUTO_CHECK_ENABLED);
    return enabled !== 'false'; // Activ√© par d√©faut
  }

  /**
   * Obtient les informations de mise √† jour en cache
   */
  async getCachedUpdateInfo() {
    try {
      const available = await AsyncStorage.getItem(this.STORAGE_KEYS.UPDATE_AVAILABLE);
      const lastCheck = await AsyncStorage.getItem(this.STORAGE_KEYS.LAST_CHECK);
      
      return {
        available: available === 'true',
        lastCheck: lastCheck ? new Date(parseInt(lastCheck)) : null
      };
    } catch (error) {
      return { available: false, lastCheck: null };
    }
  }

  /**
   * Obtient le lien de t√©l√©chargement direct pour la derni√®re version
   */
  async getDirectDownloadUrl() {
    try {
      // Si nous avons les informations de la derni√®re release GitHub
      if (this.latestVersionInfo && this.latestVersionInfo.downloadUrl) {
        console.log('üîó [AppUpdateService] URL de t√©l√©chargement GitHub:', this.latestVersionInfo.downloadUrl);
        return this.latestVersionInfo.downloadUrl;
      }
      
      // Fallback vers l'URL g√©n√©rale GitHub
      return this.GITHUB_DOWNLOAD_URL;
    } catch (error) {
      console.error('‚ùå [AppUpdateService] Erreur URL t√©l√©chargement:', error);
      return this.GITHUB_DOWNLOAD_URL;
    }
  }
}

export default new AppUpdateService(); 

