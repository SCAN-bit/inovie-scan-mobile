{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"rcd0dMwf8BS2g+8U1wyhIOxtYEo="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"4pxOr+e+5cSZAdeEKxSt3F7LoKY="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"react","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":0,"index":414},"end":{"line":9,"column":31,"index":445}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"invariant","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":11,"column":0,"index":481},"end":{"line":11,"column":34,"index":515}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}},{"name":"react-native","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":12,"column":0,"index":516},"end":{"line":24,"column":22,"index":714}}],"key":"XEo4Z+Aarw9Y7I7ZLBt66vGLAVQ="}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":33,"column":0,"index":856},"end":{"line":33,"column":66,"index":922}}],"key":"bn+lbxpMbf3je7YiD+sp2eAm3NM="}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":38,"column":0,"index":1052},"end":{"line":38,"column":66,"index":1118}}],"key":"udDdKFGO2nasp6gS3VqBD6s+kqU="}},{"name":"../State","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":39,"column":0,"index":1119},"end":{"line":39,"column":33,"index":1152}}],"key":"Q8nOM11Vuvfos2IZ/lO9FOcbk+g="}},{"name":"react/jsx-runtime","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"5dCMGbjkz1QWCPjOwzvy5ZBkuK8="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = undefined;\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));\n  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));\n  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));\n  var _react = _interopRequireWildcard(require(_dependencyMap[6]));\n  var React = _react;\n  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));\n  var _reactNative = require(_dependencyMap[8]);\n  var _PanGestureHandler = require(_dependencyMap[9]);\n  var _TapGestureHandler = require(_dependencyMap[10]);\n  var _State = require(_dependencyMap[11]);\n  var _jsxRuntime = require(_dependencyMap[12]);\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); } // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n  var DRAG_TOSS = 0.05;\n  var IDLE = 'Idle';\n  var DRAGGING = 'Dragging';\n  var SETTLING = 'Settling';\n\n  // Animated.AnimatedInterpolation has been converted to a generic type\n  // in @types/react-native 0.70. This way we can maintain compatibility\n  // with all versions of @types/react-native`\n  var DrawerLayout = exports.default = /*#__PURE__*/function (_Component) {\n    function DrawerLayout(_props) {\n      var _this;\n      (0, _classCallCheck2.default)(this, DrawerLayout);\n      _this = _callSuper(this, DrawerLayout, [_props]);\n      _this.accessibilityIsModalView = /*#__PURE__*/React.createRef();\n      _this.pointerEventsView = /*#__PURE__*/React.createRef();\n      _this.panGestureHandler = /*#__PURE__*/React.createRef();\n      _this.drawerShown = false;\n      _this.updateAnimatedEvent = (props, state) => {\n        // Event definition is based on\n        var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n        var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n        var dragX = dragXValue;\n        var touchX = touchXValue;\n        if (drawerPosition !== 'left') {\n          // Most of the code is written in a way to handle left-side drawer. In\n          // order to handle right-side drawer the only thing we need to do is to\n          // reverse events coming from gesture handler in a way they emulate\n          // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n          // calulcated by subtracing real touchX from the width of the container\n          // (such that when touch happens at the right edge the value is simply 0)\n          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        }\n\n        // While closing the drawer when user starts gesture outside of its area (in greyed\n        // out part of the window), we want the drawer to follow only once finger reaches the\n        // edge of the drawer.\n        // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n        // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n        // an arrow pointing left\n        // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    +---------------+    +---------------+    +---------------+    +---------------+\n        //\n        // For the above to work properly we define animated value that will keep\n        // start position of the gesture. Then we use that value to calculate how\n        // much we need to subtract from the dragX. If the gesture started on the\n        // greyed out area we take the distance from the edge of the drawer to the\n        // start position. Otherwise we don't subtract at all and the drawer be\n        // pulled back as soon as you start the pan.\n        //\n        // This is used only when drawerType is \"front\"\n        //\n        var translationX = dragX;\n        if (drawerType === 'front') {\n          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n          var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n        }\n        _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        var gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n        if (_this.props.onDrawerSlide) {\n          gestureOptions.listener = ev => {\n            var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            var position = translationX / _this.state.containerWidth;\n            _this.props.onDrawerSlide?.(position);\n          };\n        }\n        _this.onGestureEvent = _reactNative.Animated.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      };\n      _this.handleContainerLayout = _ref => {\n        var nativeEvent = _ref.nativeEvent;\n        _this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      };\n      _this.emitStateChanged = (newState, drawerWillShow) => {\n        _this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n      };\n      _this.openingHandlerStateChange = _ref2 => {\n        var nativeEvent = _ref2.nativeEvent;\n        if (nativeEvent.oldState === _State.State.ACTIVE) {\n          _this.handleRelease({\n            nativeEvent\n          });\n        } else if (nativeEvent.state === _State.State.ACTIVE) {\n          _this.emitStateChanged(DRAGGING, false);\n          _this.setState({\n            drawerState: DRAGGING\n          });\n          if (_this.props.keyboardDismissMode === 'on-drag') {\n            _reactNative.Keyboard.dismiss();\n          }\n          if (_this.props.hideStatusBar) {\n            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n          }\n        }\n      };\n      _this.onTapHandlerStateChange = _ref3 => {\n        var nativeEvent = _ref3.nativeEvent;\n        if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n          _this.closeDrawer();\n        }\n      };\n      _this.handleRelease = _ref4 => {\n        var nativeEvent = _ref4.nativeEvent;\n        var _this$props = _this.props,\n          drawerWidth = _this$props.drawerWidth,\n          drawerPosition = _this$props.drawerPosition,\n          drawerType = _this$props.drawerType;\n        var containerWidth = _this.state.containerWidth;\n        var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n        if (drawerPosition !== 'left') {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n        var gestureStartX = touchX - dragX;\n        var dragOffsetBasedOnStart = 0;\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n        var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        var shouldOpen = projOffsetX > drawerWidth / 2;\n        if (shouldOpen) {\n          _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          _this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      };\n      _this.updateShowing = showing => {\n        _this.drawerShown = showing;\n        _this.accessibilityIsModalView.current?.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        _this.pointerEventsView.current?.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        var _this$props2 = _this.props,\n          drawerPosition = _this$props2.drawerPosition,\n          minSwipeDistance = _this$props2.minSwipeDistance,\n          edgeWidth = _this$props2.edgeWidth;\n        var fromLeft = drawerPosition === 'left';\n        // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n        // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        };\n        // @ts-ignore internal API, maybe could be fixed in handler types\n        _this.panGestureHandler.current?.setNativeProps({\n          hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      };\n      _this.animateDrawer = (fromValue, toValue, velocity, speed) => {\n        _this.state.dragX.setValue(0);\n        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n        if (fromValue != null) {\n          var nextFramePosition = fromValue;\n          if (_this.props.useNativeAnimations) {\n            // When using native driver, we predict the next position of the\n            // animation because it takes one frame of a roundtrip to pass RELEASE\n            // event from native driver to JS before we can start animating. Without\n            // it, it is more noticable that the frame is dropped.\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n          _this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n        var willShow = toValue !== 0;\n        _this.updateShowing(willShow);\n        _this.emitStateChanged(SETTLING, willShow);\n        _this.setState({\n          drawerState: SETTLING\n        });\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n        }\n        _reactNative.Animated.spring(_this.state.drawerTranslation, {\n          velocity,\n          bounciness: 0,\n          toValue,\n          useNativeDriver: _this.props.useNativeAnimations,\n          speed: speed ?? undefined\n        }).start(_ref5 => {\n          var finished = _ref5.finished;\n          if (finished) {\n            _this.emitStateChanged(IDLE, willShow);\n            _this.setState({\n              drawerOpened: willShow\n            });\n            if (_this.state.drawerState !== DRAGGING) {\n              // It's possilbe that user started drag while the drawer\n              // was settling, don't override state in this case\n              _this.setState({\n                drawerState: IDLE\n              });\n            }\n            if (willShow) {\n              _this.props.onDrawerOpen?.();\n            } else {\n              _this.props.onDrawerClose?.();\n            }\n          }\n        });\n      };\n      _this.openDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _this.animateDrawer(\n        // TODO: decide if it should be null or undefined is the proper value\n        undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n        // We need to force the update, otherwise the overlay is not rerendered and\n        // it would not be clickable\n        _this.forceUpdate();\n      };\n      _this.closeDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        // TODO: decide if it should be null or undefined is the proper value\n        _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n        // We need to force the update, otherwise the overlay is not rerendered and\n        // it would be still clickable\n        _this.forceUpdate();\n      };\n      _this.renderOverlay = () => {\n        /* Overlay styles */\n        (0, _invariant.default)(_this.openValue, 'should be set');\n        var overlayOpacity;\n        if (_this.state.drawerState !== IDLE) {\n          overlayOpacity = _this.openValue;\n        } else {\n          overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n        }\n        var dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: _this.props.overlayColor\n        };\n        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TapGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: _this.onTapHandlerStateChange,\n          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {\n            pointerEvents: _this.drawerShown ? 'auto' : 'none',\n            ref: _this.pointerEventsView,\n            style: [styles.overlay, dynamicOverlayStyles]\n          })\n        });\n      };\n      _this.renderDrawer = () => {\n        var _this$props3 = _this.props,\n          drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n          drawerWidth = _this$props3.drawerWidth,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          drawerContainerStyle = _this$props3.drawerContainerStyle,\n          contentContainerStyle = _this$props3.contentContainerStyle;\n        var fromLeft = drawerPosition === 'left';\n        var drawerSlide = drawerType !== 'back';\n        var containerSlide = drawerType !== 'front';\n\n        // We rely on row and row-reverse flex directions to position the drawer\n        // properly. Apparently for RTL these are flipped which requires us to use\n        // the opposite setting for the drawer to appear from left or right\n        // according to the drawerPosition prop\n        var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n        var dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        var openValue = _this.openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        var containerStyles;\n        if (containerSlide) {\n          var containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n        var drawerTranslateX = 0;\n        if (drawerSlide) {\n          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          if (_this.state.drawerState !== IDLE) {\n            drawerTranslateX = openValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [closedDrawerOffset, 0],\n              extrapolate: 'clamp'\n            });\n          } else {\n            drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n          }\n        }\n        var drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {\n          style: styles.main,\n          onLayout: _this.handleContainerLayout,\n          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {\n            style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n            importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',\n            children: [typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()]\n          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {\n            pointerEvents: \"box-none\",\n            ref: _this.accessibilityIsModalView,\n            accessibilityViewIsModal: _this.drawerShown,\n            style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {\n              style: dynamicDrawerStyles,\n              children: _this.props.renderNavigationView(_this.openValue)\n            })\n          })]\n        });\n      };\n      _this.setPanGestureRef = ref => {\n        // TODO(TS): make sure it is OK taken from\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n        _this.panGestureHandler.current = ref;\n        _this.props.onGestureRef?.(ref);\n      };\n      var _dragX = new _reactNative.Animated.Value(0);\n      var _touchX = new _reactNative.Animated.Value(0);\n      var _drawerTranslation = new _reactNative.Animated.Value(0);\n      _this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      _this.updateAnimatedEvent(_props, _this.state);\n      return _this;\n    }\n    (0, _inherits2.default)(DrawerLayout, _Component);\n    return (0, _createClass2.default)(DrawerLayout, [{\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n          this.updateAnimatedEvent(props, state);\n        }\n        return true;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props4 = this.props,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerLockMode = _this$props4.drawerLockMode,\n          edgeWidth = _this$props4.edgeWidth,\n          minSwipeDistance = _this$props4.minSwipeDistance;\n        var fromLeft = drawerPosition === 'left';\n\n        // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n        // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        };\n        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PanGestureHandler.PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        , {\n          userSelect: this.props.userSelect,\n          activeCursor: this.props.activeCursor,\n          mouseButton: this.props.mouseButton,\n          enableContextMenu: this.props.enableContextMenu,\n          ref: this.setPanGestureRef,\n          hitSlop: hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance,\n          failOffsetY: [-15, 15],\n          onGestureEvent: this.onGestureEvent,\n          onHandlerStateChange: this.openingHandlerStateChange,\n          enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n          enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n          children: this.renderDrawer()\n        });\n      }\n    }]);\n  }(_react.Component);\n  DrawerLayout.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  };\n  DrawerLayout.positions = {\n    Left: 'left',\n    Right: 'right'\n  };\n  var styles = _reactNative.StyleSheet.create({\n    drawerContainer: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ..._reactNative.StyleSheet.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":507,"map":[[12,2,9,0],[12,6,9,0,"_react"],[12,12,9,0],[12,15,9,0,"_interopRequireWildcard"],[12,38,9,0],[12,39,9,0,"require"],[12,46,9,0],[12,47,9,0,"_dependencyMap"],[12,61,9,0],[13,2,9,31],[13,6,9,31,"React"],[13,11,9,31],[13,14,9,31,"_react"],[13,20,9,31],[14,2,11,0],[14,6,11,0,"_invariant"],[14,16,11,0],[14,19,11,0,"_interopRequireDefault"],[14,41,11,0],[14,42,11,0,"require"],[14,49,11,0],[14,50,11,0,"_dependencyMap"],[14,64,11,0],[15,2,12,0],[15,6,12,0,"_reactNative"],[15,18,12,0],[15,21,12,0,"require"],[15,28,12,0],[15,29,12,0,"_dependencyMap"],[15,43,12,0],[16,2,33,0],[16,6,33,0,"_PanGestureHandler"],[16,24,33,0],[16,27,33,0,"require"],[16,34,33,0],[16,35,33,0,"_dependencyMap"],[16,49,33,0],[17,2,38,0],[17,6,38,0,"_TapGestureHandler"],[17,24,38,0],[17,27,38,0,"require"],[17,34,38,0],[17,35,38,0,"_dependencyMap"],[17,49,38,0],[18,2,39,0],[18,6,39,0,"_State"],[18,12,39,0],[18,15,39,0,"require"],[18,22,39,0],[18,23,39,0,"_dependencyMap"],[18,37,39,0],[19,2,39,33],[19,6,39,33,"_jsxRuntime"],[19,17,39,33],[19,20,39,33,"require"],[19,27,39,33],[19,28,39,33,"_dependencyMap"],[19,42,39,33],[20,2,39,33],[20,11,39,33,"_interopRequireWildcard"],[20,35,39,33,"e"],[20,36,39,33],[20,38,39,33,"t"],[20,39,39,33],[20,68,39,33,"WeakMap"],[20,75,39,33],[20,81,39,33,"r"],[20,82,39,33],[20,89,39,33,"WeakMap"],[20,96,39,33],[20,100,39,33,"n"],[20,101,39,33],[20,108,39,33,"WeakMap"],[20,115,39,33],[20,127,39,33,"_interopRequireWildcard"],[20,150,39,33],[20,162,39,33,"_interopRequireWildcard"],[20,163,39,33,"e"],[20,164,39,33],[20,166,39,33,"t"],[20,167,39,33],[20,176,39,33,"t"],[20,177,39,33],[20,181,39,33,"e"],[20,182,39,33],[20,186,39,33,"e"],[20,187,39,33],[20,188,39,33,"__esModule"],[20,198,39,33],[20,207,39,33,"e"],[20,208,39,33],[20,214,39,33,"o"],[20,215,39,33],[20,217,39,33,"i"],[20,218,39,33],[20,220,39,33,"f"],[20,221,39,33],[20,226,39,33,"__proto__"],[20,235,39,33],[20,243,39,33,"default"],[20,250,39,33],[20,252,39,33,"e"],[20,253,39,33],[20,270,39,33,"e"],[20,271,39,33],[20,294,39,33,"e"],[20,295,39,33],[20,320,39,33,"e"],[20,321,39,33],[20,330,39,33,"f"],[20,331,39,33],[20,337,39,33,"o"],[20,338,39,33],[20,341,39,33,"t"],[20,342,39,33],[20,345,39,33,"n"],[20,346,39,33],[20,349,39,33,"r"],[20,350,39,33],[20,358,39,33,"o"],[20,359,39,33],[20,360,39,33,"has"],[20,363,39,33],[20,364,39,33,"e"],[20,365,39,33],[20,375,39,33,"o"],[20,376,39,33],[20,377,39,33,"get"],[20,380,39,33],[20,381,39,33,"e"],[20,382,39,33],[20,385,39,33,"o"],[20,386,39,33],[20,387,39,33,"set"],[20,390,39,33],[20,391,39,33,"e"],[20,392,39,33],[20,394,39,33,"f"],[20,395,39,33],[20,409,39,33,"_t"],[20,411,39,33],[20,415,39,33,"e"],[20,416,39,33],[20,432,39,33,"_t"],[20,434,39,33],[20,441,39,33,"hasOwnProperty"],[20,455,39,33],[20,456,39,33,"call"],[20,460,39,33],[20,461,39,33,"e"],[20,462,39,33],[20,464,39,33,"_t"],[20,466,39,33],[20,473,39,33,"i"],[20,474,39,33],[20,478,39,33,"o"],[20,479,39,33],[20,482,39,33,"Object"],[20,488,39,33],[20,489,39,33,"defineProperty"],[20,503,39,33],[20,508,39,33,"Object"],[20,514,39,33],[20,515,39,33,"getOwnPropertyDescriptor"],[20,539,39,33],[20,540,39,33,"e"],[20,541,39,33],[20,543,39,33,"_t"],[20,545,39,33],[20,552,39,33,"i"],[20,553,39,33],[20,554,39,33,"get"],[20,557,39,33],[20,561,39,33,"i"],[20,562,39,33],[20,563,39,33,"set"],[20,566,39,33],[20,570,39,33,"o"],[20,571,39,33],[20,572,39,33,"f"],[20,573,39,33],[20,575,39,33,"_t"],[20,577,39,33],[20,579,39,33,"i"],[20,580,39,33],[20,584,39,33,"f"],[20,585,39,33],[20,586,39,33,"_t"],[20,588,39,33],[20,592,39,33,"e"],[20,593,39,33],[20,594,39,33,"_t"],[20,596,39,33],[20,607,39,33,"f"],[20,608,39,33],[20,613,39,33,"e"],[20,614,39,33],[20,616,39,33,"t"],[20,617,39,33],[21,2,39,33],[21,11,39,33,"_callSuper"],[21,22,39,33,"t"],[21,23,39,33],[21,25,39,33,"o"],[21,26,39,33],[21,28,39,33,"e"],[21,29,39,33],[21,40,39,33,"o"],[21,41,39,33],[21,48,39,33,"_getPrototypeOf2"],[21,64,39,33],[21,65,39,33,"default"],[21,72,39,33],[21,74,39,33,"o"],[21,75,39,33],[21,82,39,33,"_possibleConstructorReturn2"],[21,109,39,33],[21,110,39,33,"default"],[21,117,39,33],[21,119,39,33,"t"],[21,120,39,33],[21,122,39,33,"_isNativeReflectConstruct"],[21,147,39,33],[21,152,39,33,"Reflect"],[21,159,39,33],[21,160,39,33,"construct"],[21,169,39,33],[21,170,39,33,"o"],[21,171,39,33],[21,173,39,33,"e"],[21,174,39,33],[21,186,39,33,"_getPrototypeOf2"],[21,202,39,33],[21,203,39,33,"default"],[21,210,39,33],[21,212,39,33,"t"],[21,213,39,33],[21,215,39,33,"constructor"],[21,226,39,33],[21,230,39,33,"o"],[21,231,39,33],[21,232,39,33,"apply"],[21,237,39,33],[21,238,39,33,"t"],[21,239,39,33],[21,241,39,33,"e"],[21,242,39,33],[22,2,39,33],[22,11,39,33,"_isNativeReflectConstruct"],[22,37,39,33],[22,51,39,33,"t"],[22,52,39,33],[22,56,39,33,"Boolean"],[22,63,39,33],[22,64,39,33,"prototype"],[22,73,39,33],[22,74,39,33,"valueOf"],[22,81,39,33],[22,82,39,33,"call"],[22,86,39,33],[22,87,39,33,"Reflect"],[22,94,39,33],[22,95,39,33,"construct"],[22,104,39,33],[22,105,39,33,"Boolean"],[22,112,39,33],[22,145,39,33,"t"],[22,146,39,33],[22,159,39,33,"_isNativeReflectConstruct"],[22,184,39,33],[22,196,39,33,"_isNativeReflectConstruct"],[22,197,39,33],[22,210,39,33,"t"],[22,211,39,33],[22,221,1,0],[23,2,2,0],[24,2,3,0],[25,2,4,0],[26,2,5,0],[27,2,6,0],[28,2,7,0],[29,2,41,0],[29,6,41,6,"DRAG_TOSS"],[29,15,41,15],[29,18,41,18],[29,22,41,22],[30,2,43,0],[30,6,43,6,"IDLE"],[30,10,43,23],[30,13,43,26],[30,19,43,32],[31,2,44,0],[31,6,44,6,"DRAGGING"],[31,14,44,27],[31,17,44,30],[31,27,44,40],[32,2,45,0],[32,6,45,6,"SETTLING"],[32,14,45,27],[32,17,45,30],[32,27,45,40],[34,2,57,0],[35,2,58,0],[36,2,59,0],[37,2,59,0],[37,6,202,21,"DrawerLayout"],[37,18,202,33],[37,21,202,33,"exports"],[37,28,202,33],[37,29,202,33,"default"],[37,36,202,33],[37,62,202,33,"_Component"],[37,72,202,33],[38,4,218,2],[38,13,218,2,"DrawerLayout"],[38,26,218,14,"props"],[38,32,218,38],[38,34,218,40],[39,6,218,40],[39,10,218,40,"_this"],[39,15,218,40],[40,6,218,40],[40,10,218,40,"_classCallCheck2"],[40,26,218,40],[40,27,218,40,"default"],[40,34,218,40],[40,42,218,40,"DrawerLayout"],[40,54,218,40],[41,6,219,4,"_this"],[41,11,219,4],[41,14,219,4,"_callSuper"],[41,24,219,4],[41,31,219,4,"DrawerLayout"],[41,43,219,4],[41,46,219,10,"props"],[41,52,219,15],[42,6,219,17,"_this"],[42,11,219,17],[42,12,254,10,"accessibilityIsModalView"],[42,36,254,34],[42,52,254,37,"React"],[42,57,254,42],[42,58,254,43,"createRef"],[42,67,254,52],[42,68,254,59],[42,69,254,60],[43,6,254,60,"_this"],[43,11,254,60],[43,12,255,10,"pointerEventsView"],[43,29,255,27],[43,45,255,30,"React"],[43,50,255,35],[43,51,255,36,"createRef"],[43,60,255,45],[43,61,255,52],[43,62,255,53],[44,6,255,53,"_this"],[44,11,255,53],[44,12,256,10,"panGestureHandler"],[44,29,256,27],[44,45,256,30,"React"],[44,50,256,35],[44,51,256,36,"createRef"],[44,60,256,45],[44,61,256,72],[44,62,256,73],[45,6,256,73,"_this"],[45,11,256,73],[45,12,257,10,"drawerShown"],[45,23,257,21],[45,26,257,24],[45,31,257,29],[46,6,257,29,"_this"],[46,11,257,29],[46,12,264,10,"updateAnimatedEvent"],[46,31,264,29],[46,34,264,32],[46,35,265,4,"props"],[46,40,265,28],[46,42,266,4,"state"],[46,47,266,28],[46,52,267,7],[47,8,268,4],[48,8,269,4],[48,12,269,12,"drawerPosition"],[48,26,269,26],[48,29,269,56,"props"],[48,34,269,61],[48,35,269,12,"drawerPosition"],[48,49,269,26],[49,10,269,28,"drawerWidth"],[49,21,269,39],[49,24,269,56,"props"],[49,29,269,61],[49,30,269,28,"drawerWidth"],[49,41,269,39],[50,10,269,41,"drawerType"],[50,20,269,51],[50,23,269,56,"props"],[50,28,269,61],[50,29,269,41,"drawerType"],[50,39,269,51],[51,8,270,4],[51,12,271,13,"dragXValue"],[51,22,271,23],[51,25,275,8,"state"],[51,30,275,13],[51,31,271,6,"dragX"],[51,36,271,11],[52,10,272,14,"touchXValue"],[52,21,272,25],[52,24,275,8,"state"],[52,29,275,13],[52,30,272,6,"touchX"],[52,36,272,12],[53,10,273,6,"drawerTranslation"],[53,27,273,23],[53,30,275,8,"state"],[53,35,275,13],[53,36,273,6,"drawerTranslation"],[53,53,273,23],[54,10,274,6,"containerWidth"],[54,24,274,20],[54,27,275,8,"state"],[54,32,275,13],[54,33,274,6,"containerWidth"],[54,47,274,20],[55,8,277,4],[55,12,277,8,"dragX"],[55,17,277,13],[55,20,277,16,"dragXValue"],[55,30,277,26],[56,8,278,4],[56,12,278,8,"touchX"],[56,18,278,14],[56,21,278,17,"touchXValue"],[56,32,278,28],[57,8,280,4],[57,12,280,8,"drawerPosition"],[57,26,280,22],[57,31,280,27],[57,37,280,33],[57,39,280,35],[58,10,281,6],[59,10,282,6],[60,10,283,6],[61,10,284,6],[62,10,285,6],[63,10,286,6],[64,10,287,6,"dragX"],[64,15,287,11],[64,18,287,14,"Animated"],[64,39,287,22],[64,40,287,23,"multiply"],[64,48,287,31],[64,49,288,8],[64,53,288,12,"Animated"],[64,74,288,20],[64,75,288,21,"Value"],[64,80,288,26],[64,83,288,29],[64,84,288,30],[64,86,289,8,"dragXValue"],[64,96,290,6],[64,97,290,25],[64,98,290,26],[64,99,290,27],[65,10,291,6,"touchX"],[65,16,291,12],[65,19,291,15,"Animated"],[65,40,291,23],[65,41,291,24,"add"],[65,44,291,27],[65,45,292,8],[65,49,292,12,"Animated"],[65,70,292,20],[65,71,292,21,"Value"],[65,76,292,26],[65,77,292,27,"containerWidth"],[65,91,292,41],[65,92,292,42],[65,94,293,8,"Animated"],[65,115,293,16],[65,116,293,17,"multiply"],[65,124,293,25],[65,125,293,26],[65,129,293,30,"Animated"],[65,150,293,38],[65,151,293,39,"Value"],[65,156,293,44],[65,159,293,47],[65,160,293,48],[65,162,293,50,"touchXValue"],[65,173,293,61],[65,174,294,6],[65,175,294,25],[65,176,294,26],[65,177,294,27],[66,10,295,6,"touchXValue"],[66,21,295,17],[66,22,295,18,"setValue"],[66,30,295,26],[66,31,295,27,"containerWidth"],[66,45,295,41],[66,46,295,42],[67,8,296,4],[67,9,296,5],[67,15,296,11],[68,10,297,6,"touchXValue"],[68,21,297,17],[68,22,297,18,"setValue"],[68,30,297,26],[68,31,297,27],[68,32,297,28],[68,33,297,29],[69,8,298,4],[71,8,300,4],[72,8,301,4],[73,8,302,4],[74,8,303,4],[75,8,304,4],[76,8,305,4],[77,8,306,4],[78,8,307,4],[79,8,308,4],[80,8,309,4],[81,8,310,4],[82,8,311,4],[83,8,312,4],[84,8,313,4],[85,8,314,4],[86,8,315,4],[87,8,316,4],[88,8,317,4],[89,8,318,4],[90,8,319,4],[91,8,320,4],[92,8,321,4],[93,8,322,4],[94,8,323,4],[95,8,324,4],[96,8,325,4],[96,12,325,8,"translationX"],[96,24,325,20],[96,27,325,23,"dragX"],[96,32,325,28],[97,8,326,4],[97,12,326,8,"drawerType"],[97,22,326,18],[97,27,326,23],[97,34,326,30],[97,36,326,32],[98,10,327,6],[98,14,327,12,"startPositionX"],[98,28,327,26],[98,31,327,29,"Animated"],[98,52,327,37],[98,53,327,38,"add"],[98,56,327,41],[98,57,328,8,"touchX"],[98,63,328,14],[98,65,329,8,"Animated"],[98,86,329,16],[98,87,329,17,"multiply"],[98,95,329,25],[98,96,329,26],[98,100,329,30,"Animated"],[98,121,329,38],[98,122,329,39,"Value"],[98,127,329,44],[98,130,329,47],[98,131,329,48],[98,133,329,50,"dragX"],[98,138,329,55],[98,139,330,6],[98,140,330,7],[99,10,332,6],[99,14,332,12,"dragOffsetFromOnStartPosition"],[99,43,332,41],[99,46,332,44,"startPositionX"],[99,60,332,58],[99,61,332,59,"interpolate"],[99,72,332,70],[99,73,332,71],[100,12,333,8,"inputRange"],[100,22,333,18],[100,24,333,20],[100,25,333,21,"drawerWidth"],[100,36,333,32],[100,39,333,36],[100,40,333,37],[100,42,333,39,"drawerWidth"],[100,53,333,50],[100,55,333,53,"drawerWidth"],[100,66,333,64],[100,69,333,68],[100,70,333,69],[100,71,333,70],[101,12,334,8,"outputRange"],[101,23,334,19],[101,25,334,21],[101,26,334,22],[101,27,334,23],[101,29,334,25],[101,30,334,26],[101,32,334,28],[101,33,334,29],[102,10,335,6],[102,11,335,7],[102,12,335,8],[103,10,336,6,"translationX"],[103,22,336,18],[103,25,336,21,"Animated"],[103,46,336,29],[103,47,336,30,"add"],[103,50,336,33],[103,51,337,8,"dragX"],[103,56,337,13],[103,58,338,8,"dragOffsetFromOnStartPosition"],[103,87,339,6],[103,88,339,25],[103,89,339,26],[103,90,339,27],[104,8,340,4],[105,8,342,4,"_this"],[105,13,342,4],[105,14,342,9,"openValue"],[105,23,342,18],[105,26,342,21,"Animated"],[105,47,342,29],[105,48,342,30,"add"],[105,51,342,33],[105,52,342,34,"translationX"],[105,64,342,46],[105,66,342,48,"drawerTranslation"],[105,83,342,65],[105,84,342,66],[105,85,342,67,"interpolate"],[105,96,342,78],[105,97,342,79],[106,10,343,6,"inputRange"],[106,20,343,16],[106,22,343,18],[106,23,343,19],[106,24,343,20],[106,26,343,22,"drawerWidth"],[106,37,343,33],[106,38,343,35],[107,10,344,6,"outputRange"],[107,21,344,17],[107,23,344,19],[107,24,344,20],[107,25,344,21],[107,27,344,23],[107,28,344,24],[107,29,344,25],[108,10,345,6,"extrapolate"],[108,21,345,17],[108,23,345,19],[109,8,346,4],[109,9,346,5],[109,10,346,6],[110,8,348,4],[110,12,348,10,"gestureOptions"],[110,26,354,5],[110,29,354,8],[111,10,355,6,"useNativeDriver"],[111,25,355,21],[111,27,355,23,"props"],[111,32,355,28],[111,33,355,29,"useNativeAnimations"],[112,8,356,4],[112,9,356,5],[113,8,358,4],[113,12,358,8,"_this"],[113,17,358,8],[113,18,358,13,"props"],[113,23,358,18],[113,24,358,19,"onDrawerSlide"],[113,37,358,32],[113,39,358,34],[114,10,359,6,"gestureOptions"],[114,24,359,20],[114,25,359,21,"listener"],[114,33,359,29],[114,36,359,33,"ev"],[114,38,359,35],[114,42,359,40],[115,12,360,8],[115,16,360,14,"translationX"],[115,28,360,26],[115,31,360,29,"Math"],[115,35,360,33],[115,36,360,34,"floor"],[115,41,360,39],[115,42,360,40,"Math"],[115,46,360,44],[115,47,360,45,"abs"],[115,50,360,48],[115,51,360,49,"ev"],[115,53,360,51],[115,54,360,52,"nativeEvent"],[115,65,360,63],[115,66,360,64,"translationX"],[115,78,360,76],[115,79,360,77],[115,80,360,78],[116,12,361,8],[116,16,361,14,"position"],[116,24,361,22],[116,27,361,25,"translationX"],[116,39,361,37],[116,42,361,40,"_this"],[116,47,361,40],[116,48,361,45,"state"],[116,53,361,50],[116,54,361,51,"containerWidth"],[116,68,361,65],[117,12,363,8,"_this"],[117,17,363,8],[117,18,363,13,"props"],[117,23,363,18],[117,24,363,19,"onDrawerSlide"],[117,37,363,32],[117,40,363,35,"position"],[117,48,363,43],[117,49,363,44],[118,10,364,6],[118,11,364,7],[119,8,365,4],[120,8,367,4,"_this"],[120,13,367,4],[120,14,367,9,"onGestureEvent"],[120,28,367,23],[120,31,367,26,"Animated"],[120,52,367,34],[120,53,367,35,"event"],[120,58,367,40],[120,59,368,6],[120,60,368,7],[121,10,368,9,"nativeEvent"],[121,21,368,20],[121,23,368,22],[122,12,368,24,"translationX"],[122,24,368,36],[122,26,368,38,"dragXValue"],[122,36,368,48],[123,12,368,50,"x"],[123,13,368,51],[123,15,368,53,"touchXValue"],[124,10,368,65],[125,8,368,67],[125,9,368,68],[125,10,368,69],[125,12,369,6,"gestureOptions"],[125,26,370,4],[125,27,370,5],[126,6,371,2],[126,7,371,3],[127,6,371,3,"_this"],[127,11,371,3],[127,12,373,10,"handleContainerLayout"],[127,33,373,31],[127,36,373,34,"_ref"],[127,40,373,34],[127,44,373,74],[128,8,373,74],[128,12,373,37,"nativeEvent"],[128,23,373,48],[128,26,373,48,"_ref"],[128,30,373,48],[128,31,373,37,"nativeEvent"],[128,42,373,48],[129,8,374,4,"_this"],[129,13,374,4],[129,14,374,9,"setState"],[129,22,374,17],[129,23,374,18],[130,10,374,20,"containerWidth"],[130,24,374,34],[130,26,374,36,"nativeEvent"],[130,37,374,47],[130,38,374,48,"layout"],[130,44,374,54],[130,45,374,55,"width"],[131,8,374,61],[131,9,374,62],[131,10,374,63],[132,6,375,2],[132,7,375,3],[133,6,375,3,"_this"],[133,11,375,3],[133,12,377,10,"emitStateChanged"],[133,28,377,26],[133,31,377,29],[133,32,378,4,"newState"],[133,40,378,25],[133,42,379,4,"drawerWillShow"],[133,56,379,27],[133,61,380,7],[134,8,381,4,"_this"],[134,13,381,4],[134,14,381,9,"props"],[134,19,381,14],[134,20,381,15,"onDrawerStateChanged"],[134,40,381,35],[134,43,381,38,"newState"],[134,51,381,46],[134,53,381,48,"drawerWillShow"],[134,67,381,62],[134,68,381,63],[135,6,382,2],[135,7,382,3],[136,6,382,3,"_this"],[136,11,382,3],[136,12,384,10,"openingHandlerStateChange"],[136,37,384,35],[136,40,384,38,"_ref2"],[136,45,384,38],[136,49,386,64],[137,8,386,64],[137,12,385,4,"nativeEvent"],[137,23,385,15],[137,26,385,15,"_ref2"],[137,31,385,15],[137,32,385,4,"nativeEvent"],[137,43,385,15],[138,8,387,4],[138,12,387,8,"nativeEvent"],[138,23,387,19],[138,24,387,20,"oldState"],[138,32,387,28],[138,37,387,33,"State"],[138,49,387,38],[138,50,387,39,"ACTIVE"],[138,56,387,45],[138,58,387,47],[139,10,388,6,"_this"],[139,15,388,6],[139,16,388,11,"handleRelease"],[139,29,388,24],[139,30,388,25],[140,12,388,27,"nativeEvent"],[141,10,388,39],[141,11,388,40],[141,12,388,41],[142,8,389,4],[142,9,389,5],[142,15,389,11],[142,19,389,15,"nativeEvent"],[142,30,389,26],[142,31,389,27,"state"],[142,36,389,32],[142,41,389,37,"State"],[142,53,389,42],[142,54,389,43,"ACTIVE"],[142,60,389,49],[142,62,389,51],[143,10,390,6,"_this"],[143,15,390,6],[143,16,390,11,"emitStateChanged"],[143,32,390,27],[143,33,390,28,"DRAGGING"],[143,41,390,36],[143,43,390,38],[143,48,390,43],[143,49,390,44],[144,10,391,6,"_this"],[144,15,391,6],[144,16,391,11,"setState"],[144,24,391,19],[144,25,391,20],[145,12,391,22,"drawerState"],[145,23,391,33],[145,25,391,35,"DRAGGING"],[146,10,391,44],[146,11,391,45],[146,12,391,46],[147,10,392,6],[147,14,392,10,"_this"],[147,19,392,10],[147,20,392,15,"props"],[147,25,392,20],[147,26,392,21,"keyboardDismissMode"],[147,45,392,40],[147,50,392,45],[147,59,392,54],[147,61,392,56],[148,12,393,8,"Keyboard"],[148,33,393,16],[148,34,393,17,"dismiss"],[148,41,393,24],[148,42,393,25],[148,43,393,26],[149,10,394,6],[150,10,395,6],[150,14,395,10,"_this"],[150,19,395,10],[150,20,395,15,"props"],[150,25,395,20],[150,26,395,21,"hideStatusBar"],[150,39,395,34],[150,41,395,36],[151,12,396,8,"StatusBar"],[151,34,396,17],[151,35,396,18,"setHidden"],[151,44,396,27],[151,45,396,28],[151,49,396,32],[151,51,396,34,"_this"],[151,56,396,34],[151,57,396,39,"props"],[151,62,396,44],[151,63,396,45,"statusBarAnimation"],[151,81,396,63],[151,85,396,67],[151,92,396,74],[151,93,396,75],[152,10,397,6],[153,8,398,4],[154,6,399,2],[154,7,399,3],[155,6,399,3,"_this"],[155,11,399,3],[155,12,401,10,"onTapHandlerStateChange"],[155,35,401,33],[155,38,401,36,"_ref3"],[155,43,401,36],[155,47,403,64],[156,8,403,64],[156,12,402,4,"nativeEvent"],[156,23,402,15],[156,26,402,15,"_ref3"],[156,31,402,15],[156,32,402,4,"nativeEvent"],[156,43,402,15],[157,8,404,4],[157,12,405,6,"_this"],[157,17,405,6],[157,18,405,11,"drawerShown"],[157,29,405,22],[157,33,406,6,"nativeEvent"],[157,44,406,17],[157,45,406,18,"oldState"],[157,53,406,26],[157,58,406,31,"State"],[157,70,406,36],[157,71,406,37,"ACTIVE"],[157,77,406,43],[157,81,407,6,"_this"],[157,86,407,6],[157,87,407,11,"props"],[157,92,407,16],[157,93,407,17,"drawerLockMode"],[157,107,407,31],[157,112,407,36],[157,125,407,49],[157,127,408,6],[158,10,409,6,"_this"],[158,15,409,6],[158,16,409,11,"closeDrawer"],[158,27,409,22],[158,28,409,23],[158,29,409,24],[159,8,410,4],[160,6,411,2],[160,7,411,3],[161,6,411,3,"_this"],[161,11,411,3],[161,12,413,10,"handleRelease"],[161,25,413,23],[161,28,413,26,"_ref4"],[161,33,413,26],[161,37,415,64],[162,8,415,64],[162,12,414,4,"nativeEvent"],[162,23,414,15],[162,26,414,15,"_ref4"],[162,31,414,15],[162,32,414,4,"nativeEvent"],[162,43,414,15],[163,8,416,4],[163,12,416,4,"_this$props"],[163,23,416,4],[163,26,416,56,"_this"],[163,31,416,56],[163,32,416,61,"props"],[163,37,416,66],[164,10,416,12,"drawerWidth"],[164,21,416,23],[164,24,416,23,"_this$props"],[164,35,416,23],[164,36,416,12,"drawerWidth"],[164,47,416,23],[165,10,416,25,"drawerPosition"],[165,24,416,39],[165,27,416,39,"_this$props"],[165,38,416,39],[165,39,416,25,"drawerPosition"],[165,53,416,39],[166,10,416,41,"drawerType"],[166,20,416,51],[166,23,416,51,"_this$props"],[166,34,416,51],[166,35,416,41,"drawerType"],[166,45,416,51],[167,8,417,4],[167,12,417,12,"containerWidth"],[167,26,417,26],[167,29,417,31,"_this"],[167,34,417,31],[167,35,417,36,"state"],[167,40,417,41],[167,41,417,12,"containerWidth"],[167,55,417,26],[168,8,418,4],[168,12,418,24,"dragX"],[168,17,418,29],[168,20,418,56,"nativeEvent"],[168,31,418,67],[168,32,418,10,"translationX"],[168,44,418,22],[169,10,418,31,"velocityX"],[169,19,418,40],[169,22,418,56,"nativeEvent"],[169,33,418,67],[169,34,418,31,"velocityX"],[169,43,418,40],[170,10,418,45,"touchX"],[170,16,418,51],[170,19,418,56,"nativeEvent"],[170,30,418,67],[170,31,418,42,"x"],[170,32,418,43],[171,8,420,4],[171,12,420,8,"drawerPosition"],[171,26,420,22],[171,31,420,27],[171,37,420,33],[171,39,420,35],[172,10,421,6],[173,10,422,6],[174,10,423,6,"dragX"],[174,15,423,11],[174,18,423,14],[174,19,423,15,"dragX"],[174,24,423,20],[175,10,424,6,"touchX"],[175,16,424,12],[175,19,424,15,"containerWidth"],[175,33,424,29],[175,36,424,32,"touchX"],[175,42,424,38],[176,10,425,6,"velocityX"],[176,19,425,15],[176,22,425,18],[176,23,425,19,"velocityX"],[176,32,425,28],[177,8,426,4],[178,8,428,4],[178,12,428,10,"gestureStartX"],[178,25,428,23],[178,28,428,26,"touchX"],[178,34,428,32],[178,37,428,35,"dragX"],[178,42,428,40],[179,8,429,4],[179,12,429,8,"dragOffsetBasedOnStart"],[179,34,429,30],[179,37,429,33],[179,38,429,34],[180,8,431,4],[180,12,431,8,"drawerType"],[180,22,431,18],[180,27,431,23],[180,34,431,30],[180,36,431,32],[181,10,432,6,"dragOffsetBasedOnStart"],[181,32,432,28],[181,35,433,8,"gestureStartX"],[181,48,433,21],[181,51,433,24,"drawerWidth"],[181,62,433,36],[181,65,433,39,"gestureStartX"],[181,78,433,52],[181,81,433,55,"drawerWidth"],[181,92,433,67],[181,95,433,70],[181,96,433,71],[182,8,434,4],[183,8,436,4],[183,12,436,10,"startOffsetX"],[183,24,436,22],[183,27,437,6,"dragX"],[183,32,437,11],[183,35,437,14,"dragOffsetBasedOnStart"],[183,57,437,36],[183,61,437,40,"_this"],[183,66,437,40],[183,67,437,45,"drawerShown"],[183,78,437,56],[183,81,437,59,"drawerWidth"],[183,92,437,70],[183,95,437,74],[183,96,437,75],[183,97,437,76],[184,8,438,4],[184,12,438,10,"projOffsetX"],[184,23,438,21],[184,26,438,24,"startOffsetX"],[184,38,438,36],[184,41,438,39,"DRAG_TOSS"],[184,50,438,48],[184,53,438,51,"velocityX"],[184,62,438,60],[185,8,440,4],[185,12,440,10,"shouldOpen"],[185,22,440,20],[185,25,440,23,"projOffsetX"],[185,36,440,34],[185,39,440,37,"drawerWidth"],[185,50,440,48],[185,53,440,52],[185,54,440,53],[186,8,442,4],[186,12,442,8,"shouldOpen"],[186,22,442,18],[186,24,442,20],[187,10,443,6,"_this"],[187,15,443,6],[187,16,443,11,"animateDrawer"],[187,29,443,24],[187,30,443,25,"startOffsetX"],[187,42,443,37],[187,44,443,39,"drawerWidth"],[187,55,443,50],[187,57,443,53,"velocityX"],[187,66,443,62],[187,67,443,63],[188,8,444,4],[188,9,444,5],[188,15,444,11],[189,10,445,6,"_this"],[189,15,445,6],[189,16,445,11,"animateDrawer"],[189,29,445,24],[189,30,445,25,"startOffsetX"],[189,42,445,37],[189,44,445,39],[189,45,445,40],[189,47,445,42,"velocityX"],[189,56,445,51],[189,57,445,52],[190,8,446,4],[191,6,447,2],[191,7,447,3],[192,6,447,3,"_this"],[192,11,447,3],[192,12,449,10,"updateShowing"],[192,25,449,23],[192,28,449,27,"showing"],[192,35,449,43],[192,39,449,48],[193,8,450,4,"_this"],[193,13,450,4],[193,14,450,9,"drawerShown"],[193,25,450,20],[193,28,450,23,"showing"],[193,35,450,30],[194,8,451,4,"_this"],[194,13,451,4],[194,14,451,9,"accessibilityIsModalView"],[194,38,451,33],[194,39,451,34,"current"],[194,46,451,41],[194,48,451,43,"setNativeProps"],[194,62,451,57],[194,63,451,58],[195,10,452,6,"accessibilityViewIsModal"],[195,34,452,30],[195,36,452,32,"showing"],[196,8,453,4],[196,9,453,5],[196,10,453,6],[197,8,454,4,"_this"],[197,13,454,4],[197,14,454,9,"pointerEventsView"],[197,31,454,26],[197,32,454,27,"current"],[197,39,454,34],[197,41,454,36,"setNativeProps"],[197,55,454,50],[197,56,454,51],[198,10,455,6,"pointerEvents"],[198,23,455,19],[198,25,455,21,"showing"],[198,32,455,28],[198,35,455,31],[198,41,455,37],[198,44,455,40],[199,8,456,4],[199,9,456,5],[199,10,456,6],[200,8,457,4],[200,12,457,4,"_this$props2"],[200,24,457,4],[200,27,457,60,"_this"],[200,32,457,60],[200,33,457,65,"props"],[200,38,457,70],[201,10,457,12,"drawerPosition"],[201,24,457,26],[201,27,457,26,"_this$props2"],[201,39,457,26],[201,40,457,12,"drawerPosition"],[201,54,457,26],[202,10,457,28,"minSwipeDistance"],[202,26,457,44],[202,29,457,44,"_this$props2"],[202,41,457,44],[202,42,457,28,"minSwipeDistance"],[202,58,457,44],[203,10,457,46,"edgeWidth"],[203,19,457,55],[203,22,457,55,"_this$props2"],[203,34,457,55],[203,35,457,46,"edgeWidth"],[203,44,457,55],[204,8,458,4],[204,12,458,10,"fromLeft"],[204,20,458,18],[204,23,458,21,"drawerPosition"],[204,37,458,35],[204,42,458,40],[204,48,458,46],[205,8,459,4],[206,8,460,4],[207,8,461,4],[208,8,462,4],[208,12,462,10,"gestureOrientation"],[208,30,462,28],[208,33,463,6],[208,34,463,7,"fromLeft"],[208,42,463,15],[208,45,463,18],[208,46,463,19],[208,51,463,24],[208,56,463,29,"_this"],[208,61,463,29],[208,62,463,34,"drawerShown"],[208,73,463,45],[208,81,463,53],[208,82,463,54],[208,83,463,55],[209,8,464,4],[210,8,465,4],[211,8,466,4],[212,8,467,4],[212,12,467,10,"hitSlop"],[212,19,467,17],[212,22,467,20,"fromLeft"],[212,30,467,28],[212,33,468,8],[213,10,468,10,"left"],[213,14,468,14],[213,16,468,16],[213,17,468,17],[214,10,468,19,"width"],[214,15,468,24],[214,17,468,26,"showing"],[214,24,468,33],[214,27,468,36,"undefined"],[214,36,468,45],[214,39,468,48,"edgeWidth"],[215,8,468,58],[215,9,468,59],[215,12,469,8],[216,10,469,10,"right"],[216,15,469,15],[216,17,469,17],[216,18,469,18],[217,10,469,20,"width"],[217,15,469,25],[217,17,469,27,"showing"],[217,24,469,34],[217,27,469,37,"undefined"],[217,36,469,46],[217,39,469,49,"edgeWidth"],[218,8,469,59],[218,9,469,60],[219,8,470,4],[220,8,471,4,"_this"],[220,13,471,4],[220,14,471,9,"panGestureHandler"],[220,31,471,26],[220,32,471,27,"current"],[220,39,471,34],[220,41,471,36,"setNativeProps"],[220,55,471,50],[220,56,471,51],[221,10,472,6,"hitSlop"],[221,17,472,13],[222,10,473,6,"activeOffsetX"],[222,23,473,19],[222,25,473,21,"gestureOrientation"],[222,43,473,39],[222,46,473,42,"minSwipeDistance"],[223,8,474,4],[223,9,474,5],[223,10,474,6],[224,6,475,2],[224,7,475,3],[225,6,475,3,"_this"],[225,11,475,3],[225,12,477,10,"animateDrawer"],[225,25,477,23],[225,28,477,26],[225,29,478,4,"fromValue"],[225,38,478,40],[225,40,479,4,"toValue"],[225,47,479,19],[225,49,480,4,"velocity"],[225,57,480,20],[225,59,481,4,"speed"],[225,64,481,18],[225,69,482,7],[226,8,483,4,"_this"],[226,13,483,4],[226,14,483,9,"state"],[226,19,483,14],[226,20,483,15,"dragX"],[226,25,483,20],[226,26,483,21,"setValue"],[226,34,483,29],[226,35,483,30],[226,36,483,31],[226,37,483,32],[227,8,484,4,"_this"],[227,13,484,4],[227,14,484,9,"state"],[227,19,484,14],[227,20,484,15,"touchX"],[227,26,484,21],[227,27,484,22,"setValue"],[227,35,484,30],[227,36,485,6,"_this"],[227,41,485,6],[227,42,485,11,"props"],[227,47,485,16],[227,48,485,17,"drawerPosition"],[227,62,485,31],[227,67,485,36],[227,73,485,42],[227,76,485,45],[227,77,485,46],[227,80,485,49,"_this"],[227,85,485,49],[227,86,485,54,"state"],[227,91,485,59],[227,92,485,60,"containerWidth"],[227,106,486,4],[227,107,486,5],[228,8,488,4],[228,12,488,8,"fromValue"],[228,21,488,17],[228,25,488,21],[228,29,488,25],[228,31,488,27],[229,10,489,6],[229,14,489,10,"nextFramePosition"],[229,31,489,27],[229,34,489,30,"fromValue"],[229,43,489,39],[230,10,490,6],[230,14,490,10,"_this"],[230,19,490,10],[230,20,490,15,"props"],[230,25,490,20],[230,26,490,21,"useNativeAnimations"],[230,45,490,40],[230,47,490,42],[231,12,491,8],[232,12,492,8],[233,12,493,8],[234,12,494,8],[235,12,495,8],[235,16,495,12,"fromValue"],[235,25,495,21],[235,28,495,24,"toValue"],[235,35,495,31],[235,39,495,35,"velocity"],[235,47,495,43],[235,50,495,46],[235,51,495,47],[235,53,495,49],[236,14,496,10,"nextFramePosition"],[236,31,496,27],[236,34,496,30,"Math"],[236,38,496,34],[236,39,496,35,"min"],[236,42,496,38],[236,43,496,39,"fromValue"],[236,52,496,48],[236,55,496,51,"velocity"],[236,63,496,59],[236,66,496,62],[236,70,496,66],[236,72,496,68,"toValue"],[236,79,496,75],[236,80,496,76],[237,12,497,8],[237,13,497,9],[237,19,497,15],[237,23,497,19,"fromValue"],[237,32,497,28],[237,35,497,31,"toValue"],[237,42,497,38],[237,46,497,42,"velocity"],[237,54,497,50],[237,57,497,53],[237,58,497,54],[237,60,497,56],[238,14,498,10,"nextFramePosition"],[238,31,498,27],[238,34,498,30,"Math"],[238,38,498,34],[238,39,498,35,"max"],[238,42,498,38],[238,43,498,39,"fromValue"],[238,52,498,48],[238,55,498,51,"velocity"],[238,63,498,59],[238,66,498,62],[238,70,498,66],[238,72,498,68,"toValue"],[238,79,498,75],[238,80,498,76],[239,12,499,8],[240,10,500,6],[241,10,501,6,"_this"],[241,15,501,6],[241,16,501,11,"state"],[241,21,501,16],[241,22,501,17,"drawerTranslation"],[241,39,501,34],[241,40,501,35,"setValue"],[241,48,501,43],[241,49,501,44,"nextFramePosition"],[241,66,501,61],[241,67,501,62],[242,8,502,4],[243,8,504,4],[243,12,504,10,"willShow"],[243,20,504,18],[243,23,504,21,"toValue"],[243,30,504,28],[243,35,504,33],[243,36,504,34],[244,8,505,4,"_this"],[244,13,505,4],[244,14,505,9,"updateShowing"],[244,27,505,22],[244,28,505,23,"willShow"],[244,36,505,31],[244,37,505,32],[245,8,506,4,"_this"],[245,13,506,4],[245,14,506,9,"emitStateChanged"],[245,30,506,25],[245,31,506,26,"SETTLING"],[245,39,506,34],[245,41,506,36,"willShow"],[245,49,506,44],[245,50,506,45],[246,8,507,4,"_this"],[246,13,507,4],[246,14,507,9,"setState"],[246,22,507,17],[246,23,507,18],[247,10,507,20,"drawerState"],[247,21,507,31],[247,23,507,33,"SETTLING"],[248,8,507,42],[248,9,507,43],[248,10,507,44],[249,8,508,4],[249,12,508,8,"_this"],[249,17,508,8],[249,18,508,13,"props"],[249,23,508,18],[249,24,508,19,"hideStatusBar"],[249,37,508,32],[249,39,508,34],[250,10,509,6,"StatusBar"],[250,32,509,15],[250,33,509,16,"setHidden"],[250,42,509,25],[250,43,509,26,"willShow"],[250,51,509,34],[250,53,509,36,"_this"],[250,58,509,36],[250,59,509,41,"props"],[250,64,509,46],[250,65,509,47,"statusBarAnimation"],[250,83,509,65],[250,87,509,69],[250,94,509,76],[250,95,509,77],[251,8,510,4],[252,8,511,4,"Animated"],[252,29,511,12],[252,30,511,13,"spring"],[252,36,511,19],[252,37,511,20,"_this"],[252,42,511,20],[252,43,511,25,"state"],[252,48,511,30],[252,49,511,31,"drawerTranslation"],[252,66,511,48],[252,68,511,50],[253,10,512,6,"velocity"],[253,18,512,14],[254,10,513,6,"bounciness"],[254,20,513,16],[254,22,513,18],[254,23,513,19],[255,10,514,6,"toValue"],[255,17,514,13],[256,10,515,6,"useNativeDriver"],[256,25,515,21],[256,27,515,23,"_this"],[256,32,515,23],[256,33,515,28,"props"],[256,38,515,33],[256,39,515,34,"useNativeAnimations"],[256,58,515,54],[257,10,516,6,"speed"],[257,15,516,11],[257,17,516,13,"speed"],[257,22,516,18],[257,26,516,22,"undefined"],[258,8,517,4],[258,9,517,5],[258,10,517,6],[258,11,517,7,"start"],[258,16,517,12],[258,17,517,13,"_ref5"],[258,22,517,13],[258,26,517,31],[259,10,517,31],[259,14,517,16,"finished"],[259,22,517,24],[259,25,517,24,"_ref5"],[259,30,517,24],[259,31,517,16,"finished"],[259,39,517,24],[260,10,518,6],[260,14,518,10,"finished"],[260,22,518,18],[260,24,518,20],[261,12,519,8,"_this"],[261,17,519,8],[261,18,519,13,"emitStateChanged"],[261,34,519,29],[261,35,519,30,"IDLE"],[261,39,519,34],[261,41,519,36,"willShow"],[261,49,519,44],[261,50,519,45],[262,12,520,8,"_this"],[262,17,520,8],[262,18,520,13,"setState"],[262,26,520,21],[262,27,520,22],[263,14,520,24,"drawerOpened"],[263,26,520,36],[263,28,520,38,"willShow"],[264,12,520,47],[264,13,520,48],[264,14,520,49],[265,12,521,8],[265,16,521,12,"_this"],[265,21,521,12],[265,22,521,17,"state"],[265,27,521,22],[265,28,521,23,"drawerState"],[265,39,521,34],[265,44,521,39,"DRAGGING"],[265,52,521,47],[265,54,521,49],[266,14,522,10],[267,14,523,10],[268,14,524,10,"_this"],[268,19,524,10],[268,20,524,15,"setState"],[268,28,524,23],[268,29,524,24],[269,16,524,26,"drawerState"],[269,27,524,37],[269,29,524,39,"IDLE"],[270,14,524,44],[270,15,524,45],[270,16,524,46],[271,12,525,8],[272,12,526,8],[272,16,526,12,"willShow"],[272,24,526,20],[272,26,526,22],[273,14,527,10,"_this"],[273,19,527,10],[273,20,527,15,"props"],[273,25,527,20],[273,26,527,21,"onDrawerOpen"],[273,38,527,33],[273,41,527,36],[273,42,527,37],[274,12,528,8],[274,13,528,9],[274,19,528,15],[275,14,529,10,"_this"],[275,19,529,10],[275,20,529,15,"props"],[275,25,529,20],[275,26,529,21,"onDrawerClose"],[275,39,529,34],[275,42,529,37],[275,43,529,38],[276,12,530,8],[277,10,531,6],[278,8,532,4],[278,9,532,5],[278,10,532,6],[279,6,533,2],[279,7,533,3],[280,6,533,3,"_this"],[280,11,533,3],[280,12,535,2,"openDrawer"],[280,22,535,12],[280,25,535,15],[280,37,535,55],[281,8,535,55],[281,12,535,16,"options"],[281,19,535,45],[281,22,535,45,"arguments"],[281,31,535,45],[281,32,535,45,"length"],[281,38,535,45],[281,46,535,45,"arguments"],[281,55,535,45],[281,63,535,45,"undefined"],[281,72,535,45],[281,75,535,45,"arguments"],[281,84,535,45],[281,90,535,48],[281,91,535,49],[281,92,535,50],[282,8,536,4,"_this"],[282,13,536,4],[282,14,536,9,"animateDrawer"],[282,27,536,22],[283,8,537,6],[284,8,538,6,"undefined"],[284,17,538,15],[284,19,539,6,"_this"],[284,24,539,6],[284,25,539,11,"props"],[284,30,539,16],[284,31,539,17,"drawerWidth"],[284,42,539,28],[284,44,540,6,"options"],[284,51,540,13],[284,52,540,14,"velocity"],[284,60,540,22],[284,63,540,25,"options"],[284,70,540,32],[284,71,540,33,"velocity"],[284,79,540,41],[284,82,540,44],[284,83,540,45],[284,85,541,6,"options"],[284,92,541,13],[284,93,541,14,"speed"],[284,98,542,4],[284,99,542,5],[286,8,544,4],[287,8,545,4],[288,8,546,4,"_this"],[288,13,546,4],[288,14,546,9,"forceUpdate"],[288,25,546,20],[288,26,546,21],[288,27,546,22],[289,6,547,2],[289,7,547,3],[290,6,547,3,"_this"],[290,11,547,3],[290,12,549,2,"closeDrawer"],[290,23,549,13],[290,26,549,16],[290,38,549,56],[291,8,549,56],[291,12,549,17,"options"],[291,19,549,46],[291,22,549,46,"arguments"],[291,31,549,46],[291,32,549,46,"length"],[291,38,549,46],[291,46,549,46,"arguments"],[291,55,549,46],[291,63,549,46,"undefined"],[291,72,549,46],[291,75,549,46,"arguments"],[291,84,549,46],[291,90,549,49],[291,91,549,50],[291,92,549,51],[292,8,550,4],[293,8,551,4,"_this"],[293,13,551,4],[293,14,551,9,"animateDrawer"],[293,27,551,22],[293,28,552,6,"undefined"],[293,37,552,15],[293,39,553,6],[293,40,553,7],[293,42,554,6,"options"],[293,49,554,13],[293,50,554,14,"velocity"],[293,58,554,22],[293,61,554,25,"options"],[293,68,554,32],[293,69,554,33,"velocity"],[293,77,554,41],[293,80,554,44],[293,81,554,45],[293,83,555,6,"options"],[293,90,555,13],[293,91,555,14,"speed"],[293,96,556,4],[293,97,556,5],[295,8,558,4],[296,8,559,4],[297,8,560,4,"_this"],[297,13,560,4],[297,14,560,9,"forceUpdate"],[297,25,560,20],[297,26,560,21],[297,27,560,22],[298,6,561,2],[298,7,561,3],[299,6,561,3,"_this"],[299,11,561,3],[299,12,563,10,"renderOverlay"],[299,25,563,23],[299,28,563,26],[299,34,563,32],[300,8,564,4],[301,8,565,4],[301,12,565,4,"invariant"],[301,30,565,13],[301,32,565,14,"_this"],[301,37,565,14],[301,38,565,19,"openValue"],[301,47,565,28],[301,49,565,30],[301,64,565,45],[301,65,565,46],[302,8,566,4],[302,12,566,8,"overlayOpacity"],[302,26,566,22],[303,8,568,4],[303,12,568,8,"_this"],[303,17,568,8],[303,18,568,13,"state"],[303,23,568,18],[303,24,568,19,"drawerState"],[303,35,568,30],[303,40,568,35,"IDLE"],[303,44,568,39],[303,46,568,41],[304,10,569,6,"overlayOpacity"],[304,24,569,20],[304,27,569,23,"_this"],[304,32,569,23],[304,33,569,28,"openValue"],[304,42,569,37],[305,8,570,4],[305,9,570,5],[305,15,570,11],[306,10,571,6,"overlayOpacity"],[306,24,571,20],[306,27,571,23,"_this"],[306,32,571,23],[306,33,571,28,"state"],[306,38,571,33],[306,39,571,34,"drawerOpened"],[306,51,571,46],[306,54,571,49],[306,55,571,50],[306,58,571,53],[306,59,571,54],[307,8,572,4],[308,8,574,4],[308,12,574,10,"dynamicOverlayStyles"],[308,32,574,30],[308,35,574,33],[309,10,575,6,"opacity"],[309,17,575,13],[309,19,575,15,"overlayOpacity"],[309,33,575,29],[310,10,576,6,"backgroundColor"],[310,25,576,21],[310,27,576,23,"_this"],[310,32,576,23],[310,33,576,28,"props"],[310,38,576,33],[310,39,576,34,"overlayColor"],[311,8,577,4],[311,9,577,5],[312,8,579,4],[312,28,580,6],[312,32,580,6,"_jsxRuntime"],[312,43,580,6],[312,44,580,6,"jsx"],[312,47,580,6],[312,49,580,7,"_TapGestureHandler"],[312,67,580,7],[312,68,580,7,"TapGestureHandler"],[312,85,580,24],[313,10,580,25,"onHandlerStateChange"],[313,30,580,45],[313,32,580,47,"_this"],[313,37,580,47],[313,38,580,52,"onTapHandlerStateChange"],[313,61,580,76],[314,10,580,76,"children"],[314,18,580,76],[314,33,581,8],[314,37,581,8,"_jsxRuntime"],[314,48,581,8],[314,49,581,8,"jsx"],[314,52,581,8],[314,54,581,9,"_reactNative"],[314,66,581,9],[314,67,581,9,"Animated"],[314,75,581,17],[314,76,581,18,"View"],[314,80,581,22],[315,12,582,10,"pointerEvents"],[315,25,582,23],[315,27,582,25,"_this"],[315,32,582,25],[315,33,582,30,"drawerShown"],[315,44,582,41],[315,47,582,44],[315,53,582,50],[315,56,582,53],[315,62,582,60],[316,12,583,10,"ref"],[316,15,583,13],[316,17,583,15,"_this"],[316,22,583,15],[316,23,583,20,"pointerEventsView"],[316,40,583,38],[317,12,584,10,"style"],[317,17,584,15],[317,19,584,17],[317,20,584,18,"styles"],[317,26,584,24],[317,27,584,25,"overlay"],[317,34,584,32],[317,36,584,34,"dynamicOverlayStyles"],[317,56,584,54],[318,10,584,56],[318,11,585,9],[319,8,585,10],[319,9,586,25],[319,10,586,26],[320,6,588,2],[320,7,588,3],[321,6,588,3,"_this"],[321,11,588,3],[321,12,590,10,"renderDrawer"],[321,24,590,22],[321,27,590,25],[321,33,590,31],[322,8,591,4],[322,12,591,4,"_this$props3"],[322,24,591,4],[322,27,598,8,"_this"],[322,32,598,8],[322,33,598,13,"props"],[322,38,598,18],[323,10,592,6,"drawerBackgroundColor"],[323,31,592,27],[323,34,592,27,"_this$props3"],[323,46,592,27],[323,47,592,6,"drawerBackgroundColor"],[323,68,592,27],[324,10,593,6,"drawerWidth"],[324,21,593,17],[324,24,593,17,"_this$props3"],[324,36,593,17],[324,37,593,6,"drawerWidth"],[324,48,593,17],[325,10,594,6,"drawerPosition"],[325,24,594,20],[325,27,594,20,"_this$props3"],[325,39,594,20],[325,40,594,6,"drawerPosition"],[325,54,594,20],[326,10,595,6,"drawerType"],[326,20,595,16],[326,23,595,16,"_this$props3"],[326,35,595,16],[326,36,595,6,"drawerType"],[326,46,595,16],[327,10,596,6,"drawerContainerStyle"],[327,30,596,26],[327,33,596,26,"_this$props3"],[327,45,596,26],[327,46,596,6,"drawerContainerStyle"],[327,66,596,26],[328,10,597,6,"contentContainerStyle"],[328,31,597,27],[328,34,597,27,"_this$props3"],[328,46,597,27],[328,47,597,6,"contentContainerStyle"],[328,68,597,27],[329,8,600,4],[329,12,600,10,"fromLeft"],[329,20,600,18],[329,23,600,21,"drawerPosition"],[329,37,600,35],[329,42,600,40],[329,48,600,46],[330,8,601,4],[330,12,601,10,"drawerSlide"],[330,23,601,21],[330,26,601,24,"drawerType"],[330,36,601,34],[330,41,601,39],[330,47,601,45],[331,8,602,4],[331,12,602,10,"containerSlide"],[331,26,602,24],[331,29,602,27,"drawerType"],[331,39,602,37],[331,44,602,42],[331,51,602,49],[333,8,604,4],[334,8,605,4],[335,8,606,4],[336,8,607,4],[337,8,608,4],[337,12,608,10,"reverseContentDirection"],[337,35,608,33],[337,38,608,36,"I18nManager"],[337,62,608,47],[337,63,608,48,"isRTL"],[337,68,608,53],[337,71,608,56,"fromLeft"],[337,79,608,64],[337,82,608,67],[337,83,608,68,"fromLeft"],[337,91,608,76],[338,8,610,4],[338,12,610,10,"dynamicDrawerStyles"],[338,31,610,29],[338,34,610,32],[339,10,611,6,"backgroundColor"],[339,25,611,21],[339,27,611,23,"drawerBackgroundColor"],[339,48,611,44],[340,10,612,6,"width"],[340,15,612,11],[340,17,612,13,"drawerWidth"],[341,8,613,4],[341,9,613,5],[342,8,614,4],[342,12,614,10,"openValue"],[342,21,614,19],[342,24,614,22,"_this"],[342,29,614,22],[342,30,614,27,"openValue"],[342,39,614,36],[343,8,615,4],[343,12,615,4,"invariant"],[343,30,615,13],[343,32,615,14,"openValue"],[343,41,615,23],[343,43,615,25],[343,58,615,40],[343,59,615,41],[344,8,617,4],[344,12,617,8,"containerStyles"],[344,27,617,23],[345,8,618,4],[345,12,618,8,"containerSlide"],[345,26,618,22],[345,28,618,24],[346,10,619,6],[346,14,619,12,"containerTranslateX"],[346,33,619,31],[346,36,619,34,"openValue"],[346,45,619,43],[346,46,619,44,"interpolate"],[346,57,619,55],[346,58,619,56],[347,12,620,8,"inputRange"],[347,22,620,18],[347,24,620,20],[347,25,620,21],[347,26,620,22],[347,28,620,24],[347,29,620,25],[347,30,620,26],[348,12,621,8,"outputRange"],[348,23,621,19],[348,25,621,21,"fromLeft"],[348,33,621,29],[348,36,621,32],[348,37,621,33],[348,38,621,34],[348,40,621,36,"drawerWidth"],[348,51,621,47],[348,52,621,49],[348,55,621,52],[348,56,621,53],[348,57,621,54],[348,59,621,56],[348,60,621,57,"drawerWidth"],[348,71,621,69],[348,72,621,70],[349,12,622,8,"extrapolate"],[349,23,622,19],[349,25,622,21],[350,10,623,6],[350,11,623,7],[350,12,623,8],[351,10,624,6,"containerStyles"],[351,25,624,21],[351,28,624,24],[352,12,625,8,"transform"],[352,21,625,17],[352,23,625,19],[352,24,625,20],[353,14,625,22,"translateX"],[353,24,625,32],[353,26,625,34,"containerTranslateX"],[354,12,625,54],[354,13,625,55],[355,10,626,6],[355,11,626,7],[356,8,627,4],[357,8,629,4],[357,12,629,8,"drawerTranslateX"],[357,28,629,56],[357,31,629,59],[357,32,629,60],[358,8,630,4],[358,12,630,8,"drawerSlide"],[358,23,630,19],[358,25,630,21],[359,10,631,6],[359,14,631,12,"closedDrawerOffset"],[359,32,631,30],[359,35,631,33,"fromLeft"],[359,43,631,41],[359,46,631,44],[359,47,631,45,"drawerWidth"],[359,58,631,57],[359,61,631,60,"drawerWidth"],[359,72,631,72],[360,10,632,6],[360,14,632,10,"_this"],[360,19,632,10],[360,20,632,15,"state"],[360,25,632,20],[360,26,632,21,"drawerState"],[360,37,632,32],[360,42,632,37,"IDLE"],[360,46,632,41],[360,48,632,43],[361,12,633,8,"drawerTranslateX"],[361,28,633,24],[361,31,633,27,"openValue"],[361,40,633,36],[361,41,633,37,"interpolate"],[361,52,633,48],[361,53,633,49],[362,14,634,10,"inputRange"],[362,24,634,20],[362,26,634,22],[362,27,634,23],[362,28,634,24],[362,30,634,26],[362,31,634,27],[362,32,634,28],[363,14,635,10,"outputRange"],[363,25,635,21],[363,27,635,23],[363,28,635,24,"closedDrawerOffset"],[363,46,635,42],[363,48,635,44],[363,49,635,45],[363,50,635,46],[364,14,636,10,"extrapolate"],[364,25,636,21],[364,27,636,23],[365,12,637,8],[365,13,637,9],[365,14,637,10],[366,10,638,6],[366,11,638,7],[366,17,638,13],[367,12,639,8,"drawerTranslateX"],[367,28,639,24],[367,31,639,27,"_this"],[367,36,639,27],[367,37,639,32,"state"],[367,42,639,37],[367,43,639,38,"drawerOpened"],[367,55,639,50],[367,58,639,53],[367,59,639,54],[367,62,639,57,"closedDrawerOffset"],[367,80,639,75],[368,10,640,6],[369,8,641,4],[370,8,642,4],[370,12,642,10,"drawerStyles"],[370,24,645,5],[370,27,645,8],[371,10,646,6,"transform"],[371,19,646,15],[371,21,646,17],[371,22,646,18],[372,12,646,20,"translateX"],[372,22,646,30],[372,24,646,32,"drawerTranslateX"],[373,10,646,49],[373,11,646,50],[373,12,646,51],[374,10,647,6,"flexDirection"],[374,23,647,19],[374,25,647,21,"reverseContentDirection"],[374,48,647,44],[374,51,647,47],[374,64,647,60],[374,67,647,63],[375,8,648,4],[375,9,648,5],[376,8,650,4],[376,28,651,6],[376,32,651,6,"_jsxRuntime"],[376,43,651,6],[376,44,651,6,"jsxs"],[376,48,651,6],[376,50,651,7,"_reactNative"],[376,62,651,7],[376,63,651,7,"Animated"],[376,71,651,15],[376,72,651,16,"View"],[376,76,651,20],[377,10,651,21,"style"],[377,15,651,26],[377,17,651,28,"styles"],[377,23,651,34],[377,24,651,35,"main"],[377,28,651,40],[378,10,651,41,"onLayout"],[378,18,651,49],[378,20,651,51,"_this"],[378,25,651,51],[378,26,651,56,"handleContainerLayout"],[378,47,651,78],[379,10,651,78,"children"],[379,18,651,78],[379,34,652,8],[379,38,652,8,"_jsxRuntime"],[379,49,652,8],[379,50,652,8,"jsxs"],[379,54,652,8],[379,56,652,9,"_reactNative"],[379,68,652,9],[379,69,652,9,"Animated"],[379,77,652,17],[379,78,652,18,"View"],[379,82,652,22],[380,12,653,10,"style"],[380,17,653,15],[380,19,653,17],[380,20,654,12,"drawerType"],[380,30,654,22],[380,35,654,27],[380,42,654,34],[380,45,655,16,"styles"],[380,51,655,22],[380,52,655,23,"containerOnBack"],[380,67,655,38],[380,70,656,16,"styles"],[380,76,656,22],[380,77,656,23,"containerInFront"],[380,93,656,39],[380,95,657,12,"containerStyles"],[380,110,657,27],[380,112,658,12,"contentContainerStyle"],[380,133,658,33],[380,134,659,12],[381,12,660,10,"importantForAccessibility"],[381,37,660,35],[381,39,661,12,"_this"],[381,44,661,12],[381,45,661,17,"drawerShown"],[381,56,661,28],[381,59,661,31],[381,80,661,52],[381,83,661,55],[381,88,662,11],[382,12,662,11,"children"],[382,20,662,11],[382,23,663,11],[382,30,663,18,"_this"],[382,35,663,18],[382,36,663,23,"props"],[382,41,663,28],[382,42,663,29,"children"],[382,50,663,37],[382,55,663,42],[382,65,663,52],[382,68,664,14,"_this"],[382,73,664,14],[382,74,664,19,"props"],[382,79,664,24],[382,80,664,25,"children"],[382,88,664,33],[382,89,664,34,"_this"],[382,94,664,34],[382,95,664,39,"openValue"],[382,104,664,48],[382,105,664,49],[382,108,665,14,"_this"],[382,113,665,14],[382,114,665,19,"props"],[382,119,665,24],[382,120,665,25,"children"],[382,128,665,33],[382,130,666,11,"_this"],[382,135,666,11],[382,136,666,16,"renderOverlay"],[382,149,666,29],[382,150,666,30],[382,151,666,31],[383,10,666,31],[383,11,667,23],[383,12,667,24],[383,27,668,8],[383,31,668,8,"_jsxRuntime"],[383,42,668,8],[383,43,668,8,"jsx"],[383,46,668,8],[383,48,668,9,"_reactNative"],[383,60,668,9],[383,61,668,9,"Animated"],[383,69,668,17],[383,70,668,18,"View"],[383,74,668,22],[384,12,669,10,"pointerEvents"],[384,25,669,23],[384,27,669,24],[384,37,669,34],[385,12,670,10,"ref"],[385,15,670,13],[385,17,670,15,"_this"],[385,22,670,15],[385,23,670,20,"accessibilityIsModalView"],[385,47,670,45],[386,12,671,10,"accessibilityViewIsModal"],[386,36,671,34],[386,38,671,36,"_this"],[386,43,671,36],[386,44,671,41,"drawerShown"],[386,55,671,53],[387,12,672,10,"style"],[387,17,672,15],[387,19,672,17],[387,20,672,18,"styles"],[387,26,672,24],[387,27,672,25,"drawerContainer"],[387,42,672,40],[387,44,672,42,"drawerStyles"],[387,56,672,54],[387,58,672,56,"drawerContainerStyle"],[387,78,672,76],[387,79,672,78],[388,12,672,78,"children"],[388,20,672,78],[388,35,673,10],[388,39,673,10,"_jsxRuntime"],[388,50,673,10],[388,51,673,10,"jsx"],[388,54,673,10],[388,56,673,11,"_reactNative"],[388,68,673,11],[388,69,673,11,"View"],[388,73,673,15],[389,14,673,16,"style"],[389,19,673,21],[389,21,673,23,"dynamicDrawerStyles"],[389,40,673,43],[390,14,673,43,"children"],[390,22,673,43],[390,24,674,13,"_this"],[390,29,674,13],[390,30,674,18,"props"],[390,35,674,23],[390,36,674,24,"renderNavigationView"],[390,56,674,44],[390,57,674,45,"_this"],[390,62,674,45],[390,63,674,50,"openValue"],[390,72,674,77],[391,12,674,78],[391,13,675,16],[392,10,675,17],[392,11,676,23],[392,12,676,24],[393,8,676,24],[393,9,677,21],[393,10,677,22],[394,6,679,2],[394,7,679,3],[395,6,679,3,"_this"],[395,11,679,3],[395,12,681,10,"setPanGestureRef"],[395,28,681,26],[395,31,681,30,"ref"],[395,34,681,52],[395,38,681,57],[396,8,682,4],[397,8,683,4],[398,8,685,6,"_this"],[398,13,685,6],[398,14,685,11,"panGestureHandler"],[398,31,685,28],[398,32,686,6,"current"],[398,39,686,13],[398,42,686,16,"ref"],[398,45,686,19],[399,8,687,4,"_this"],[399,13,687,4],[399,14,687,9,"props"],[399,19,687,14],[399,20,687,15,"onGestureRef"],[399,32,687,27],[399,35,687,30,"ref"],[399,38,687,33],[399,39,687,34],[400,6,688,2],[400,7,688,3],[401,6,221,4],[401,10,221,10,"dragX"],[401,16,221,15],[401,19,221,18],[401,23,221,22,"Animated"],[401,44,221,30],[401,45,221,31,"Value"],[401,50,221,36],[401,51,221,37],[401,52,221,38],[401,53,221,39],[402,6,222,4],[402,10,222,10,"touchX"],[402,17,222,16],[402,20,222,19],[402,24,222,23,"Animated"],[402,45,222,31],[402,46,222,32,"Value"],[402,51,222,37],[402,52,222,38],[402,53,222,39],[402,54,222,40],[403,6,223,4],[403,10,223,10,"drawerTranslation"],[403,28,223,27],[403,31,223,30],[403,35,223,34,"Animated"],[403,56,223,42],[403,57,223,43,"Value"],[403,62,223,48],[403,63,223,49],[403,64,223,50],[403,65,223,51],[404,6,225,4,"_this"],[404,11,225,4],[404,12,225,9,"state"],[404,17,225,14],[404,20,225,17],[405,8,226,6,"dragX"],[405,13,226,11],[405,15,226,6,"dragX"],[405,21,226,11],[406,8,227,6,"touchX"],[406,14,227,12],[406,16,227,6,"touchX"],[406,23,227,12],[407,8,228,6,"drawerTranslation"],[407,25,228,23],[407,27,228,6,"drawerTranslation"],[407,45,228,23],[408,8,229,6,"containerWidth"],[408,22,229,20],[408,24,229,22],[408,25,229,23],[409,8,230,6,"drawerState"],[409,19,230,17],[409,21,230,19,"IDLE"],[409,25,230,23],[410,8,231,6,"drawerOpened"],[410,20,231,18],[410,22,231,20],[411,6,232,4],[411,7,232,5],[412,6,234,4,"_this"],[412,11,234,4],[412,12,234,9,"updateAnimatedEvent"],[412,31,234,28],[412,32,234,29,"props"],[412,38,234,34],[412,40,234,36,"_this"],[412,45,234,36],[412,46,234,41,"state"],[412,51,234,46],[412,52,234,47],[413,6,234,48],[413,13,234,48,"_this"],[413,18,234,48],[414,4,235,2],[415,4,235,3],[415,8,235,3,"_inherits2"],[415,18,235,3],[415,19,235,3,"default"],[415,26,235,3],[415,28,235,3,"DrawerLayout"],[415,40,235,3],[415,42,235,3,"_Component"],[415,52,235,3],[416,4,235,3],[416,15,235,3,"_createClass2"],[416,28,235,3],[416,29,235,3,"default"],[416,36,235,3],[416,38,235,3,"DrawerLayout"],[416,50,235,3],[417,6,235,3,"key"],[417,9,235,3],[418,6,235,3,"value"],[418,11,235,3],[418,13,237,2],[418,22,237,2,"shouldComponentUpdate"],[418,43,237,23,"shouldComponentUpdate"],[418,44,237,24,"props"],[418,49,237,48],[418,51,237,50,"state"],[418,56,237,74],[418,58,237,76],[419,8,238,4],[419,12,239,6],[419,16,239,10],[419,17,239,11,"props"],[419,22,239,16],[419,23,239,17,"drawerPosition"],[419,37,239,31],[419,42,239,36,"props"],[419,47,239,41],[419,48,239,42,"drawerPosition"],[419,62,239,56],[419,66,240,6],[419,70,240,10],[419,71,240,11,"props"],[419,76,240,16],[419,77,240,17,"drawerWidth"],[419,88,240,28],[419,93,240,33,"props"],[419,98,240,38],[419,99,240,39,"drawerWidth"],[419,110,240,50],[419,114,241,6],[419,118,241,10],[419,119,241,11,"props"],[419,124,241,16],[419,125,241,17,"drawerType"],[419,135,241,27],[419,140,241,32,"props"],[419,145,241,37],[419,146,241,38,"drawerType"],[419,156,241,48],[419,160,242,6],[419,164,242,10],[419,165,242,11,"state"],[419,170,242,16],[419,171,242,17,"containerWidth"],[419,185,242,31],[419,190,242,36,"state"],[419,195,242,41],[419,196,242,42,"containerWidth"],[419,210,242,56],[419,212,243,6],[420,10,244,6],[420,14,244,10],[420,15,244,11,"updateAnimatedEvent"],[420,34,244,30],[420,35,244,31,"props"],[420,40,244,36],[420,42,244,38,"state"],[420,47,244,43],[420,48,244,44],[421,8,245,4],[422,8,247,4],[422,15,247,11],[422,19,247,15],[423,6,248,2],[424,4,248,3],[425,6,248,3,"key"],[425,9,248,3],[426,6,248,3,"value"],[426,11,248,3],[426,13,690,2],[426,22,690,2,"render"],[426,28,690,8,"render"],[426,29,690,8],[426,31,690,11],[427,8,691,4],[427,12,691,4,"_this$props4"],[427,24,691,4],[427,27,692,6],[427,31,692,10],[427,32,692,11,"props"],[427,37,692,16],[428,10,691,12,"drawerPosition"],[428,24,691,26],[428,27,691,26,"_this$props4"],[428,39,691,26],[428,40,691,12,"drawerPosition"],[428,54,691,26],[429,10,691,28,"drawerLockMode"],[429,24,691,42],[429,27,691,42,"_this$props4"],[429,39,691,42],[429,40,691,28,"drawerLockMode"],[429,54,691,42],[430,10,691,44,"edgeWidth"],[430,19,691,53],[430,22,691,53,"_this$props4"],[430,34,691,53],[430,35,691,44,"edgeWidth"],[430,44,691,53],[431,10,691,55,"minSwipeDistance"],[431,26,691,71],[431,29,691,71,"_this$props4"],[431,41,691,71],[431,42,691,55,"minSwipeDistance"],[431,58,691,71],[432,8,694,4],[432,12,694,10,"fromLeft"],[432,20,694,18],[432,23,694,21,"drawerPosition"],[432,37,694,35],[432,42,694,40],[432,48,694,46],[434,8,696,4],[435,8,697,4],[436,8,698,4],[437,8,699,4],[437,12,699,10,"gestureOrientation"],[437,30,699,28],[437,33,700,6],[437,34,700,7,"fromLeft"],[437,42,700,15],[437,45,700,18],[437,46,700,19],[437,51,700,24],[437,56,700,29],[437,60,700,33],[437,61,700,34,"drawerShown"],[437,72,700,45],[437,80,700,53],[437,81,700,54],[437,82,700,55],[439,8,702,4],[440,8,703,4],[441,8,704,4],[442,8,705,4],[442,12,705,10,"hitSlop"],[442,19,705,17],[442,22,705,20,"fromLeft"],[442,30,705,28],[442,33,706,8],[443,10,706,10,"left"],[443,14,706,14],[443,16,706,16],[443,17,706,17],[444,10,706,19,"width"],[444,15,706,24],[444,17,706,26],[444,21,706,30],[444,22,706,31,"drawerShown"],[444,33,706,42],[444,36,706,45,"undefined"],[444,45,706,54],[444,48,706,57,"edgeWidth"],[445,8,706,67],[445,9,706,68],[445,12,707,8],[446,10,707,10,"right"],[446,15,707,15],[446,17,707,17],[446,18,707,18],[447,10,707,20,"width"],[447,15,707,25],[447,17,707,27],[447,21,707,31],[447,22,707,32,"drawerShown"],[447,33,707,43],[447,36,707,46,"undefined"],[447,45,707,55],[447,48,707,58,"edgeWidth"],[448,8,707,68],[448,9,707,69],[449,8,709,4],[449,28,710,6],[449,32,710,6,"_jsxRuntime"],[449,43,710,6],[449,44,710,6,"jsx"],[449,47,710,6],[449,49,710,7,"_PanGestureHandler"],[449,67,710,7],[449,68,710,7,"PanGestureHandler"],[450,8,711,8],[451,8,711,8],[452,10,712,8,"userSelect"],[452,20,712,18],[452,22,712,20],[452,26,712,24],[452,27,712,25,"props"],[452,32,712,30],[452,33,712,31,"userSelect"],[452,43,712,42],[453,10,713,8,"activeCursor"],[453,22,713,20],[453,24,713,22],[453,28,713,26],[453,29,713,27,"props"],[453,34,713,32],[453,35,713,33,"activeCursor"],[453,47,713,46],[454,10,714,8,"mouseButton"],[454,21,714,19],[454,23,714,21],[454,27,714,25],[454,28,714,26,"props"],[454,33,714,31],[454,34,714,32,"mouseButton"],[454,45,714,44],[455,10,715,8,"enableContextMenu"],[455,27,715,25],[455,29,715,27],[455,33,715,31],[455,34,715,32,"props"],[455,39,715,37],[455,40,715,38,"enableContextMenu"],[455,57,715,56],[456,10,716,8,"ref"],[456,13,716,11],[456,15,716,13],[456,19,716,17],[456,20,716,18,"setPanGestureRef"],[456,36,716,35],[457,10,717,8,"hitSlop"],[457,17,717,15],[457,19,717,17,"hitSlop"],[457,26,717,25],[458,10,718,8,"activeOffsetX"],[458,23,718,21],[458,25,718,23,"gestureOrientation"],[458,43,718,41],[458,46,718,44,"minSwipeDistance"],[458,62,718,62],[459,10,719,8,"failOffsetY"],[459,21,719,19],[459,23,719,21],[459,29,719,27],[459,31,719,29],[459,32,719,31],[460,10,720,8,"onGestureEvent"],[460,24,720,22],[460,26,720,24],[460,30,720,28],[460,31,720,29,"onGestureEvent"],[460,45,720,44],[461,10,721,8,"onHandlerStateChange"],[461,30,721,28],[461,32,721,30],[461,36,721,34],[461,37,721,35,"openingHandlerStateChange"],[461,62,721,61],[462,10,722,8,"enableTrackpadTwoFingerGesture"],[462,40,722,38],[462,42,723,10],[462,46,723,14],[462,47,723,15,"props"],[462,52,723,20],[462,53,723,21,"enableTrackpadTwoFingerGesture"],[462,83,724,9],[463,10,725,8,"enabled"],[463,17,725,15],[463,19,726,10,"drawerLockMode"],[463,33,726,24],[463,38,726,29],[463,53,726,44],[463,57,726,48,"drawerLockMode"],[463,71,726,62],[463,76,726,67],[463,89,727,9],[464,10,727,9,"children"],[464,18,727,9],[464,20,728,9],[464,24,728,13],[464,25,728,14,"renderDrawer"],[464,37,728,26],[464,38,728,27],[465,8,728,28],[465,9,729,25],[465,10,729,26],[466,6,731,2],[467,4,731,3],[468,2,731,3],[468,4,202,42,"Component"],[468,20,202,51],[469,2,202,21,"DrawerLayout"],[469,14,202,33],[469,15,206,9,"defaultProps"],[469,27,206,21],[469,30,206,24],[470,4,207,4,"drawerWidth"],[470,15,207,15],[470,17,207,17],[470,20,207,20],[471,4,208,4,"drawerPosition"],[471,18,208,18],[471,20,208,20],[471,26,208,26],[472,4,209,4,"useNativeAnimations"],[472,23,209,23],[472,25,209,25],[472,29,209,29],[473,4,210,4,"drawerType"],[473,14,210,14],[473,16,210,16],[473,23,210,23],[474,4,211,4,"edgeWidth"],[474,13,211,13],[474,15,211,15],[474,17,211,17],[475,4,212,4,"minSwipeDistance"],[475,20,212,20],[475,22,212,22],[475,23,212,23],[476,4,213,4,"overlayColor"],[476,16,213,16],[476,18,213,18],[476,38,213,38],[477,4,214,4,"drawerLockMode"],[477,18,214,18],[477,20,214,20],[477,30,214,30],[478,4,215,4,"enableTrackpadTwoFingerGesture"],[478,34,215,34],[478,36,215,36],[479,2,216,2],[479,3,216,3],[480,2,202,21,"DrawerLayout"],[480,14,202,33],[480,15,259,9,"positions"],[480,24,259,18],[480,27,259,21],[481,4,260,4,"Left"],[481,8,260,8],[481,10,260,10],[481,16,260,16],[482,4,261,4,"Right"],[482,9,261,9],[482,11,261,11],[483,2,262,2],[483,3,262,3],[484,2,734,0],[484,6,734,6,"styles"],[484,12,734,12],[484,15,734,15,"StyleSheet"],[484,38,734,25],[484,39,734,26,"create"],[484,45,734,32],[484,46,734,33],[485,4,735,2,"drawerContainer"],[485,19,735,17],[485,21,735,19],[486,6,736,4],[486,9,736,7,"StyleSheet"],[486,32,736,17],[486,33,736,18,"absoluteFillObject"],[486,51,736,36],[487,6,737,4,"zIndex"],[487,12,737,10],[487,14,737,12],[487,18,737,16],[488,6,738,4,"flexDirection"],[488,19,738,17],[488,21,738,19],[489,4,739,2],[489,5,739,3],[490,4,740,2,"containerInFront"],[490,20,740,18],[490,22,740,20],[491,6,741,4],[491,9,741,7,"StyleSheet"],[491,32,741,17],[491,33,741,18,"absoluteFillObject"],[491,51,741,36],[492,6,742,4,"zIndex"],[492,12,742,10],[492,14,742,12],[493,4,743,2],[493,5,743,3],[494,4,744,2,"containerOnBack"],[494,19,744,17],[494,21,744,19],[495,6,745,4],[495,9,745,7,"StyleSheet"],[495,32,745,17],[495,33,745,18,"absoluteFillObject"],[496,4,746,2],[496,5,746,3],[497,4,747,2,"main"],[497,8,747,6],[497,10,747,8],[498,6,748,4,"flex"],[498,10,748,8],[498,12,748,10],[498,13,748,11],[499,6,749,4,"zIndex"],[499,12,749,10],[499,14,749,12],[499,15,749,13],[500,6,750,4,"overflow"],[500,14,750,12],[500,16,750,14],[501,4,751,2],[501,5,751,3],[502,4,752,2,"overlay"],[502,11,752,9],[502,13,752,11],[503,6,753,4],[503,9,753,7,"StyleSheet"],[503,32,753,17],[503,33,753,18,"absoluteFillObject"],[503,51,753,36],[504,6,754,4,"zIndex"],[504,12,754,10],[504,14,754,12],[505,4,755,2],[506,2,756,0],[506,3,756,1],[506,4,756,2],[507,0,756,3],[507,3]],"functionMap":{"names":["<global>","DrawerLayout","constructor","shouldComponentUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;eCyM;ECgB;GDiB;EEE;GFW;gCGgB;gCC+F;ODK;GHO;kCKE;GLE;6BME;GNK;sCOE;GPe;oCQE;GRU;0BSE;GTkC;0BUE;GV0B;0BWE;aCwC;KDe;GXC;eaE;GbY;gBcE;GdY;0BeE;GfyB;yBgBE;GhByF;6BiBE;GjBO;EkBE;GlByC;CDC"}},"type":"js/module"}]}