{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":271,"column":49,"index":9978}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":271,"column":49,"index":9978}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":49,"index":265},"end":{"line":6,"column":84,"index":300}}],"key":"gSed/J6HS9dN5Bn5UwHXNT8cOqE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0]);\n  var _createClass = require(_dependencyMap[1]);\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[2]));\n  var PostgrestQueryBuilder = /*#__PURE__*/function () {\n    function PostgrestQueryBuilder(url, _ref) {\n      var _ref$headers = _ref.headers,\n        headers = _ref$headers === undefined ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n      _classCallCheck(this, PostgrestQueryBuilder);\n      this.url = url;\n      this.headers = headers;\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    return _createClass(PostgrestQueryBuilder, [{\n      key: \"select\",\n      value: function select(columns) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === undefined ? false : _ref2$head,\n          count = _ref2.count;\n        var method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== undefined ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n          this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform an INSERT into the table or view.\n       *\n       * By default, inserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to insert. Pass an object to insert a single row\n       * or an array to insert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count inserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. Only applies for bulk\n       * inserts.\n       */\n    }, {\n      key: \"insert\",\n      value: function insert(values) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref3.count,\n          _ref3$defaultToNull = _ref3.defaultToNull,\n          defaultToNull = _ref3$defaultToNull === undefined ? true : _ref3$defaultToNull;\n        var method = 'POST';\n        var prefersHeaders = [];\n        if (this.headers['Prefer']) {\n          prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n          prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform an UPSERT on the table or view. Depending on the column(s) passed\n       * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n       * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n       * exist, or if it does exist, perform an alternative action depending on\n       * `ignoreDuplicates`.\n       *\n       * By default, upserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to upsert with. Pass an object to upsert a\n       * single row or an array to upsert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n       * duplicate rows are determined. Two rows are duplicates if all the\n       * `onConflict` columns are equal.\n       *\n       * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n       * `false`, duplicate rows are merged with existing rows.\n       *\n       * @param options.count - Count algorithm to use to count upserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. This only applies when\n       * inserting new rows, not when merging with existing rows under\n       * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n       */\n    }, {\n      key: \"upsert\",\n      value: function upsert(values) {\n        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === undefined ? false : _ref4$ignoreDuplicate,\n          count = _ref4.count,\n          _ref4$defaultToNull = _ref4.defaultToNull,\n          defaultToNull = _ref4$defaultToNull === undefined ? true : _ref4$defaultToNull;\n        var method = 'POST';\n        var prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n        if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n        if (this.headers['Prefer']) {\n          prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n          prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform an UPDATE on the table or view.\n       *\n       * By default, updated rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param values - The values to update with\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count updated rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"update\",\n      value: function update(values) {\n        var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref5.count;\n        var method = 'PATCH';\n        var prefersHeaders = [];\n        if (this.headers['Prefer']) {\n          prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform a DELETE on the table or view.\n       *\n       * By default, deleted rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count deleted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          count = _ref6.count;\n        var method = 'DELETE';\n        var prefersHeaders = [];\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n          prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n    }]);\n  }();\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":310,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,2,0],[6,6,2,4,"__importDefault"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__importDefault"],[6,52,2,51],[6,56,2,56],[6,66,2,66,"mod"],[6,69,2,69],[6,71,2,71],[7,4,3,4],[7,11,3,12,"mod"],[7,14,3,15],[7,18,3,19,"mod"],[7,21,3,22],[7,22,3,23,"__esModule"],[7,32,3,33],[7,35,3,37,"mod"],[7,38,3,40],[7,41,3,43],[8,6,3,45],[8,15,3,54],[8,17,3,56,"mod"],[9,4,3,60],[9,5,3,61],[10,2,4,0],[10,3,4,1],[11,2,5,0,"Object"],[11,8,5,6],[11,9,5,7,"defineProperty"],[11,23,5,21],[11,24,5,22,"exports"],[11,31,5,29],[11,33,5,31],[11,45,5,43],[11,47,5,45],[12,4,5,47,"value"],[12,9,5,52],[12,11,5,54],[13,2,5,59],[13,3,5,60],[13,4,5,61],[14,2,6,0],[14,6,6,6,"PostgrestFilterBuilder_1"],[14,30,6,30],[14,33,6,33,"__importDefault"],[14,48,6,48],[14,49,6,49,"require"],[14,56,6,56],[14,57,6,56,"_dependencyMap"],[14,71,6,56],[14,74,6,83],[14,75,6,84],[14,76,6,85],[15,2,6,86],[15,6,7,6,"PostgrestQueryBuilder"],[15,27,7,27],[16,4,8,4],[16,13,8,4,"PostgrestQueryBuilder"],[16,35,8,16,"url"],[16,38,8,19],[16,40,8,19,"_ref"],[16,44,8,19],[16,46,8,55],[17,6,8,55],[17,10,8,55,"_ref$headers"],[17,22,8,55],[17,25,8,55,"_ref"],[17,29,8,55],[17,30,8,23,"headers"],[17,37,8,30],[18,8,8,23,"headers"],[18,15,8,30],[18,18,8,30,"_ref$headers"],[18,30,8,30],[18,35,8,30,"undefined"],[18,44,8,30],[18,47,8,33],[18,48,8,34],[18,49,8,35],[18,52,8,35,"_ref$headers"],[18,64,8,35],[19,8,8,37,"schema"],[19,14,8,43],[19,17,8,43,"_ref"],[19,21,8,43],[19,22,8,37,"schema"],[19,28,8,43],[20,8,8,45,"fetch"],[20,13,8,50],[20,16,8,50,"_ref"],[20,20,8,50],[20,21,8,45,"fetch"],[20,26,8,50],[21,6,8,50,"_classCallCheck"],[21,21,8,50],[21,28,8,50,"PostgrestQueryBuilder"],[21,49,8,50],[22,6,9,8],[22,10,9,12],[22,11,9,13,"url"],[22,14,9,16],[22,17,9,19,"url"],[22,20,9,22],[23,6,10,8],[23,10,10,12],[23,11,10,13,"headers"],[23,18,10,20],[23,21,10,23,"headers"],[23,28,10,30],[24,6,11,8],[24,10,11,12],[24,11,11,13,"schema"],[24,17,11,19],[24,20,11,22,"schema"],[24,26,11,28],[25,6,12,8],[25,10,12,12],[25,11,12,13,"fetch"],[25,16,12,18],[25,19,12,21,"fetch"],[25,24,12,26],[26,4,13,4],[27,4,14,4],[28,0,15,0],[29,0,16,0],[30,0,17,0],[31,0,18,0],[32,0,19,0],[33,0,20,0],[34,0,21,0],[35,0,22,0],[36,0,23,0],[37,0,24,0],[38,0,25,0],[39,0,26,0],[40,0,27,0],[41,0,28,0],[42,0,29,0],[43,0,30,0],[44,0,31,0],[45,0,32,0],[46,0,33,0],[47,0,34,0],[48,4,14,4],[48,11,14,4,"_createClass"],[48,23,14,4],[48,24,14,4,"PostgrestQueryBuilder"],[48,45,14,4],[49,6,14,4,"key"],[49,9,14,4],[50,6,14,4,"value"],[50,11,14,4],[50,13,35,4],[50,22,35,4,"select"],[50,28,35,10,"select"],[50,29,35,11,"columns"],[50,36,35,18],[50,38,35,51],[51,8,35,51],[51,12,35,51,"_ref2"],[51,17,35,51],[51,20,35,51,"arguments"],[51,29,35,51],[51,30,35,51,"length"],[51,36,35,51],[51,44,35,51,"arguments"],[51,53,35,51],[51,61,35,51,"undefined"],[51,70,35,51],[51,73,35,51,"arguments"],[51,82,35,51],[51,88,35,47],[51,89,35,48],[51,90,35,49],[52,10,35,49,"_ref2$head"],[52,20,35,49],[52,23,35,49,"_ref2"],[52,28,35,49],[52,29,35,22,"head"],[52,33,35,26],[53,10,35,22,"head"],[53,14,35,26],[53,17,35,26,"_ref2$head"],[53,27,35,26],[53,32,35,26,"undefined"],[53,41,35,26],[53,44,35,29],[53,49,35,34],[53,52,35,34,"_ref2$head"],[53,62,35,34],[54,10,35,36,"count"],[54,15,35,41],[54,18,35,41,"_ref2"],[54,23,35,41],[54,24,35,36,"count"],[54,29,35,41],[55,8,36,8],[55,12,36,14,"method"],[55,18,36,20],[55,21,36,23,"head"],[55,25,36,27],[55,28,36,30],[55,34,36,36],[55,37,36,39],[55,42,36,44],[56,8,37,8],[57,8,38,8],[57,12,38,12,"quoted"],[57,18,38,18],[57,21,38,21],[57,26,38,26],[58,8,39,8],[58,12,39,14,"cleanedColumns"],[58,26,39,28],[58,29,39,31],[58,30,39,32,"columns"],[58,37,39,39],[58,42,39,44],[58,46,39,48],[58,50,39,52,"columns"],[58,57,39,59],[58,62,39,59,"undefined"],[58,71,39,70],[58,74,39,73,"columns"],[58,81,39,80],[58,84,39,83],[58,87,39,86],[58,89,40,13,"split"],[58,94,40,18],[58,95,40,19],[58,97,40,21],[58,98,40,22],[58,99,41,13,"map"],[58,102,41,16],[58,103,41,18,"c"],[58,104,41,19],[58,108,41,24],[59,10,42,12],[59,14,42,16],[59,18,42,20],[59,19,42,21,"test"],[59,23,42,25],[59,24,42,26,"c"],[59,25,42,27],[59,26,42,28],[59,30,42,32],[59,31,42,33,"quoted"],[59,37,42,39],[59,39,42,41],[60,12,43,16],[60,19,43,23],[60,21,43,25],[61,10,44,12],[62,10,45,12],[62,14,45,16,"c"],[62,15,45,17],[62,20,45,22],[62,23,45,25],[62,25,45,27],[63,12,46,16,"quoted"],[63,18,46,22],[63,21,46,25],[63,22,46,26,"quoted"],[63,28,46,32],[64,10,47,12],[65,10,48,12],[65,17,48,19,"c"],[65,18,48,20],[66,8,49,8],[66,9,49,9],[66,10,49,10],[66,11,50,13,"join"],[66,15,50,17],[66,16,50,18],[66,18,50,20],[66,19,50,21],[67,8,51,8],[67,12,51,12],[67,13,51,13,"url"],[67,16,51,16],[67,17,51,17,"searchParams"],[67,29,51,29],[67,30,51,30,"set"],[67,33,51,33],[67,34,51,34],[67,42,51,42],[67,44,51,44,"cleanedColumns"],[67,58,51,58],[67,59,51,59],[68,8,52,8],[68,12,52,12,"count"],[68,17,52,17],[68,19,52,19],[69,10,53,12],[69,14,53,16],[69,15,53,17,"headers"],[69,22,53,24],[69,23,53,25],[69,31,53,33],[69,32,53,34],[69,35,53,37],[69,44,53,46,"count"],[69,49,53,51],[69,51,53,53],[70,8,54,8],[71,8,55,8],[71,15,55,15],[71,19,55,19,"PostgrestFilterBuilder_1"],[71,43,55,43],[71,44,55,44,"default"],[71,51,55,51],[71,52,55,52],[72,10,56,12,"method"],[72,16,56,18],[73,10,57,12,"url"],[73,13,57,15],[73,15,57,17],[73,19,57,21],[73,20,57,22,"url"],[73,23,57,25],[74,10,58,12,"headers"],[74,17,58,19],[74,19,58,21],[74,23,58,25],[74,24,58,26,"headers"],[74,31,58,33],[75,10,59,12,"schema"],[75,16,59,18],[75,18,59,20],[75,22,59,24],[75,23,59,25,"schema"],[75,29,59,31],[76,10,60,12,"fetch"],[76,15,60,17],[76,17,60,19],[76,21,60,23],[76,22,60,24,"fetch"],[76,27,60,29],[77,10,61,12,"allowEmpty"],[77,20,61,22],[77,22,61,24],[78,8,62,8],[78,9,62,9],[78,10,62,10],[79,6,63,4],[80,6,64,4],[81,0,65,0],[82,0,66,0],[83,0,67,0],[84,0,68,0],[85,0,69,0],[86,0,70,0],[87,0,71,0],[88,0,72,0],[89,0,73,0],[90,0,74,0],[91,0,75,0],[92,0,76,0],[93,0,77,0],[94,0,78,0],[95,0,79,0],[96,0,80,0],[97,0,81,0],[98,0,82,0],[99,0,83,0],[100,0,84,0],[101,0,85,0],[102,0,86,0],[103,0,87,0],[104,0,88,0],[105,0,89,0],[106,4,64,4],[107,6,64,4,"key"],[107,9,64,4],[108,6,64,4,"value"],[108,11,64,4],[108,13,90,4],[108,22,90,4,"insert"],[108,28,90,10,"insert"],[108,29,90,11,"values"],[108,35,90,17],[108,37,90,58],[109,8,90,58],[109,12,90,58,"_ref3"],[109,17,90,58],[109,20,90,58,"arguments"],[109,29,90,58],[109,30,90,58,"length"],[109,36,90,58],[109,44,90,58,"arguments"],[109,53,90,58],[109,61,90,58,"undefined"],[109,70,90,58],[109,73,90,58,"arguments"],[109,82,90,58],[109,88,90,54],[109,89,90,55],[109,90,90,56],[110,10,90,21,"count"],[110,15,90,26],[110,18,90,26,"_ref3"],[110,23,90,26],[110,24,90,21,"count"],[110,29,90,26],[111,10,90,26,"_ref3$defaultToNull"],[111,29,90,26],[111,32,90,26,"_ref3"],[111,37,90,26],[111,38,90,28,"defaultToNull"],[111,51,90,41],[112,10,90,28,"defaultToNull"],[112,23,90,41],[112,26,90,41,"_ref3$defaultToNull"],[112,45,90,41],[112,50,90,41,"undefined"],[112,59,90,41],[112,62,90,44],[112,66,90,48],[112,69,90,48,"_ref3$defaultToNull"],[112,88,90,48],[113,8,91,8],[113,12,91,14,"method"],[113,18,91,20],[113,21,91,23],[113,27,91,29],[114,8,92,8],[114,12,92,14,"prefersHeaders"],[114,26,92,28],[114,29,92,31],[114,31,92,33],[115,8,93,8],[115,12,93,12],[115,16,93,16],[115,17,93,17,"headers"],[115,24,93,24],[115,25,93,25],[115,33,93,33],[115,34,93,34],[115,36,93,36],[116,10,94,12,"prefersHeaders"],[116,24,94,26],[116,25,94,27,"push"],[116,29,94,31],[116,30,94,32],[116,34,94,36],[116,35,94,37,"headers"],[116,42,94,44],[116,43,94,45],[116,51,94,53],[116,52,94,54],[116,53,94,55],[117,8,95,8],[118,8,96,8],[118,12,96,12,"count"],[118,17,96,17],[118,19,96,19],[119,10,97,12,"prefersHeaders"],[119,24,97,26],[119,25,97,27,"push"],[119,29,97,31],[119,30,97,32],[119,39,97,41,"count"],[119,44,97,46],[119,46,97,48],[119,47,97,49],[120,8,98,8],[121,8,99,8],[121,12,99,12],[121,13,99,13,"defaultToNull"],[121,26,99,26],[121,28,99,28],[122,10,100,12,"prefersHeaders"],[122,24,100,26],[122,25,100,27,"push"],[122,29,100,31],[122,30,100,32],[122,47,100,49],[122,48,100,50],[123,8,101,8],[124,8,102,8],[124,12,102,12],[124,13,102,13,"headers"],[124,20,102,20],[124,21,102,21],[124,29,102,29],[124,30,102,30],[124,33,102,33,"prefersHeaders"],[124,47,102,47],[124,48,102,48,"join"],[124,52,102,52],[124,53,102,53],[124,56,102,56],[124,57,102,57],[125,8,103,8],[125,12,103,12,"Array"],[125,17,103,17],[125,18,103,18,"isArray"],[125,25,103,25],[125,26,103,26,"values"],[125,32,103,32],[125,33,103,33],[125,35,103,35],[126,10,104,12],[126,14,104,18,"columns"],[126,21,104,25],[126,24,104,28,"values"],[126,30,104,34],[126,31,104,35,"reduce"],[126,37,104,41],[126,38,104,42],[126,39,104,43,"acc"],[126,42,104,46],[126,44,104,48,"x"],[126,45,104,49],[126,50,104,54,"acc"],[126,53,104,57],[126,54,104,58,"concat"],[126,60,104,64],[126,61,104,65,"Object"],[126,67,104,71],[126,68,104,72,"keys"],[126,72,104,76],[126,73,104,77,"x"],[126,74,104,78],[126,75,104,79],[126,76,104,80],[126,78,104,82],[126,80,104,84],[126,81,104,85],[127,10,105,12],[127,14,105,16,"columns"],[127,21,105,23],[127,22,105,24,"length"],[127,28,105,30],[127,31,105,33],[127,32,105,34],[127,34,105,36],[128,12,106,16],[128,16,106,22,"uniqueColumns"],[128,29,106,35],[128,32,106,38],[128,33,106,39],[128,36,106,42],[128,40,106,46,"Set"],[128,43,106,49],[128,44,106,50,"columns"],[128,51,106,57],[128,52,106,58],[128,53,106,59],[128,54,106,60,"map"],[128,57,106,63],[128,58,106,65,"column"],[128,64,106,71],[128,68,106,76],[128,72,106,80,"column"],[128,78,106,86],[128,81,106,89],[128,82,106,90],[129,12,107,16],[129,16,107,20],[129,17,107,21,"url"],[129,20,107,24],[129,21,107,25,"searchParams"],[129,33,107,37],[129,34,107,38,"set"],[129,37,107,41],[129,38,107,42],[129,47,107,51],[129,49,107,53,"uniqueColumns"],[129,62,107,66],[129,63,107,67,"join"],[129,67,107,71],[129,68,107,72],[129,71,107,75],[129,72,107,76],[129,73,107,77],[130,10,108,12],[131,8,109,8],[132,8,110,8],[132,15,110,15],[132,19,110,19,"PostgrestFilterBuilder_1"],[132,43,110,43],[132,44,110,44,"default"],[132,51,110,51],[132,52,110,52],[133,10,111,12,"method"],[133,16,111,18],[134,10,112,12,"url"],[134,13,112,15],[134,15,112,17],[134,19,112,21],[134,20,112,22,"url"],[134,23,112,25],[135,10,113,12,"headers"],[135,17,113,19],[135,19,113,21],[135,23,113,25],[135,24,113,26,"headers"],[135,31,113,33],[136,10,114,12,"schema"],[136,16,114,18],[136,18,114,20],[136,22,114,24],[136,23,114,25,"schema"],[136,29,114,31],[137,10,115,12,"body"],[137,14,115,16],[137,16,115,18,"values"],[137,22,115,24],[138,10,116,12,"fetch"],[138,15,116,17],[138,17,116,19],[138,21,116,23],[138,22,116,24,"fetch"],[138,27,116,29],[139,10,117,12,"allowEmpty"],[139,20,117,22],[139,22,117,24],[140,8,118,8],[140,9,118,9],[140,10,118,10],[141,6,119,4],[142,6,120,4],[143,0,121,0],[144,0,122,0],[145,0,123,0],[146,0,124,0],[147,0,125,0],[148,0,126,0],[149,0,127,0],[150,0,128,0],[151,0,129,0],[152,0,130,0],[153,0,131,0],[154,0,132,0],[155,0,133,0],[156,0,134,0],[157,0,135,0],[158,0,136,0],[159,0,137,0],[160,0,138,0],[161,0,139,0],[162,0,140,0],[163,0,141,0],[164,0,142,0],[165,0,143,0],[166,0,144,0],[167,0,145,0],[168,0,146,0],[169,0,147,0],[170,0,148,0],[171,0,149,0],[172,0,150,0],[173,0,151,0],[174,0,152,0],[175,0,153,0],[176,0,154,0],[177,0,155,0],[178,0,156,0],[179,0,157,0],[180,4,120,4],[181,6,120,4,"key"],[181,9,120,4],[182,6,120,4,"value"],[182,11,120,4],[182,13,158,4],[182,22,158,4,"upsert"],[182,28,158,10,"upsert"],[182,29,158,11,"values"],[182,35,158,17],[182,37,158,96],[183,8,158,96],[183,12,158,96,"_ref4"],[183,17,158,96],[183,20,158,96,"arguments"],[183,29,158,96],[183,30,158,96,"length"],[183,36,158,96],[183,44,158,96,"arguments"],[183,53,158,96],[183,61,158,96,"undefined"],[183,70,158,96],[183,73,158,96,"arguments"],[183,82,158,96],[183,88,158,92],[183,89,158,93],[183,90,158,94],[184,10,158,21,"onConflict"],[184,20,158,31],[184,23,158,31,"_ref4"],[184,28,158,31],[184,29,158,21,"onConflict"],[184,39,158,31],[185,10,158,31,"_ref4$ignoreDuplicate"],[185,31,158,31],[185,34,158,31,"_ref4"],[185,39,158,31],[185,40,158,33,"ignoreDuplicates"],[185,56,158,49],[186,10,158,33,"ignoreDuplicates"],[186,26,158,49],[186,29,158,49,"_ref4$ignoreDuplicate"],[186,50,158,49],[186,55,158,49,"undefined"],[186,64,158,49],[186,67,158,52],[186,72,158,57],[186,75,158,57,"_ref4$ignoreDuplicate"],[186,96,158,57],[187,10,158,59,"count"],[187,15,158,64],[187,18,158,64,"_ref4"],[187,23,158,64],[187,24,158,59,"count"],[187,29,158,64],[188,10,158,64,"_ref4$defaultToNull"],[188,29,158,64],[188,32,158,64,"_ref4"],[188,37,158,64],[188,38,158,66,"defaultToNull"],[188,51,158,79],[189,10,158,66,"defaultToNull"],[189,23,158,79],[189,26,158,79,"_ref4$defaultToNull"],[189,45,158,79],[189,50,158,79,"undefined"],[189,59,158,79],[189,62,158,82],[189,66,158,86],[189,69,158,86,"_ref4$defaultToNull"],[189,88,158,86],[190,8,159,8],[190,12,159,14,"method"],[190,18,159,20],[190,21,159,23],[190,27,159,29],[191,8,160,8],[191,12,160,14,"prefersHeaders"],[191,26,160,28],[191,29,160,31],[191,30,160,32],[191,44,160,46,"ignoreDuplicates"],[191,60,160,62],[191,63,160,65],[191,71,160,73],[191,74,160,76],[191,81,160,83],[191,94,160,96],[191,95,160,97],[192,8,161,8],[192,12,161,12,"onConflict"],[192,22,161,22],[192,27,161,27,"undefined"],[192,36,161,36],[192,38,162,12],[192,42,162,16],[192,43,162,17,"url"],[192,46,162,20],[192,47,162,21,"searchParams"],[192,59,162,33],[192,60,162,34,"set"],[192,63,162,37],[192,64,162,38],[192,77,162,51],[192,79,162,53,"onConflict"],[192,89,162,63],[192,90,162,64],[193,8,163,8],[193,12,163,12],[193,16,163,16],[193,17,163,17,"headers"],[193,24,163,24],[193,25,163,25],[193,33,163,33],[193,34,163,34],[193,36,163,36],[194,10,164,12,"prefersHeaders"],[194,24,164,26],[194,25,164,27,"push"],[194,29,164,31],[194,30,164,32],[194,34,164,36],[194,35,164,37,"headers"],[194,42,164,44],[194,43,164,45],[194,51,164,53],[194,52,164,54],[194,53,164,55],[195,8,165,8],[196,8,166,8],[196,12,166,12,"count"],[196,17,166,17],[196,19,166,19],[197,10,167,12,"prefersHeaders"],[197,24,167,26],[197,25,167,27,"push"],[197,29,167,31],[197,30,167,32],[197,39,167,41,"count"],[197,44,167,46],[197,46,167,48],[197,47,167,49],[198,8,168,8],[199,8,169,8],[199,12,169,12],[199,13,169,13,"defaultToNull"],[199,26,169,26],[199,28,169,28],[200,10,170,12,"prefersHeaders"],[200,24,170,26],[200,25,170,27,"push"],[200,29,170,31],[200,30,170,32],[200,47,170,49],[200,48,170,50],[201,8,171,8],[202,8,172,8],[202,12,172,12],[202,13,172,13,"headers"],[202,20,172,20],[202,21,172,21],[202,29,172,29],[202,30,172,30],[202,33,172,33,"prefersHeaders"],[202,47,172,47],[202,48,172,48,"join"],[202,52,172,52],[202,53,172,53],[202,56,172,56],[202,57,172,57],[203,8,173,8],[203,12,173,12,"Array"],[203,17,173,17],[203,18,173,18,"isArray"],[203,25,173,25],[203,26,173,26,"values"],[203,32,173,32],[203,33,173,33],[203,35,173,35],[204,10,174,12],[204,14,174,18,"columns"],[204,21,174,25],[204,24,174,28,"values"],[204,30,174,34],[204,31,174,35,"reduce"],[204,37,174,41],[204,38,174,42],[204,39,174,43,"acc"],[204,42,174,46],[204,44,174,48,"x"],[204,45,174,49],[204,50,174,54,"acc"],[204,53,174,57],[204,54,174,58,"concat"],[204,60,174,64],[204,61,174,65,"Object"],[204,67,174,71],[204,68,174,72,"keys"],[204,72,174,76],[204,73,174,77,"x"],[204,74,174,78],[204,75,174,79],[204,76,174,80],[204,78,174,82],[204,80,174,84],[204,81,174,85],[205,10,175,12],[205,14,175,16,"columns"],[205,21,175,23],[205,22,175,24,"length"],[205,28,175,30],[205,31,175,33],[205,32,175,34],[205,34,175,36],[206,12,176,16],[206,16,176,22,"uniqueColumns"],[206,29,176,35],[206,32,176,38],[206,33,176,39],[206,36,176,42],[206,40,176,46,"Set"],[206,43,176,49],[206,44,176,50,"columns"],[206,51,176,57],[206,52,176,58],[206,53,176,59],[206,54,176,60,"map"],[206,57,176,63],[206,58,176,65,"column"],[206,64,176,71],[206,68,176,76],[206,72,176,80,"column"],[206,78,176,86],[206,81,176,89],[206,82,176,90],[207,12,177,16],[207,16,177,20],[207,17,177,21,"url"],[207,20,177,24],[207,21,177,25,"searchParams"],[207,33,177,37],[207,34,177,38,"set"],[207,37,177,41],[207,38,177,42],[207,47,177,51],[207,49,177,53,"uniqueColumns"],[207,62,177,66],[207,63,177,67,"join"],[207,67,177,71],[207,68,177,72],[207,71,177,75],[207,72,177,76],[207,73,177,77],[208,10,178,12],[209,8,179,8],[210,8,180,8],[210,15,180,15],[210,19,180,19,"PostgrestFilterBuilder_1"],[210,43,180,43],[210,44,180,44,"default"],[210,51,180,51],[210,52,180,52],[211,10,181,12,"method"],[211,16,181,18],[212,10,182,12,"url"],[212,13,182,15],[212,15,182,17],[212,19,182,21],[212,20,182,22,"url"],[212,23,182,25],[213,10,183,12,"headers"],[213,17,183,19],[213,19,183,21],[213,23,183,25],[213,24,183,26,"headers"],[213,31,183,33],[214,10,184,12,"schema"],[214,16,184,18],[214,18,184,20],[214,22,184,24],[214,23,184,25,"schema"],[214,29,184,31],[215,10,185,12,"body"],[215,14,185,16],[215,16,185,18,"values"],[215,22,185,24],[216,10,186,12,"fetch"],[216,15,186,17],[216,17,186,19],[216,21,186,23],[216,22,186,24,"fetch"],[216,27,186,29],[217,10,187,12,"allowEmpty"],[217,20,187,22],[217,22,187,24],[218,8,188,8],[218,9,188,9],[218,10,188,10],[219,6,189,4],[220,6,190,4],[221,0,191,0],[222,0,192,0],[223,0,193,0],[224,0,194,0],[225,0,195,0],[226,0,196,0],[227,0,197,0],[228,0,198,0],[229,0,199,0],[230,0,200,0],[231,0,201,0],[232,0,202,0],[233,0,203,0],[234,0,204,0],[235,0,205,0],[236,0,206,0],[237,0,207,0],[238,0,208,0],[239,0,209,0],[240,0,210,0],[241,4,190,4],[242,6,190,4,"key"],[242,9,190,4],[243,6,190,4,"value"],[243,11,190,4],[243,13,211,4],[243,22,211,4,"update"],[243,28,211,10,"update"],[243,29,211,11,"values"],[243,35,211,17],[243,37,211,36],[244,8,211,36],[244,12,211,36,"_ref5"],[244,17,211,36],[244,20,211,36,"arguments"],[244,29,211,36],[244,30,211,36,"length"],[244,36,211,36],[244,44,211,36,"arguments"],[244,53,211,36],[244,61,211,36,"undefined"],[244,70,211,36],[244,73,211,36,"arguments"],[244,82,211,36],[244,88,211,32],[244,89,211,33],[244,90,211,34],[245,10,211,21,"count"],[245,15,211,26],[245,18,211,26,"_ref5"],[245,23,211,26],[245,24,211,21,"count"],[245,29,211,26],[246,8,212,8],[246,12,212,14,"method"],[246,18,212,20],[246,21,212,23],[246,28,212,30],[247,8,213,8],[247,12,213,14,"prefersHeaders"],[247,26,213,28],[247,29,213,31],[247,31,213,33],[248,8,214,8],[248,12,214,12],[248,16,214,16],[248,17,214,17,"headers"],[248,24,214,24],[248,25,214,25],[248,33,214,33],[248,34,214,34],[248,36,214,36],[249,10,215,12,"prefersHeaders"],[249,24,215,26],[249,25,215,27,"push"],[249,29,215,31],[249,30,215,32],[249,34,215,36],[249,35,215,37,"headers"],[249,42,215,44],[249,43,215,45],[249,51,215,53],[249,52,215,54],[249,53,215,55],[250,8,216,8],[251,8,217,8],[251,12,217,12,"count"],[251,17,217,17],[251,19,217,19],[252,10,218,12,"prefersHeaders"],[252,24,218,26],[252,25,218,27,"push"],[252,29,218,31],[252,30,218,32],[252,39,218,41,"count"],[252,44,218,46],[252,46,218,48],[252,47,218,49],[253,8,219,8],[254,8,220,8],[254,12,220,12],[254,13,220,13,"headers"],[254,20,220,20],[254,21,220,21],[254,29,220,29],[254,30,220,30],[254,33,220,33,"prefersHeaders"],[254,47,220,47],[254,48,220,48,"join"],[254,52,220,52],[254,53,220,53],[254,56,220,56],[254,57,220,57],[255,8,221,8],[255,15,221,15],[255,19,221,19,"PostgrestFilterBuilder_1"],[255,43,221,43],[255,44,221,44,"default"],[255,51,221,51],[255,52,221,52],[256,10,222,12,"method"],[256,16,222,18],[257,10,223,12,"url"],[257,13,223,15],[257,15,223,17],[257,19,223,21],[257,20,223,22,"url"],[257,23,223,25],[258,10,224,12,"headers"],[258,17,224,19],[258,19,224,21],[258,23,224,25],[258,24,224,26,"headers"],[258,31,224,33],[259,10,225,12,"schema"],[259,16,225,18],[259,18,225,20],[259,22,225,24],[259,23,225,25,"schema"],[259,29,225,31],[260,10,226,12,"body"],[260,14,226,16],[260,16,226,18,"values"],[260,22,226,24],[261,10,227,12,"fetch"],[261,15,227,17],[261,17,227,19],[261,21,227,23],[261,22,227,24,"fetch"],[261,27,227,29],[262,10,228,12,"allowEmpty"],[262,20,228,22],[262,22,228,24],[263,8,229,8],[263,9,229,9],[263,10,229,10],[264,6,230,4],[265,6,231,4],[266,0,232,0],[267,0,233,0],[268,0,234,0],[269,0,235,0],[270,0,236,0],[271,0,237,0],[272,0,238,0],[273,0,239,0],[274,0,240,0],[275,0,241,0],[276,0,242,0],[277,0,243,0],[278,0,244,0],[279,0,245,0],[280,0,246,0],[281,0,247,0],[282,0,248,0],[283,0,249,0],[284,4,231,4],[285,6,231,4,"key"],[285,9,231,4],[286,6,231,4,"value"],[286,11,231,4],[286,13,250,4],[286,22,250,4,"delete"],[286,29,250,10,"delete"],[286,30,250,10],[286,32,250,28],[287,8,250,28],[287,12,250,28,"_ref6"],[287,17,250,28],[287,20,250,28,"arguments"],[287,29,250,28],[287,30,250,28,"length"],[287,36,250,28],[287,44,250,28,"arguments"],[287,53,250,28],[287,61,250,28,"undefined"],[287,70,250,28],[287,73,250,28,"arguments"],[287,82,250,28],[287,88,250,24],[287,89,250,25],[287,90,250,26],[288,10,250,13,"count"],[288,15,250,18],[288,18,250,18,"_ref6"],[288,23,250,18],[288,24,250,13,"count"],[288,29,250,18],[289,8,251,8],[289,12,251,14,"method"],[289,18,251,20],[289,21,251,23],[289,29,251,31],[290,8,252,8],[290,12,252,14,"prefersHeaders"],[290,26,252,28],[290,29,252,31],[290,31,252,33],[291,8,253,8],[291,12,253,12,"count"],[291,17,253,17],[291,19,253,19],[292,10,254,12,"prefersHeaders"],[292,24,254,26],[292,25,254,27,"push"],[292,29,254,31],[292,30,254,32],[292,39,254,41,"count"],[292,44,254,46],[292,46,254,48],[292,47,254,49],[293,8,255,8],[294,8,256,8],[294,12,256,12],[294,16,256,16],[294,17,256,17,"headers"],[294,24,256,24],[294,25,256,25],[294,33,256,33],[294,34,256,34],[294,36,256,36],[295,10,257,12,"prefersHeaders"],[295,24,257,26],[295,25,257,27,"unshift"],[295,32,257,34],[295,33,257,35],[295,37,257,39],[295,38,257,40,"headers"],[295,45,257,47],[295,46,257,48],[295,54,257,56],[295,55,257,57],[295,56,257,58],[296,8,258,8],[297,8,259,8],[297,12,259,12],[297,13,259,13,"headers"],[297,20,259,20],[297,21,259,21],[297,29,259,29],[297,30,259,30],[297,33,259,33,"prefersHeaders"],[297,47,259,47],[297,48,259,48,"join"],[297,52,259,52],[297,53,259,53],[297,56,259,56],[297,57,259,57],[298,8,260,8],[298,15,260,15],[298,19,260,19,"PostgrestFilterBuilder_1"],[298,43,260,43],[298,44,260,44,"default"],[298,51,260,51],[298,52,260,52],[299,10,261,12,"method"],[299,16,261,18],[300,10,262,12,"url"],[300,13,262,15],[300,15,262,17],[300,19,262,21],[300,20,262,22,"url"],[300,23,262,25],[301,10,263,12,"headers"],[301,17,263,19],[301,19,263,21],[301,23,263,25],[301,24,263,26,"headers"],[301,31,263,33],[302,10,264,12,"schema"],[302,16,264,18],[302,18,264,20],[302,22,264,24],[302,23,264,25,"schema"],[302,29,264,31],[303,10,265,12,"fetch"],[303,15,265,17],[303,17,265,19],[303,21,265,23],[303,22,265,24,"fetch"],[303,27,265,29],[304,10,266,12,"allowEmpty"],[304,20,266,22],[304,22,266,24],[305,8,267,8],[305,9,267,9],[305,10,267,10],[306,6,268,4],[307,4,268,5],[308,2,268,5],[309,2,270,0,"exports"],[309,9,270,7],[309,10,270,8,"default"],[309,17,270,15],[309,20,270,18,"PostgrestQueryBuilder"],[309,41,270,39],[310,0,270,40],[310,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;wDCC;CDE;AEG;ICC;KDK;IEsB;iBCM;SDQ;KFc;II2B;0CCc,sCD;gEEE,yBF;KJa;IOuC;0CFgB,sCE;gEDE,yBC;KPa;IQsB;KRmB;ISoB;KTkB;CFC"}},"type":"js/module"}]}