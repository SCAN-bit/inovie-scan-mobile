{"dependencies":[{"name":"../../../utils","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"q0dGJrXE+KOj2tnl0zxlb7IT3hM="}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":69,"index":124}}],"key":"jHxpGyKKM1Po/KDZ+w70VrLZoqU="}},{"name":"react","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":174},"end":{"line":5,"column":43,"index":217}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"react-native","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":218},"end":{"line":6,"column":46,"index":264}}],"key":"XEo4Z+Aarw9Y7I7ZLBt66vGLAVQ="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[0]);\n  var _getShadowNodeFromRef = require(_dependencyMap[1]);\n  var _react = require(_dependencyMap[2]);\n  var _reactNative = require(_dependencyMap[3]);\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    var refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _reactNative.findNodeHandle)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":33,"map":[[6,2,1,0],[6,6,1,0,"_utils"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_getShadowNodeFromRef"],[7,27,2,0],[7,30,2,0,"require"],[7,37,2,0],[7,38,2,0,"_dependencyMap"],[7,52,2,0],[8,2,5,0],[8,6,5,0,"_react"],[8,12,5,0],[8,15,5,0,"require"],[8,22,5,0],[8,23,5,0,"_dependencyMap"],[8,37,5,0],[9,2,6,0],[9,6,6,0,"_reactNative"],[9,18,6,0],[9,21,6,0,"require"],[9,28,6,0],[9,29,6,0,"_dependencyMap"],[9,43,6,0],[10,2,12,0],[11,2,13,0],[12,2,14,0],[13,2,15,7],[13,11,15,16,"useViewRefHandler"],[13,28,15,33,"useViewRefHandler"],[13,29,16,2,"state"],[13,34,16,29],[13,36,17,2,"updateAttachedGestures"],[13,58,17,62],[13,60,18,2],[14,4,19,2],[14,8,19,8,"refHandler"],[14,18,19,18],[14,21,19,21],[14,25,19,21,"useCallback"],[14,43,19,32],[14,45,20,5,"ref"],[14,48,20,32],[14,52,20,37],[15,6,21,6],[15,10,21,10,"ref"],[15,13,21,13],[15,18,21,18],[15,22,21,22],[15,24,21,24],[16,8,22,8],[17,6,23,6],[18,6,25,6,"state"],[18,11,25,11],[18,12,25,12,"viewRef"],[18,19,25,19],[18,22,25,22,"ref"],[18,25,25,25],[20,6,27,6],[21,6,28,6],[21,10,28,10,"state"],[21,15,28,15],[21,16,28,16,"previousViewTag"],[21,31,28,31],[21,38,28,38],[21,40,28,40],[22,8,29,8,"state"],[22,13,29,13],[22,14,29,14,"previousViewTag"],[22,29,29,29],[22,32,29,32],[22,36,29,32,"findNodeHandle"],[22,63,29,46],[22,65,29,47,"state"],[22,70,29,52],[22,71,29,53,"viewRef"],[22,78,29,60],[22,79,29,71],[23,6,30,6],[25,6,32,6],[26,6,33,6],[27,6,34,6],[27,10,34,10],[27,11,34,11,"state"],[27,16,34,16],[27,17,34,17,"firstRender"],[27,28,34,28],[27,30,34,30],[28,8,35,8,"updateAttachedGestures"],[28,30,35,30],[28,31,35,31],[28,35,35,35],[28,36,35,36],[29,6,36,6],[30,4,49,4],[30,5,49,5],[30,7,50,4],[30,8,50,5,"state"],[30,13,50,10],[30,15,50,12,"updateAttachedGestures"],[30,37,50,34],[30,38,51,2],[30,39,51,3],[31,4,53,2],[31,11,53,9,"refHandler"],[31,21,53,19],[32,2,54,0],[33,0,54,1],[33,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCc;ICK;KD6B;CDK"}},"type":"js/module"}]}