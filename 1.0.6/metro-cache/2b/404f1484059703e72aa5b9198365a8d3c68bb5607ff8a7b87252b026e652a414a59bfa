{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7816}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7816}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7816}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":247,"column":36,"index":7816}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":69,"index":69}}],"key":"6eZFbfKht0uO2NEVT/d8+i8B0s8="}},{"name":"@react-native-community/netinfo","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":71},"end":{"line":2,"column":54,"index":125}}],"key":"ltLFhIfxyy89okchfB5w/bUar/s="}},{"name":"./firebaseService","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":127},"end":{"line":3,"column":48,"index":175}}],"key":"Z9W0kV4DuAJReQqrXJFhVrW6SCk="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = undefined;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));\n  var _asyncStorage = _interopRequireDefault(require(_dependencyMap[4]));\n  var _netinfo = _interopRequireDefault(require(_dependencyMap[5]));\n  var _firebaseService = _interopRequireDefault(require(_dependencyMap[6]));\n  var OfflineQueueService = /*#__PURE__*/function () {\n    function OfflineQueueService() {\n      (0, _classCallCheck2.default)(this, OfflineQueueService);\n      this.isProcessing = false;\n      this.queueKey = 'offline_scan_queue';\n      this.retryInterval = null;\n      this.listeners = [];\n\n      // Écouter les changements de connectivité\n      this.initNetworkListener();\n    }\n\n    // Initialiser l'écoute de la connectivité réseau\n    return (0, _createClass2.default)(OfflineQueueService, [{\n      key: \"initNetworkListener\",\n      value: function initNetworkListener() {\n        _netinfo.default.addEventListener(state => {\n          // Log supprimé pour nettoyer la console\n\n          if (state.isConnected && !this.isProcessing) {\n            this.processQueue();\n          }\n        });\n      }\n\n      // Ajouter des scans à la queue hors-ligne\n    }, {\n      key: \"addToQueue\",\n      value: function () {\n        var _addToQueue = (0, _asyncToGenerator2.default)(function* (scansData) {\n          try {\n            var existingQueue = yield this.getQueue();\n            var timestamp = Date.now();\n            var queueItem = {\n              id: `queue_${timestamp}_${Math.random().toString(36).substr(2, 9)}`,\n              data: scansData,\n              timestamp,\n              retryCount: 0,\n              status: 'pending'\n            };\n            existingQueue.push(queueItem);\n            yield _asyncStorage.default.setItem(this.queueKey, JSON.stringify(existingQueue));\n            console.log(`[OfflineQueue] ✅ ${scansData.length} scan(s) ajouté(s) à la queue hors-ligne`);\n\n            // Notifier les listeners\n            this.notifyListeners('queued', {\n              count: scansData.length,\n              queueSize: existingQueue.length\n            });\n            return queueItem.id;\n          } catch (error) {\n            console.error('[OfflineQueue] ❌ Erreur ajout queue:', error);\n            throw error;\n          }\n        });\n        function addToQueue(_x) {\n          return _addToQueue.apply(this, arguments);\n        }\n        return addToQueue;\n      }() // Récupérer la queue actuelle\n    }, {\n      key: \"getQueue\",\n      value: function () {\n        var _getQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var queue = yield _asyncStorage.default.getItem(this.queueKey);\n            return queue ? JSON.parse(queue) : [];\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur lecture queue:', error);\n            return [];\n          }\n        });\n        function getQueue() {\n          return _getQueue.apply(this, arguments);\n        }\n        return getQueue;\n      }() // Obtenir le nombre d'éléments en attente\n    }, {\n      key: \"getQueueSize\",\n      value: function () {\n        var _getQueueSize = (0, _asyncToGenerator2.default)(function* () {\n          var queue = yield this.getQueue();\n          return queue.filter(item => item.status === 'pending').length;\n        });\n        function getQueueSize() {\n          return _getQueueSize.apply(this, arguments);\n        }\n        return getQueueSize;\n      }() // Traiter la queue quand la connexion revient\n    }, {\n      key: \"processQueue\",\n      value: function () {\n        var _processQueue = (0, _asyncToGenerator2.default)(function* () {\n          if (this.isProcessing) return;\n          this.isProcessing = true;\n          // Log supprimé pour nettoyer la console\n\n          try {\n            var queue = yield this.getQueue();\n            var pendingItems = queue.filter(item => item.status === 'pending');\n            if (pendingItems.length === 0) {\n              // Log supprimé pour nettoyer la console\n              this.isProcessing = false;\n              return;\n            }\n            console.log(`[OfflineQueue] 📤 Traitement de ${pendingItems.length} élément(s) en attente`);\n            var successCount = 0;\n            var failCount = 0;\n            for (var item of pendingItems) {\n              try {\n                // Vérifier la connectivité avant chaque tentative\n                var netState = yield _netinfo.default.fetch();\n                if (!netState.isConnected) {\n                  // Log supprimé pour nettoyer la console\n                  break;\n                }\n                console.log(`[OfflineQueue] 📤 Envoi de ${item.data.length} scan(s)...`);\n                var result = yield _firebaseService.default.addScans(item.data);\n                if (result.success) {\n                  // Marquer comme réussi\n                  item.status = 'completed';\n                  item.completedAt = Date.now();\n                  successCount++;\n                  console.log(`[OfflineQueue] ✅ Envoi réussi: ${item.data.length} scan(s)`);\n                  this.notifyListeners('sent', {\n                    count: item.data.length\n                  });\n                } else {\n                  throw new Error(result.error || 'Échec envoi');\n                }\n              } catch (error) {\n                console.error(`[OfflineQueue] ❌ Échec envoi item ${item.id}:`, error.message);\n                item.retryCount = (item.retryCount || 0) + 1;\n                item.lastError = error.message;\n                item.lastRetry = Date.now();\n\n                // Abandon après 3 tentatives\n                if (item.retryCount >= 3) {\n                  item.status = 'failed';\n                  console.error(`[OfflineQueue] ⚠️ Abandon après 3 tentatives: ${item.id}`);\n                }\n                failCount++;\n              }\n            }\n\n            // Sauvegarder la queue mise à jour\n            yield _asyncStorage.default.setItem(this.queueKey, JSON.stringify(queue));\n\n            // Nettoyer les éléments traités (garder seulement pending et failed récents)\n            yield this.cleanupQueue();\n            console.log(`[OfflineQueue] ✅ Traitement terminé: ${successCount} réussis, ${failCount} échecs`);\n            this.notifyListeners('processed', {\n              success: successCount,\n              failed: failCount,\n              remaining: yield this.getQueueSize()\n            });\n          } catch (error) {\n            console.error('[OfflineQueue] ❌ Erreur traitement queue:', error);\n          } finally {\n            this.isProcessing = false;\n          }\n        });\n        function processQueue() {\n          return _processQueue.apply(this, arguments);\n        }\n        return processQueue;\n      }() // Nettoyer la queue (supprimer les anciens éléments traités)\n    }, {\n      key: \"cleanupQueue\",\n      value: function () {\n        var _cleanupQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var queue = yield this.getQueue();\n            var now = Date.now();\n            var maxAge = 86400000; // 24h\n\n            var cleanedQueue = queue.filter(item => {\n              // Garder les éléments pending\n              if (item.status === 'pending') return true;\n\n              // Garder les éléments récents (moins de 24h)\n              var age = now - (item.completedAt || item.timestamp);\n              return age < maxAge;\n            });\n            if (cleanedQueue.length !== queue.length) {\n              yield _asyncStorage.default.setItem(this.queueKey, JSON.stringify(cleanedQueue));\n              console.log(`[OfflineQueue] 🧹 Queue nettoyée: ${queue.length - cleanedQueue.length} anciens éléments supprimés`);\n            }\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur nettoyage queue:', error);\n          }\n        });\n        function cleanupQueue() {\n          return _cleanupQueue.apply(this, arguments);\n        }\n        return cleanupQueue;\n      }() // Vider complètement la queue\n    }, {\n      key: \"clearQueue\",\n      value: function () {\n        var _clearQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield _asyncStorage.default.removeItem(this.queueKey);\n            // Log supprimé pour nettoyer la console\n            this.notifyListeners('cleared', {});\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur vidage queue:', error);\n            throw error;\n          }\n        });\n        function clearQueue() {\n          return _clearQueue.apply(this, arguments);\n        }\n        return clearQueue;\n      }() // Forcer le traitement de la queue\n    }, {\n      key: \"forceProcess\",\n      value: function () {\n        var _forceProcess = (0, _asyncToGenerator2.default)(function* () {\n          if (this.isProcessing) {\n            // Log supprimé pour nettoyer la console\n            return;\n          }\n          var netState = yield _netinfo.default.fetch();\n          if (!netState.isConnected) {\n            throw new Error('Aucune connexion réseau disponible');\n          }\n          yield this.processQueue();\n        });\n        function forceProcess() {\n          return _forceProcess.apply(this, arguments);\n        }\n        return forceProcess;\n      }() // Ajouter un listener pour les événements\n    }, {\n      key: \"addListener\",\n      value: function addListener(callback) {\n        this.listeners.push(callback);\n        return () => {\n          this.listeners = this.listeners.filter(l => l !== callback);\n        };\n      }\n\n      // Notifier tous les listeners\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(event, data) {\n        this.listeners.forEach(listener => {\n          try {\n            listener(event, data);\n          } catch (error) {\n            console.error('[OfflineQueue] Erreur listener:', error);\n          }\n        });\n      }\n\n      // Obtenir les statistiques de la queue\n    }, {\n      key: \"getStats\",\n      value: function () {\n        var _getStats = (0, _asyncToGenerator2.default)(function* () {\n          var queue = yield this.getQueue();\n          return {\n            total: queue.length,\n            pending: queue.filter(item => item.status === 'pending').length,\n            completed: queue.filter(item => item.status === 'completed').length,\n            failed: queue.filter(item => item.status === 'failed').length,\n            oldestPending: queue.filter(item => item.status === 'pending').reduce((oldest, item) => !oldest || item.timestamp < oldest.timestamp ? item : oldest, null)\n          };\n        });\n        function getStats() {\n          return _getStats.apply(this, arguments);\n        }\n        return getStats;\n      }()\n    }]);\n  }(); // Instance singleton\n  var offlineQueueService = new OfflineQueueService();\n  var _default = exports.default = offlineQueueService;\n});","lineCount":292,"map":[[10,2,1,0],[10,6,1,0,"_asyncStorage"],[10,19,1,0],[10,22,1,0,"_interopRequireDefault"],[10,44,1,0],[10,45,1,0,"require"],[10,52,1,0],[10,53,1,0,"_dependencyMap"],[10,67,1,0],[11,2,2,0],[11,6,2,0,"_netinfo"],[11,14,2,0],[11,17,2,0,"_interopRequireDefault"],[11,39,2,0],[11,40,2,0,"require"],[11,47,2,0],[11,48,2,0,"_dependencyMap"],[11,62,2,0],[12,2,3,0],[12,6,3,0,"_firebaseService"],[12,22,3,0],[12,25,3,0,"_interopRequireDefault"],[12,47,3,0],[12,48,3,0,"require"],[12,55,3,0],[12,56,3,0,"_dependencyMap"],[12,70,3,0],[13,2,3,48],[13,6,5,6,"OfflineQueueService"],[13,25,5,25],[14,4,6,2],[14,13,6,2,"OfflineQueueService"],[14,33,6,2],[14,35,6,16],[15,6,6,16],[15,10,6,16,"_classCallCheck2"],[15,26,6,16],[15,27,6,16,"default"],[15,34,6,16],[15,42,6,16,"OfflineQueueService"],[15,61,6,16],[16,6,7,4],[16,10,7,8],[16,11,7,9,"isProcessing"],[16,23,7,21],[16,26,7,24],[16,31,7,29],[17,6,8,4],[17,10,8,8],[17,11,8,9,"queueKey"],[17,19,8,17],[17,22,8,20],[17,42,8,40],[18,6,9,4],[18,10,9,8],[18,11,9,9,"retryInterval"],[18,24,9,22],[18,27,9,25],[18,31,9,29],[19,6,10,4],[19,10,10,8],[19,11,10,9,"listeners"],[19,20,10,18],[19,23,10,21],[19,25,10,23],[21,6,12,4],[22,6,13,4],[22,10,13,8],[22,11,13,9,"initNetworkListener"],[22,30,13,28],[22,31,13,29],[22,32,13,30],[23,4,14,2],[25,4,16,2],[26,4,16,2],[26,15,16,2,"_createClass2"],[26,28,16,2],[26,29,16,2,"default"],[26,36,16,2],[26,38,16,2,"OfflineQueueService"],[26,57,16,2],[27,6,16,2,"key"],[27,9,16,2],[28,6,16,2,"value"],[28,11,16,2],[28,13,17,2],[28,22,17,2,"initNetworkListener"],[28,41,17,21,"initNetworkListener"],[28,42,17,21],[28,44,17,24],[29,8,18,4,"NetInfo"],[29,24,18,11],[29,25,18,12,"addEventListener"],[29,41,18,28],[29,42,18,29,"state"],[29,47,18,34],[29,51,18,38],[30,10,19,6],[32,10,21,6],[32,14,21,10,"state"],[32,19,21,15],[32,20,21,16,"isConnected"],[32,31,21,27],[32,35,21,31],[32,36,21,32],[32,40,21,36],[32,41,21,37,"isProcessing"],[32,53,21,49],[32,55,21,51],[33,12,22,8],[33,16,22,12],[33,17,22,13,"processQueue"],[33,29,22,25],[33,30,22,26],[33,31,22,27],[34,10,23,6],[35,8,24,4],[35,9,24,5],[35,10,24,6],[36,6,25,2],[38,6,27,2],[39,4,27,2],[40,6,27,2,"key"],[40,9,27,2],[41,6,27,2,"value"],[41,11,27,2],[42,8,27,2],[42,12,27,2,"_addToQueue"],[42,23,27,2],[42,30,27,2,"_asyncToGenerator2"],[42,48,27,2],[42,49,27,2,"default"],[42,56,27,2],[42,58,28,2],[42,69,28,19,"scansData"],[42,78,28,28],[42,80,28,30],[43,10,29,4],[43,14,29,8],[44,12,30,6],[44,16,30,12,"existingQueue"],[44,29,30,25],[44,38,30,34],[44,42,30,38],[44,43,30,39,"getQueue"],[44,51,30,47],[44,52,30,48],[44,53,30,49],[45,12,31,6],[45,16,31,12,"timestamp"],[45,25,31,21],[45,28,31,24,"Date"],[45,32,31,28],[45,33,31,29,"now"],[45,36,31,32],[45,37,31,33],[45,38,31,34],[46,12,33,6],[46,16,33,12,"queueItem"],[46,25,33,21],[46,28,33,24],[47,14,34,8,"id"],[47,16,34,10],[47,18,34,12],[47,27,34,21,"timestamp"],[47,36,34,30],[47,40,34,34,"Math"],[47,44,34,38],[47,45,34,39,"random"],[47,51,34,45],[47,52,34,46],[47,53,34,47],[47,54,34,48,"toString"],[47,62,34,56],[47,63,34,57],[47,65,34,59],[47,66,34,60],[47,67,34,61,"substr"],[47,73,34,67],[47,74,34,68],[47,75,34,69],[47,77,34,71],[47,78,34,72],[47,79,34,73],[47,81,34,75],[48,14,35,8,"data"],[48,18,35,12],[48,20,35,14,"scansData"],[48,29,35,23],[49,14,36,8,"timestamp"],[49,23,36,17],[50,14,37,8,"retryCount"],[50,24,37,18],[50,26,37,20],[50,27,37,21],[51,14,38,8,"status"],[51,20,38,14],[51,22,38,16],[52,12,39,6],[52,13,39,7],[53,12,41,6,"existingQueue"],[53,25,41,19],[53,26,41,20,"push"],[53,30,41,24],[53,31,41,25,"queueItem"],[53,40,41,34],[53,41,41,35],[54,12,42,6],[54,18,42,12,"AsyncStorage"],[54,39,42,24],[54,40,42,25,"setItem"],[54,47,42,32],[54,48,42,33],[54,52,42,37],[54,53,42,38,"queueKey"],[54,61,42,46],[54,63,42,48,"JSON"],[54,67,42,52],[54,68,42,53,"stringify"],[54,77,42,62],[54,78,42,63,"existingQueue"],[54,91,42,76],[54,92,42,77],[54,93,42,78],[55,12,44,6,"console"],[55,19,44,13],[55,20,44,14,"log"],[55,23,44,17],[55,24,44,18],[55,44,44,38,"scansData"],[55,53,44,47],[55,54,44,48,"length"],[55,60,44,54],[55,102,44,96],[55,103,44,97],[57,12,46,6],[58,12,47,6],[58,16,47,10],[58,17,47,11,"notifyListeners"],[58,32,47,26],[58,33,47,27],[58,41,47,35],[58,43,47,37],[59,14,47,39,"count"],[59,19,47,44],[59,21,47,46,"scansData"],[59,30,47,55],[59,31,47,56,"length"],[59,37,47,62],[60,14,47,64,"queueSize"],[60,23,47,73],[60,25,47,75,"existingQueue"],[60,38,47,88],[60,39,47,89,"length"],[61,12,47,96],[61,13,47,97],[61,14,47,98],[62,12,49,6],[62,19,49,13,"queueItem"],[62,28,49,22],[62,29,49,23,"id"],[62,31,49,25],[63,10,50,4],[63,11,50,5],[63,12,50,6],[63,19,50,13,"error"],[63,24,50,18],[63,26,50,20],[64,12,51,6,"console"],[64,19,51,13],[64,20,51,14,"error"],[64,25,51,19],[64,26,51,20],[64,64,51,58],[64,66,51,60,"error"],[64,71,51,65],[64,72,51,66],[65,12,52,6],[65,18,52,12,"error"],[65,23,52,17],[66,10,53,4],[67,8,54,2],[67,9,54,3],[68,8,54,3],[68,17,28,8,"addToQueue"],[68,27,28,18,"addToQueue"],[68,28,28,18,"_x"],[68,30,28,18],[69,10,28,18],[69,17,28,18,"_addToQueue"],[69,28,28,18],[69,29,28,18,"apply"],[69,34,28,18],[69,41,28,18,"arguments"],[69,50,28,18],[70,8,28,18],[71,8,28,18],[71,15,28,8,"addToQueue"],[71,25,28,18],[72,6,28,18],[72,10,56,2],[73,4,56,2],[74,6,56,2,"key"],[74,9,56,2],[75,6,56,2,"value"],[75,11,56,2],[76,8,56,2],[76,12,56,2,"_getQueue"],[76,21,56,2],[76,28,56,2,"_asyncToGenerator2"],[76,46,56,2],[76,47,56,2,"default"],[76,54,56,2],[76,56,57,2],[76,69,57,19],[77,10,58,4],[77,14,58,8],[78,12,59,6],[78,16,59,12,"queue"],[78,21,59,17],[78,30,59,26,"AsyncStorage"],[78,51,59,38],[78,52,59,39,"getItem"],[78,59,59,46],[78,60,59,47],[78,64,59,51],[78,65,59,52,"queueKey"],[78,73,59,60],[78,74,59,61],[79,12,60,6],[79,19,60,13,"queue"],[79,24,60,18],[79,27,60,21,"JSON"],[79,31,60,25],[79,32,60,26,"parse"],[79,37,60,31],[79,38,60,32,"queue"],[79,43,60,37],[79,44,60,38],[79,47,60,41],[79,49,60,43],[80,10,61,4],[80,11,61,5],[80,12,61,6],[80,19,61,13,"error"],[80,24,61,18],[80,26,61,20],[81,12,62,6,"console"],[81,19,62,13],[81,20,62,14,"error"],[81,25,62,19],[81,26,62,20],[81,64,62,58],[81,66,62,60,"error"],[81,71,62,65],[81,72,62,66],[82,12,63,6],[82,19,63,13],[82,21,63,15],[83,10,64,4],[84,8,65,2],[84,9,65,3],[85,8,65,3],[85,17,57,8,"getQueue"],[85,25,57,16,"getQueue"],[85,26,57,16],[86,10,57,16],[86,17,57,16,"_getQueue"],[86,26,57,16],[86,27,57,16,"apply"],[86,32,57,16],[86,39,57,16,"arguments"],[86,48,57,16],[87,8,57,16],[88,8,57,16],[88,15,57,8,"getQueue"],[88,23,57,16],[89,6,57,16],[89,10,67,2],[90,4,67,2],[91,6,67,2,"key"],[91,9,67,2],[92,6,67,2,"value"],[92,11,67,2],[93,8,67,2],[93,12,67,2,"_getQueueSize"],[93,25,67,2],[93,32,67,2,"_asyncToGenerator2"],[93,50,67,2],[93,51,67,2,"default"],[93,58,67,2],[93,60,68,2],[93,73,68,23],[94,10,69,4],[94,14,69,10,"queue"],[94,19,69,15],[94,28,69,24],[94,32,69,28],[94,33,69,29,"getQueue"],[94,41,69,37],[94,42,69,38],[94,43,69,39],[95,10,70,4],[95,17,70,11,"queue"],[95,22,70,16],[95,23,70,17,"filter"],[95,29,70,23],[95,30,70,24,"item"],[95,34,70,28],[95,38,70,32,"item"],[95,42,70,36],[95,43,70,37,"status"],[95,49,70,43],[95,54,70,48],[95,63,70,57],[95,64,70,58],[95,65,70,59,"length"],[95,71,70,65],[96,8,71,2],[96,9,71,3],[97,8,71,3],[97,17,68,8,"getQueueSize"],[97,29,68,20,"getQueueSize"],[97,30,68,20],[98,10,68,20],[98,17,68,20,"_getQueueSize"],[98,30,68,20],[98,31,68,20,"apply"],[98,36,68,20],[98,43,68,20,"arguments"],[98,52,68,20],[99,8,68,20],[100,8,68,20],[100,15,68,8,"getQueueSize"],[100,27,68,20],[101,6,68,20],[101,10,73,2],[102,4,73,2],[103,6,73,2,"key"],[103,9,73,2],[104,6,73,2,"value"],[104,11,73,2],[105,8,73,2],[105,12,73,2,"_processQueue"],[105,25,73,2],[105,32,73,2,"_asyncToGenerator2"],[105,50,73,2],[105,51,73,2,"default"],[105,58,73,2],[105,60,74,2],[105,73,74,23],[106,10,75,4],[106,14,75,8],[106,18,75,12],[106,19,75,13,"isProcessing"],[106,31,75,25],[106,33,75,27],[107,10,77,4],[107,14,77,8],[107,15,77,9,"isProcessing"],[107,27,77,21],[107,30,77,24],[107,34,77,28],[108,10,78,4],[110,10,80,4],[110,14,80,8],[111,12,81,6],[111,16,81,12,"queue"],[111,21,81,17],[111,30,81,26],[111,34,81,30],[111,35,81,31,"getQueue"],[111,43,81,39],[111,44,81,40],[111,45,81,41],[112,12,82,6],[112,16,82,12,"pendingItems"],[112,28,82,24],[112,31,82,27,"queue"],[112,36,82,32],[112,37,82,33,"filter"],[112,43,82,39],[112,44,82,40,"item"],[112,48,82,44],[112,52,82,48,"item"],[112,56,82,52],[112,57,82,53,"status"],[112,63,82,59],[112,68,82,64],[112,77,82,73],[112,78,82,74],[113,12,84,6],[113,16,84,10,"pendingItems"],[113,28,84,22],[113,29,84,23,"length"],[113,35,84,29],[113,40,84,34],[113,41,84,35],[113,43,84,37],[114,14,85,8],[115,14,86,8],[115,18,86,12],[115,19,86,13,"isProcessing"],[115,31,86,25],[115,34,86,28],[115,39,86,33],[116,14,87,8],[117,12,88,6],[118,12,90,6,"console"],[118,19,90,13],[118,20,90,14,"log"],[118,23,90,17],[118,24,90,18],[118,59,90,53,"pendingItems"],[118,71,90,65],[118,72,90,66,"length"],[118,78,90,72],[118,102,90,96],[118,103,90,97],[119,12,92,6],[119,16,92,10,"successCount"],[119,28,92,22],[119,31,92,25],[119,32,92,26],[120,12,93,6],[120,16,93,10,"failCount"],[120,25,93,19],[120,28,93,22],[120,29,93,23],[121,12,95,6],[121,17,95,11],[121,21,95,17,"item"],[121,25,95,21],[121,29,95,25,"pendingItems"],[121,41,95,37],[121,43,95,39],[122,14,96,8],[122,18,96,12],[123,16,97,10],[124,16,98,10],[124,20,98,16,"netState"],[124,28,98,24],[124,37,98,33,"NetInfo"],[124,53,98,40],[124,54,98,41,"fetch"],[124,59,98,46],[124,60,98,47],[124,61,98,48],[125,16,99,10],[125,20,99,14],[125,21,99,15,"netState"],[125,29,99,23],[125,30,99,24,"isConnected"],[125,41,99,35],[125,43,99,37],[126,18,100,12],[127,18,101,12],[128,16,102,10],[129,16,104,10,"console"],[129,23,104,17],[129,24,104,18,"log"],[129,27,104,21],[129,28,104,22],[129,58,104,52,"item"],[129,62,104,56],[129,63,104,57,"data"],[129,67,104,61],[129,68,104,62,"length"],[129,74,104,68],[129,87,104,81],[129,88,104,82],[130,16,105,10],[130,20,105,16,"result"],[130,26,105,22],[130,35,105,31,"firebaseService"],[130,59,105,46],[130,60,105,47,"addScans"],[130,68,105,55],[130,69,105,56,"item"],[130,73,105,60],[130,74,105,61,"data"],[130,78,105,65],[130,79,105,66],[131,16,107,10],[131,20,107,14,"result"],[131,26,107,20],[131,27,107,21,"success"],[131,34,107,28],[131,36,107,30],[132,18,108,12],[133,18,109,12,"item"],[133,22,109,16],[133,23,109,17,"status"],[133,29,109,23],[133,32,109,26],[133,43,109,37],[134,18,110,12,"item"],[134,22,110,16],[134,23,110,17,"completedAt"],[134,34,110,28],[134,37,110,31,"Date"],[134,41,110,35],[134,42,110,36,"now"],[134,45,110,39],[134,46,110,40],[134,47,110,41],[135,18,111,12,"successCount"],[135,30,111,24],[135,32,111,26],[136,18,113,12,"console"],[136,25,113,19],[136,26,113,20,"log"],[136,29,113,23],[136,30,113,24],[136,64,113,58,"item"],[136,68,113,62],[136,69,113,63,"data"],[136,73,113,67],[136,74,113,68,"length"],[136,80,113,74],[136,90,113,84],[136,91,113,85],[137,18,114,12],[137,22,114,16],[137,23,114,17,"notifyListeners"],[137,38,114,32],[137,39,114,33],[137,45,114,39],[137,47,114,41],[138,20,114,43,"count"],[138,25,114,48],[138,27,114,50,"item"],[138,31,114,54],[138,32,114,55,"data"],[138,36,114,59],[138,37,114,60,"length"],[139,18,114,67],[139,19,114,68],[139,20,114,69],[140,16,115,10],[140,17,115,11],[140,23,115,17],[141,18,116,12],[141,24,116,18],[141,28,116,22,"Error"],[141,33,116,27],[141,34,116,28,"result"],[141,40,116,34],[141,41,116,35,"error"],[141,46,116,40],[141,50,116,44],[141,63,116,57],[141,64,116,58],[142,16,117,10],[143,14,119,8],[143,15,119,9],[143,16,119,10],[143,23,119,17,"error"],[143,28,119,22],[143,30,119,24],[144,16,120,10,"console"],[144,23,120,17],[144,24,120,18,"error"],[144,29,120,23],[144,30,120,24],[144,67,120,61,"item"],[144,71,120,65],[144,72,120,66,"id"],[144,74,120,68],[144,77,120,71],[144,79,120,73,"error"],[144,84,120,78],[144,85,120,79,"message"],[144,92,120,86],[144,93,120,87],[145,16,122,10,"item"],[145,20,122,14],[145,21,122,15,"retryCount"],[145,31,122,25],[145,34,122,28],[145,35,122,29,"item"],[145,39,122,33],[145,40,122,34,"retryCount"],[145,50,122,44],[145,54,122,48],[145,55,122,49],[145,59,122,53],[145,60,122,54],[146,16,123,10,"item"],[146,20,123,14],[146,21,123,15,"lastError"],[146,30,123,24],[146,33,123,27,"error"],[146,38,123,32],[146,39,123,33,"message"],[146,46,123,40],[147,16,124,10,"item"],[147,20,124,14],[147,21,124,15,"lastRetry"],[147,30,124,24],[147,33,124,27,"Date"],[147,37,124,31],[147,38,124,32,"now"],[147,41,124,35],[147,42,124,36],[147,43,124,37],[149,16,126,10],[150,16,127,10],[150,20,127,14,"item"],[150,24,127,18],[150,25,127,19,"retryCount"],[150,35,127,29],[150,39,127,33],[150,40,127,34],[150,42,127,36],[151,18,128,12,"item"],[151,22,128,16],[151,23,128,17,"status"],[151,29,128,23],[151,32,128,26],[151,40,128,34],[152,18,129,12,"console"],[152,25,129,19],[152,26,129,20,"error"],[152,31,129,25],[152,32,129,26],[152,81,129,75,"item"],[152,85,129,79],[152,86,129,80,"id"],[152,88,129,82],[152,90,129,84],[152,91,129,85],[153,16,130,10],[154,16,132,10,"failCount"],[154,25,132,19],[154,27,132,21],[155,14,133,8],[156,12,134,6],[158,12,136,6],[159,12,137,6],[159,18,137,12,"AsyncStorage"],[159,39,137,24],[159,40,137,25,"setItem"],[159,47,137,32],[159,48,137,33],[159,52,137,37],[159,53,137,38,"queueKey"],[159,61,137,46],[159,63,137,48,"JSON"],[159,67,137,52],[159,68,137,53,"stringify"],[159,77,137,62],[159,78,137,63,"queue"],[159,83,137,68],[159,84,137,69],[159,85,137,70],[161,12,139,6],[162,12,140,6],[162,18,140,12],[162,22,140,16],[162,23,140,17,"cleanupQueue"],[162,35,140,29],[162,36,140,30],[162,37,140,31],[163,12,142,6,"console"],[163,19,142,13],[163,20,142,14,"log"],[163,23,142,17],[163,24,142,18],[163,64,142,58,"successCount"],[163,76,142,70],[163,89,142,83,"failCount"],[163,98,142,92],[163,107,142,101],[163,108,142,102],[164,12,144,6],[164,16,144,10],[164,17,144,11,"notifyListeners"],[164,32,144,26],[164,33,144,27],[164,44,144,38],[164,46,144,40],[165,14,145,8,"success"],[165,21,145,15],[165,23,145,17,"successCount"],[165,35,145,29],[166,14,146,8,"failed"],[166,20,146,14],[166,22,146,16,"failCount"],[166,31,146,25],[167,14,147,8,"remaining"],[167,23,147,17],[167,31,147,25],[167,35,147,29],[167,36,147,30,"getQueueSize"],[167,48,147,42],[167,49,147,43],[168,12,148,6],[168,13,148,7],[168,14,148,8],[169,10,150,4],[169,11,150,5],[169,12,150,6],[169,19,150,13,"error"],[169,24,150,18],[169,26,150,20],[170,12,151,6,"console"],[170,19,151,13],[170,20,151,14,"error"],[170,25,151,19],[170,26,151,20],[170,69,151,63],[170,71,151,65,"error"],[170,76,151,70],[170,77,151,71],[171,10,152,4],[171,11,152,5],[171,20,152,14],[172,12,153,6],[172,16,153,10],[172,17,153,11,"isProcessing"],[172,29,153,23],[172,32,153,26],[172,37,153,31],[173,10,154,4],[174,8,155,2],[174,9,155,3],[175,8,155,3],[175,17,74,8,"processQueue"],[175,29,74,20,"processQueue"],[175,30,74,20],[176,10,74,20],[176,17,74,20,"_processQueue"],[176,30,74,20],[176,31,74,20,"apply"],[176,36,74,20],[176,43,74,20,"arguments"],[176,52,74,20],[177,8,74,20],[178,8,74,20],[178,15,74,8,"processQueue"],[178,27,74,20],[179,6,74,20],[179,10,157,2],[180,4,157,2],[181,6,157,2,"key"],[181,9,157,2],[182,6,157,2,"value"],[182,11,157,2],[183,8,157,2],[183,12,157,2,"_cleanupQueue"],[183,25,157,2],[183,32,157,2,"_asyncToGenerator2"],[183,50,157,2],[183,51,157,2,"default"],[183,58,157,2],[183,60,158,2],[183,73,158,23],[184,10,159,4],[184,14,159,8],[185,12,160,6],[185,16,160,12,"queue"],[185,21,160,17],[185,30,160,26],[185,34,160,30],[185,35,160,31,"getQueue"],[185,43,160,39],[185,44,160,40],[185,45,160,41],[186,12,161,6],[186,16,161,12,"now"],[186,19,161,15],[186,22,161,18,"Date"],[186,26,161,22],[186,27,161,23,"now"],[186,30,161,26],[186,31,161,27],[186,32,161,28],[187,12,162,6],[187,16,162,12,"maxAge"],[187,22,162,18],[187,33,162,40],[187,34,162,41],[187,35,162,42],[189,12,164,6],[189,16,164,12,"cleanedQueue"],[189,28,164,24],[189,31,164,27,"queue"],[189,36,164,32],[189,37,164,33,"filter"],[189,43,164,39],[189,44,164,40,"item"],[189,48,164,44],[189,52,164,48],[190,14,165,8],[191,14,166,8],[191,18,166,12,"item"],[191,22,166,16],[191,23,166,17,"status"],[191,29,166,23],[191,34,166,28],[191,43,166,37],[191,45,166,39],[191,52,166,46],[191,56,166,50],[193,14,168,8],[194,14,169,8],[194,18,169,14,"age"],[194,21,169,17],[194,24,169,20,"now"],[194,27,169,23],[194,31,169,27,"item"],[194,35,169,31],[194,36,169,32,"completedAt"],[194,47,169,43],[194,51,169,47,"item"],[194,55,169,51],[194,56,169,52,"timestamp"],[194,65,169,61],[194,66,169,62],[195,14,170,8],[195,21,170,15,"age"],[195,24,170,18],[195,27,170,21,"maxAge"],[195,33,170,27],[196,12,171,6],[196,13,171,7],[196,14,171,8],[197,12,173,6],[197,16,173,10,"cleanedQueue"],[197,28,173,22],[197,29,173,23,"length"],[197,35,173,29],[197,40,173,34,"queue"],[197,45,173,39],[197,46,173,40,"length"],[197,52,173,46],[197,54,173,48],[198,14,174,8],[198,20,174,14,"AsyncStorage"],[198,41,174,26],[198,42,174,27,"setItem"],[198,49,174,34],[198,50,174,35],[198,54,174,39],[198,55,174,40,"queueKey"],[198,63,174,48],[198,65,174,50,"JSON"],[198,69,174,54],[198,70,174,55,"stringify"],[198,79,174,64],[198,80,174,65,"cleanedQueue"],[198,92,174,77],[198,93,174,78],[198,94,174,79],[199,14,175,8,"console"],[199,21,175,15],[199,22,175,16,"log"],[199,25,175,19],[199,26,175,20],[199,63,175,57,"queue"],[199,68,175,62],[199,69,175,63,"length"],[199,75,175,69],[199,78,175,72,"cleanedQueue"],[199,90,175,84],[199,91,175,85,"length"],[199,97,175,91],[199,126,175,120],[199,127,175,121],[200,12,176,6],[201,10,177,4],[201,11,177,5],[201,12,177,6],[201,19,177,13,"error"],[201,24,177,18],[201,26,177,20],[202,12,178,6,"console"],[202,19,178,13],[202,20,178,14,"error"],[202,25,178,19],[202,26,178,20],[202,66,178,60],[202,68,178,62,"error"],[202,73,178,67],[202,74,178,68],[203,10,179,4],[204,8,180,2],[204,9,180,3],[205,8,180,3],[205,17,158,8,"cleanupQueue"],[205,29,158,20,"cleanupQueue"],[205,30,158,20],[206,10,158,20],[206,17,158,20,"_cleanupQueue"],[206,30,158,20],[206,31,158,20,"apply"],[206,36,158,20],[206,43,158,20,"arguments"],[206,52,158,20],[207,8,158,20],[208,8,158,20],[208,15,158,8,"cleanupQueue"],[208,27,158,20],[209,6,158,20],[209,10,182,2],[210,4,182,2],[211,6,182,2,"key"],[211,9,182,2],[212,6,182,2,"value"],[212,11,182,2],[213,8,182,2],[213,12,182,2,"_clearQueue"],[213,23,182,2],[213,30,182,2,"_asyncToGenerator2"],[213,48,182,2],[213,49,182,2,"default"],[213,56,182,2],[213,58,183,2],[213,71,183,21],[214,10,184,4],[214,14,184,8],[215,12,185,6],[215,18,185,12,"AsyncStorage"],[215,39,185,24],[215,40,185,25,"removeItem"],[215,50,185,35],[215,51,185,36],[215,55,185,40],[215,56,185,41,"queueKey"],[215,64,185,49],[215,65,185,50],[216,12,186,6],[217,12,187,6],[217,16,187,10],[217,17,187,11,"notifyListeners"],[217,32,187,26],[217,33,187,27],[217,42,187,36],[217,44,187,38],[217,45,187,39],[217,46,187,40],[217,47,187,41],[218,10,188,4],[218,11,188,5],[218,12,188,6],[218,19,188,13,"error"],[218,24,188,18],[218,26,188,20],[219,12,189,6,"console"],[219,19,189,13],[219,20,189,14,"error"],[219,25,189,19],[219,26,189,20],[219,63,189,57],[219,65,189,59,"error"],[219,70,189,64],[219,71,189,65],[220,12,190,6],[220,18,190,12,"error"],[220,23,190,17],[221,10,191,4],[222,8,192,2],[222,9,192,3],[223,8,192,3],[223,17,183,8,"clearQueue"],[223,27,183,18,"clearQueue"],[223,28,183,18],[224,10,183,18],[224,17,183,18,"_clearQueue"],[224,28,183,18],[224,29,183,18,"apply"],[224,34,183,18],[224,41,183,18,"arguments"],[224,50,183,18],[225,8,183,18],[226,8,183,18],[226,15,183,8,"clearQueue"],[226,25,183,18],[227,6,183,18],[227,10,194,2],[228,4,194,2],[229,6,194,2,"key"],[229,9,194,2],[230,6,194,2,"value"],[230,11,194,2],[231,8,194,2],[231,12,194,2,"_forceProcess"],[231,25,194,2],[231,32,194,2,"_asyncToGenerator2"],[231,50,194,2],[231,51,194,2,"default"],[231,58,194,2],[231,60,195,2],[231,73,195,23],[232,10,196,4],[232,14,196,8],[232,18,196,12],[232,19,196,13,"isProcessing"],[232,31,196,25],[232,33,196,27],[233,12,197,6],[234,12,198,6],[235,10,199,4],[236,10,201,4],[236,14,201,10,"netState"],[236,22,201,18],[236,31,201,27,"NetInfo"],[236,47,201,34],[236,48,201,35,"fetch"],[236,53,201,40],[236,54,201,41],[236,55,201,42],[237,10,202,4],[237,14,202,8],[237,15,202,9,"netState"],[237,23,202,17],[237,24,202,18,"isConnected"],[237,35,202,29],[237,37,202,31],[238,12,203,6],[238,18,203,12],[238,22,203,16,"Error"],[238,27,203,21],[238,28,203,22],[238,64,203,58],[238,65,203,59],[239,10,204,4],[240,10,206,4],[240,16,206,10],[240,20,206,14],[240,21,206,15,"processQueue"],[240,33,206,27],[240,34,206,28],[240,35,206,29],[241,8,207,2],[241,9,207,3],[242,8,207,3],[242,17,195,8,"forceProcess"],[242,29,195,20,"forceProcess"],[242,30,195,20],[243,10,195,20],[243,17,195,20,"_forceProcess"],[243,30,195,20],[243,31,195,20,"apply"],[243,36,195,20],[243,43,195,20,"arguments"],[243,52,195,20],[244,8,195,20],[245,8,195,20],[245,15,195,8,"forceProcess"],[245,27,195,20],[246,6,195,20],[246,10,209,2],[247,4,209,2],[248,6,209,2,"key"],[248,9,209,2],[249,6,209,2,"value"],[249,11,209,2],[249,13,210,2],[249,22,210,2,"addListener"],[249,33,210,13,"addListener"],[249,34,210,14,"callback"],[249,42,210,22],[249,44,210,24],[250,8,211,4],[250,12,211,8],[250,13,211,9,"listeners"],[250,22,211,18],[250,23,211,19,"push"],[250,27,211,23],[250,28,211,24,"callback"],[250,36,211,32],[250,37,211,33],[251,8,212,4],[251,15,212,11],[251,21,212,17],[252,10,213,6],[252,14,213,10],[252,15,213,11,"listeners"],[252,24,213,20],[252,27,213,23],[252,31,213,27],[252,32,213,28,"listeners"],[252,41,213,37],[252,42,213,38,"filter"],[252,48,213,44],[252,49,213,45,"l"],[252,50,213,46],[252,54,213,50,"l"],[252,55,213,51],[252,60,213,56,"callback"],[252,68,213,64],[252,69,213,65],[253,8,214,4],[253,9,214,5],[254,6,215,2],[256,6,217,2],[257,4,217,2],[258,6,217,2,"key"],[258,9,217,2],[259,6,217,2,"value"],[259,11,217,2],[259,13,218,2],[259,22,218,2,"notifyListeners"],[259,37,218,17,"notifyListeners"],[259,38,218,18,"event"],[259,43,218,23],[259,45,218,25,"data"],[259,49,218,29],[259,51,218,31],[260,8,219,4],[260,12,219,8],[260,13,219,9,"listeners"],[260,22,219,18],[260,23,219,19,"forEach"],[260,30,219,26],[260,31,219,27,"listener"],[260,39,219,35],[260,43,219,39],[261,10,220,6],[261,14,220,10],[262,12,221,8,"listener"],[262,20,221,16],[262,21,221,17,"event"],[262,26,221,22],[262,28,221,24,"data"],[262,32,221,28],[262,33,221,29],[263,10,222,6],[263,11,222,7],[263,12,222,8],[263,19,222,15,"error"],[263,24,222,20],[263,26,222,22],[264,12,223,8,"console"],[264,19,223,15],[264,20,223,16,"error"],[264,25,223,21],[264,26,223,22],[264,59,223,55],[264,61,223,57,"error"],[264,66,223,62],[264,67,223,63],[265,10,224,6],[266,8,225,4],[266,9,225,5],[266,10,225,6],[267,6,226,2],[269,6,228,2],[270,4,228,2],[271,6,228,2,"key"],[271,9,228,2],[272,6,228,2,"value"],[272,11,228,2],[273,8,228,2],[273,12,228,2,"_getStats"],[273,21,228,2],[273,28,228,2,"_asyncToGenerator2"],[273,46,228,2],[273,47,228,2,"default"],[273,54,228,2],[273,56,229,2],[273,69,229,19],[274,10,230,4],[274,14,230,10,"queue"],[274,19,230,15],[274,28,230,24],[274,32,230,28],[274,33,230,29,"getQueue"],[274,41,230,37],[274,42,230,38],[274,43,230,39],[275,10,231,4],[275,17,231,11],[276,12,232,6,"total"],[276,17,232,11],[276,19,232,13,"queue"],[276,24,232,18],[276,25,232,19,"length"],[276,31,232,25],[277,12,233,6,"pending"],[277,19,233,13],[277,21,233,15,"queue"],[277,26,233,20],[277,27,233,21,"filter"],[277,33,233,27],[277,34,233,28,"item"],[277,38,233,32],[277,42,233,36,"item"],[277,46,233,40],[277,47,233,41,"status"],[277,53,233,47],[277,58,233,52],[277,67,233,61],[277,68,233,62],[277,69,233,63,"length"],[277,75,233,69],[278,12,234,6,"completed"],[278,21,234,15],[278,23,234,17,"queue"],[278,28,234,22],[278,29,234,23,"filter"],[278,35,234,29],[278,36,234,30,"item"],[278,40,234,34],[278,44,234,38,"item"],[278,48,234,42],[278,49,234,43,"status"],[278,55,234,49],[278,60,234,54],[278,71,234,65],[278,72,234,66],[278,73,234,67,"length"],[278,79,234,73],[279,12,235,6,"failed"],[279,18,235,12],[279,20,235,14,"queue"],[279,25,235,19],[279,26,235,20,"filter"],[279,32,235,26],[279,33,235,27,"item"],[279,37,235,31],[279,41,235,35,"item"],[279,45,235,39],[279,46,235,40,"status"],[279,52,235,46],[279,57,235,51],[279,65,235,59],[279,66,235,60],[279,67,235,61,"length"],[279,73,235,67],[280,12,236,6,"oldestPending"],[280,25,236,19],[280,27,236,21,"queue"],[280,32,236,26],[280,33,237,9,"filter"],[280,39,237,15],[280,40,237,16,"item"],[280,44,237,20],[280,48,237,24,"item"],[280,52,237,28],[280,53,237,29,"status"],[280,59,237,35],[280,64,237,40],[280,73,237,49],[280,74,237,50],[280,75,238,9,"reduce"],[280,81,238,15],[280,82,238,16],[280,83,238,17,"oldest"],[280,89,238,23],[280,91,238,25,"item"],[280,95,238,29],[280,100,239,10],[280,101,239,11,"oldest"],[280,107,239,17],[280,111,239,21,"item"],[280,115,239,25],[280,116,239,26,"timestamp"],[280,125,239,35],[280,128,239,38,"oldest"],[280,134,239,44],[280,135,239,45,"timestamp"],[280,144,239,54],[280,147,239,57,"item"],[280,151,239,61],[280,154,239,64,"oldest"],[280,160,239,70],[280,162,239,72],[280,166,239,76],[281,10,240,4],[281,11,240,5],[282,8,241,2],[282,9,241,3],[283,8,241,3],[283,17,229,8,"getStats"],[283,25,229,16,"getStats"],[283,26,229,16],[284,10,229,16],[284,17,229,16,"_getStats"],[284,26,229,16],[284,27,229,16,"apply"],[284,32,229,16],[284,39,229,16,"arguments"],[284,48,229,16],[285,8,229,16],[286,8,229,16],[286,15,229,8,"getStats"],[286,23,229,16],[287,6,229,16],[288,4,229,16],[289,2,229,16],[289,7,244,0],[290,2,245,0],[290,6,245,6,"offlineQueueService"],[290,25,245,25],[290,28,245,28],[290,32,245,32,"OfflineQueueService"],[290,51,245,51],[290,52,245,52],[290,53,245,53],[291,2,245,54],[291,6,245,54,"_default"],[291,14,245,54],[291,17,245,54,"exports"],[291,24,245,54],[291,25,245,54,"default"],[291,32,245,54],[291,35,247,15,"offlineQueueService"],[291,54,247,34],[292,0,247,34],[292,3]],"functionMap":{"names":["<global>","OfflineQueueService","OfflineQueueService#constructor","OfflineQueueService#initNetworkListener","NetInfo.addEventListener$argument_0","OfflineQueueService#addToQueue","OfflineQueueService#getQueue","OfflineQueueService#getQueueSize","queue.filter$argument_0","OfflineQueueService#processQueue","OfflineQueueService#cleanupQueue","OfflineQueueService#clearQueue","OfflineQueueService#forceProcess","OfflineQueueService#addListener","<anonymous>","listeners.filter$argument_0","OfflineQueueService#notifyListeners","listeners.forEach$argument_0","OfflineQueueService#getStats","queue.filter.reduce$argument_0"],"mappings":"AAA;ACI;ECC;GDQ;EEG;6BCC;KDM;GFC;EIG;GJ0B;EKG;GLQ;EMG;wBCE,iCD;GNC;EQG;wCDQ,iCC;GRyE;ESG;wCFM;OEO;GTS;EUG;GVS;EWG;GXY;EYG;WCE;6CCC,mBD;KDC;GZC;EeG;2BCC;KDM;GfC;EiBG;4BVI,iCU;8BVC,mCU;2BVC,gCU;gBVE,iCU;gBCC;sEDC;GjBE;CDC"}},"type":"js/module"}]}