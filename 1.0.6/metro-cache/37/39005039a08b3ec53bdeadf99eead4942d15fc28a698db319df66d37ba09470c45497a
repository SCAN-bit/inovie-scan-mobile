{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":122,"column":43,"index":4511}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":122,"column":43,"index":4511}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":122,"column":43,"index":4511}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./PostgrestQueryBuilder","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":48,"index":264},"end":{"line":6,"column":82,"index":298}}],"key":"AHVsGo+FtJIM9qinoREdhwyHlBU="}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":49,"index":350},"end":{"line":7,"column":84,"index":385}}],"key":"gSed/J6HS9dN5Bn5UwHXNT8cOqE="}},{"name":"./constants","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":20,"index":408},"end":{"line":8,"column":42,"index":430}}],"key":"+w+ycjOssqrFJ0RRPi082paMSXY="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0]);\n  var _classCallCheck = require(_dependencyMap[1]);\n  var _createClass = require(_dependencyMap[2]);\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestQueryBuilder_1 = __importDefault(require(_dependencyMap[3]));\n  var PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[4]));\n  var constants_1 = require(_dependencyMap[5]);\n  /**\n   * PostgREST client.\n   *\n   * @typeParam Database - Types for the schema from the [type\n   * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n   *\n   * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n   * literal, the same one passed to the constructor. If the schema is not\n   * `\"public\"`, this must be supplied manually.\n   */\n  var PostgrestClient = /*#__PURE__*/function () {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    function PostgrestClient(url) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === undefined ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n      _classCallCheck(this, PostgrestClient);\n      this.url = url;\n      this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);\n      this.schemaName = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    return _createClass(PostgrestClient, [{\n      key: \"from\",\n      value: function from(relation) {\n        var url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder_1.default(url, {\n          headers: Object.assign({}, this.headers),\n          schema: this.schemaName,\n          fetch: this.fetch\n        });\n      }\n      /**\n       * Select a schema to query or perform an function (rpc) call.\n       *\n       * The schema needs to be on the list of exposed schemas inside Supabase.\n       *\n       * @param schema - The schema to query\n       */\n    }, {\n      key: \"schema\",\n      value: function schema(_schema) {\n        return new PostgrestClient(this.url, {\n          headers: this.headers,\n          schema: _schema,\n          fetch: this.fetch\n        });\n      }\n      /**\n       * Perform a function call.\n       *\n       * @param fn - The function name to call\n       * @param args - The arguments to pass to the function call\n       * @param options - Named parameters\n       * @param options.head - When set to `true`, `data` will not be returned.\n       * Useful if you only need the count.\n       * @param options.get - When set to `true`, the function will be called with\n       * read-only access mode.\n       * @param options.count - Count algorithm to use to count rows returned by the\n       * function. Only applicable for [set-returning\n       * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"rpc\",\n      value: function rpc(fn) {\n        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === undefined ? false : _ref2$head,\n          _ref2$get = _ref2.get,\n          get = _ref2$get === undefined ? false : _ref2$get,\n          count = _ref2.count;\n        var method;\n        var url = new URL(`${this.url}/rpc/${fn}`);\n        var body;\n        if (head || get) {\n          method = head ? 'HEAD' : 'GET';\n          Object.entries(args)\n          // params with undefined value needs to be filtered out, otherwise it'll\n          // show up as `?param=undefined`\n          .filter(_ref3 => {\n            var _ref4 = _slicedToArray(_ref3, 2),\n              _ = _ref4[0],\n              value = _ref4[1];\n            return value !== undefined;\n          })\n          // array values need special syntax\n          .map(_ref5 => {\n            var _ref6 = _slicedToArray(_ref5, 2),\n              name = _ref6[0],\n              value = _ref6[1];\n            return [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`];\n          }).forEach(_ref7 => {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              name = _ref8[0],\n              value = _ref8[1];\n            url.searchParams.append(name, value);\n          });\n        } else {\n          method = 'POST';\n          body = args;\n        }\n        var headers = Object.assign({}, this.headers);\n        if (count) {\n          headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url,\n          headers,\n          schema: this.schemaName,\n          body,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n    }]);\n  }();\n  exports.default = PostgrestClient;\n});","lineCount":162,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[7,2,2,0],[7,6,2,4,"__importDefault"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__importDefault"],[7,52,2,51],[7,56,2,56],[7,66,2,66,"mod"],[7,69,2,69],[7,71,2,71],[8,4,3,4],[8,11,3,12,"mod"],[8,14,3,15],[8,18,3,19,"mod"],[8,21,3,22],[8,22,3,23,"__esModule"],[8,32,3,33],[8,35,3,37,"mod"],[8,38,3,40],[8,41,3,43],[9,6,3,45],[9,15,3,54],[9,17,3,56,"mod"],[10,4,3,60],[10,5,3,61],[11,2,4,0],[11,3,4,1],[12,2,5,0,"Object"],[12,8,5,6],[12,9,5,7,"defineProperty"],[12,23,5,21],[12,24,5,22,"exports"],[12,31,5,29],[12,33,5,31],[12,45,5,43],[12,47,5,45],[13,4,5,47,"value"],[13,9,5,52],[13,11,5,54],[14,2,5,59],[14,3,5,60],[14,4,5,61],[15,2,6,0],[15,6,6,6,"PostgrestQueryBuilder_1"],[15,29,6,29],[15,32,6,32,"__importDefault"],[15,47,6,47],[15,48,6,48,"require"],[15,55,6,55],[15,56,6,55,"_dependencyMap"],[15,70,6,55],[15,73,6,81],[15,74,6,82],[15,75,6,83],[16,2,7,0],[16,6,7,6,"PostgrestFilterBuilder_1"],[16,30,7,30],[16,33,7,33,"__importDefault"],[16,48,7,48],[16,49,7,49,"require"],[16,56,7,56],[16,57,7,56,"_dependencyMap"],[16,71,7,56],[16,74,7,83],[16,75,7,84],[16,76,7,85],[17,2,8,0],[17,6,8,6,"constants_1"],[17,17,8,17],[17,20,8,20,"require"],[17,27,8,27],[17,28,8,27,"_dependencyMap"],[17,42,8,27],[17,45,8,41],[17,46,8,42],[18,2,9,0],[19,0,10,0],[20,0,11,0],[21,0,12,0],[22,0,13,0],[23,0,14,0],[24,0,15,0],[25,0,16,0],[26,0,17,0],[27,0,18,0],[28,2,9,0],[28,6,19,6,"PostgrestClient"],[28,21,19,21],[29,4,20,4],[30,4,21,4],[31,0,22,0],[32,0,23,0],[33,0,24,0],[34,0,25,0],[35,0,26,0],[36,0,27,0],[37,0,28,0],[38,0,29,0],[39,4,30,4],[39,13,30,4,"PostgrestClient"],[39,29,30,16,"url"],[39,32,30,19],[39,34,30,60],[40,6,30,60],[40,10,30,60,"_ref"],[40,14,30,60],[40,17,30,60,"arguments"],[40,26,30,60],[40,27,30,60,"length"],[40,33,30,60],[40,41,30,60,"arguments"],[40,50,30,60],[40,58,30,60,"undefined"],[40,67,30,60],[40,70,30,60,"arguments"],[40,79,30,60],[40,85,30,56],[40,86,30,57],[40,87,30,58],[41,8,30,58,"_ref$headers"],[41,20,30,58],[41,23,30,58,"_ref"],[41,27,30,58],[41,28,30,23,"headers"],[41,35,30,30],[42,8,30,23,"headers"],[42,15,30,30],[42,18,30,30,"_ref$headers"],[42,30,30,30],[42,35,30,30,"undefined"],[42,44,30,30],[42,47,30,33],[42,48,30,34],[42,49,30,35],[42,52,30,35,"_ref$headers"],[42,64,30,35],[43,8,30,37,"schema"],[43,14,30,43],[43,17,30,43,"_ref"],[43,21,30,43],[43,22,30,37,"schema"],[43,28,30,43],[44,8,30,45,"fetch"],[44,13,30,50],[44,16,30,50,"_ref"],[44,20,30,50],[44,21,30,45,"fetch"],[44,26,30,50],[45,6,30,50,"_classCallCheck"],[45,21,30,50],[45,28,30,50,"PostgrestClient"],[45,43,30,50],[46,6,31,8],[46,10,31,12],[46,11,31,13,"url"],[46,14,31,16],[46,17,31,19,"url"],[46,20,31,22],[47,6,32,8],[47,10,32,12],[47,11,32,13,"headers"],[47,18,32,20],[47,21,32,23,"Object"],[47,27,32,29],[47,28,32,30,"assign"],[47,34,32,36],[47,35,32,37,"Object"],[47,41,32,43],[47,42,32,44,"assign"],[47,48,32,50],[47,49,32,51],[47,50,32,52],[47,51,32,53],[47,53,32,55,"constants_1"],[47,64,32,66],[47,65,32,67,"DEFAULT_HEADERS"],[47,80,32,82],[47,81,32,83],[47,83,32,85,"headers"],[47,90,32,92],[47,91,32,93],[48,6,33,8],[48,10,33,12],[48,11,33,13,"schemaName"],[48,21,33,23],[48,24,33,26,"schema"],[48,30,33,32],[49,6,34,8],[49,10,34,12],[49,11,34,13,"fetch"],[49,16,34,18],[49,19,34,21,"fetch"],[49,24,34,26],[50,4,35,4],[51,4,36,4],[52,0,37,0],[53,0,38,0],[54,0,39,0],[55,0,40,0],[56,4,36,4],[56,11,36,4,"_createClass"],[56,23,36,4],[56,24,36,4,"PostgrestClient"],[56,39,36,4],[57,6,36,4,"key"],[57,9,36,4],[58,6,36,4,"value"],[58,11,36,4],[58,13,41,4],[58,22,41,4,"from"],[58,26,41,8,"from"],[58,27,41,9,"relation"],[58,35,41,17],[58,37,41,19],[59,8,42,8],[59,12,42,14,"url"],[59,15,42,17],[59,18,42,20],[59,22,42,24,"URL"],[59,25,42,27],[59,26,42,28],[59,29,42,31],[59,33,42,35],[59,34,42,36,"url"],[59,37,42,39],[59,41,42,43,"relation"],[59,49,42,51],[59,51,42,53],[59,52,42,54],[60,8,43,8],[60,15,43,15],[60,19,43,19,"PostgrestQueryBuilder_1"],[60,42,43,42],[60,43,43,43,"default"],[60,50,43,50],[60,51,43,51,"url"],[60,54,43,54],[60,56,43,56],[61,10,44,12,"headers"],[61,17,44,19],[61,19,44,21,"Object"],[61,25,44,27],[61,26,44,28,"assign"],[61,32,44,34],[61,33,44,35],[61,34,44,36],[61,35,44,37],[61,37,44,39],[61,41,44,43],[61,42,44,44,"headers"],[61,49,44,51],[61,50,44,52],[62,10,45,12,"schema"],[62,16,45,18],[62,18,45,20],[62,22,45,24],[62,23,45,25,"schemaName"],[62,33,45,35],[63,10,46,12,"fetch"],[63,15,46,17],[63,17,46,19],[63,21,46,23],[63,22,46,24,"fetch"],[64,8,47,8],[64,9,47,9],[64,10,47,10],[65,6,48,4],[66,6,49,4],[67,0,50,0],[68,0,51,0],[69,0,52,0],[70,0,53,0],[71,0,54,0],[72,0,55,0],[73,4,49,4],[74,6,49,4,"key"],[74,9,49,4],[75,6,49,4,"value"],[75,11,49,4],[75,13,56,4],[75,22,56,4,"schema"],[75,28,56,10,"schema"],[75,29,56,11,"schema"],[75,36,56,17],[75,38,56,19],[76,8,57,8],[76,15,57,15],[76,19,57,19,"PostgrestClient"],[76,34,57,34],[76,35,57,35],[76,39,57,39],[76,40,57,40,"url"],[76,43,57,43],[76,45,57,45],[77,10,58,12,"headers"],[77,17,58,19],[77,19,58,21],[77,23,58,25],[77,24,58,26,"headers"],[77,31,58,33],[78,10,59,12,"schema"],[78,16,59,18],[78,18,59,12,"schema"],[78,25,59,18],[79,10,60,12,"fetch"],[79,15,60,17],[79,17,60,19],[79,21,60,23],[79,22,60,24,"fetch"],[80,8,61,8],[80,9,61,9],[80,10,61,10],[81,6,62,4],[82,6,63,4],[83,0,64,0],[84,0,65,0],[85,0,66,0],[86,0,67,0],[87,0,68,0],[88,0,69,0],[89,0,70,0],[90,0,71,0],[91,0,72,0],[92,0,73,0],[93,0,74,0],[94,0,75,0],[95,0,76,0],[96,0,77,0],[97,0,78,0],[98,0,79,0],[99,0,80,0],[100,0,81,0],[101,0,82,0],[102,0,83,0],[103,0,84,0],[104,0,85,0],[105,4,63,4],[106,6,63,4,"key"],[106,9,63,4],[107,6,63,4,"value"],[107,11,63,4],[107,13,86,4],[107,22,86,4,"rpc"],[107,25,86,7,"rpc"],[107,26,86,8,"fn"],[107,28,86,10],[107,30,86,67],[108,8,86,67],[108,12,86,12,"args"],[108,16,86,16],[108,19,86,16,"arguments"],[108,28,86,16],[108,29,86,16,"length"],[108,35,86,16],[108,43,86,16,"arguments"],[108,52,86,16],[108,60,86,16,"undefined"],[108,69,86,16],[108,72,86,16,"arguments"],[108,81,86,16],[108,87,86,19],[108,88,86,20],[108,89,86,21],[109,8,86,21],[109,12,86,21,"_ref2"],[109,17,86,21],[109,20,86,21,"arguments"],[109,29,86,21],[109,30,86,21,"length"],[109,36,86,21],[109,44,86,21,"arguments"],[109,53,86,21],[109,61,86,21,"undefined"],[109,70,86,21],[109,73,86,21,"arguments"],[109,82,86,21],[109,88,86,63],[109,89,86,64],[109,90,86,65],[110,10,86,65,"_ref2$head"],[110,20,86,65],[110,23,86,65,"_ref2"],[110,28,86,65],[110,29,86,25,"head"],[110,33,86,29],[111,10,86,25,"head"],[111,14,86,29],[111,17,86,29,"_ref2$head"],[111,27,86,29],[111,32,86,29,"undefined"],[111,41,86,29],[111,44,86,32],[111,49,86,37],[111,52,86,37,"_ref2$head"],[111,62,86,37],[112,10,86,37,"_ref2$get"],[112,19,86,37],[112,22,86,37,"_ref2"],[112,27,86,37],[112,28,86,39,"get"],[112,31,86,42],[113,10,86,39,"get"],[113,13,86,42],[113,16,86,42,"_ref2$get"],[113,25,86,42],[113,30,86,42,"undefined"],[113,39,86,42],[113,42,86,45],[113,47,86,50],[113,50,86,50,"_ref2$get"],[113,59,86,50],[114,10,86,52,"count"],[114,15,86,57],[114,18,86,57,"_ref2"],[114,23,86,57],[114,24,86,52,"count"],[114,29,86,57],[115,8,87,8],[115,12,87,12,"method"],[115,18,87,18],[116,8,88,8],[116,12,88,14,"url"],[116,15,88,17],[116,18,88,20],[116,22,88,24,"URL"],[116,25,88,27],[116,26,88,28],[116,29,88,31],[116,33,88,35],[116,34,88,36,"url"],[116,37,88,39],[116,45,88,47,"fn"],[116,47,88,49],[116,49,88,51],[116,50,88,52],[117,8,89,8],[117,12,89,12,"body"],[117,16,89,16],[118,8,90,8],[118,12,90,12,"head"],[118,16,90,16],[118,20,90,20,"get"],[118,23,90,23],[118,25,90,25],[119,10,91,12,"method"],[119,16,91,18],[119,19,91,21,"head"],[119,23,91,25],[119,26,91,28],[119,32,91,34],[119,35,91,37],[119,40,91,42],[120,10,92,12,"Object"],[120,16,92,18],[120,17,92,19,"entries"],[120,24,92,26],[120,25,92,27,"args"],[120,29,92,31],[121,10,93,16],[122,10,94,16],[123,10,94,16],[123,11,95,17,"filter"],[123,17,95,23],[123,18,95,24,"_ref3"],[123,23,95,24],[124,12,95,24],[124,16,95,24,"_ref4"],[124,21,95,24],[124,24,95,24,"_slicedToArray"],[124,38,95,24],[124,39,95,24,"_ref3"],[124,44,95,24],[125,14,95,26,"_"],[125,15,95,27],[125,18,95,27,"_ref4"],[125,23,95,27],[126,14,95,29,"value"],[126,19,95,34],[126,22,95,34,"_ref4"],[126,27,95,34],[127,12,95,34],[127,19,95,40,"value"],[127,24,95,45],[127,29,95,50,"undefined"],[127,38,95,59],[128,10,95,59],[129,10,96,16],[130,10,96,16],[130,11,97,17,"map"],[130,14,97,20],[130,15,97,21,"_ref5"],[130,20,97,21],[131,12,97,21],[131,16,97,21,"_ref6"],[131,21,97,21],[131,24,97,21,"_slicedToArray"],[131,38,97,21],[131,39,97,21,"_ref5"],[131,44,97,21],[132,14,97,23,"name"],[132,18,97,27],[132,21,97,27,"_ref6"],[132,26,97,27],[133,14,97,29,"value"],[133,19,97,34],[133,22,97,34,"_ref6"],[133,27,97,34],[134,12,97,34],[134,19,97,40],[134,20,97,41,"name"],[134,24,97,45],[134,26,97,47,"Array"],[134,31,97,52],[134,32,97,53,"isArray"],[134,39,97,60],[134,40,97,61,"value"],[134,45,97,66],[134,46,97,67],[134,49,97,70],[134,53,97,74,"value"],[134,58,97,79],[134,59,97,80,"join"],[134,63,97,84],[134,64,97,85],[134,67,97,88],[134,68,97,89],[134,71,97,92],[134,74,97,95],[134,77,97,98,"value"],[134,82,97,103],[134,84,97,105],[134,85,97,106],[135,10,97,106],[135,12,97,107],[135,13,98,17,"forEach"],[135,20,98,24],[135,21,98,25,"_ref7"],[135,26,98,25],[135,30,98,44],[136,12,98,44],[136,16,98,44,"_ref8"],[136,21,98,44],[136,24,98,44,"_slicedToArray"],[136,38,98,44],[136,39,98,44,"_ref7"],[136,44,98,44],[137,14,98,27,"name"],[137,18,98,31],[137,21,98,31,"_ref8"],[137,26,98,31],[138,14,98,33,"value"],[138,19,98,38],[138,22,98,38,"_ref8"],[138,27,98,38],[139,12,99,16,"url"],[139,15,99,19],[139,16,99,20,"searchParams"],[139,28,99,32],[139,29,99,33,"append"],[139,35,99,39],[139,36,99,40,"name"],[139,40,99,44],[139,42,99,46,"value"],[139,47,99,51],[139,48,99,52],[140,10,100,12],[140,11,100,13],[140,12,100,14],[141,8,101,8],[141,9,101,9],[141,15,102,13],[142,10,103,12,"method"],[142,16,103,18],[142,19,103,21],[142,25,103,27],[143,10,104,12,"body"],[143,14,104,16],[143,17,104,19,"args"],[143,21,104,23],[144,8,105,8],[145,8,106,8],[145,12,106,14,"headers"],[145,19,106,21],[145,22,106,24,"Object"],[145,28,106,30],[145,29,106,31,"assign"],[145,35,106,37],[145,36,106,38],[145,37,106,39],[145,38,106,40],[145,40,106,42],[145,44,106,46],[145,45,106,47,"headers"],[145,52,106,54],[145,53,106,55],[146,8,107,8],[146,12,107,12,"count"],[146,17,107,17],[146,19,107,19],[147,10,108,12,"headers"],[147,17,108,19],[147,18,108,20],[147,26,108,28],[147,27,108,29],[147,30,108,32],[147,39,108,41,"count"],[147,44,108,46],[147,46,108,48],[148,8,109,8],[149,8,110,8],[149,15,110,15],[149,19,110,19,"PostgrestFilterBuilder_1"],[149,43,110,43],[149,44,110,44,"default"],[149,51,110,51],[149,52,110,52],[150,10,111,12,"method"],[150,16,111,18],[151,10,112,12,"url"],[151,13,112,15],[152,10,113,12,"headers"],[152,17,113,19],[153,10,114,12,"schema"],[153,16,114,18],[153,18,114,20],[153,22,114,24],[153,23,114,25,"schemaName"],[153,33,114,35],[154,10,115,12,"body"],[154,14,115,16],[155,10,116,12,"fetch"],[155,15,116,17],[155,17,116,19],[155,21,116,23],[155,22,116,24,"fetch"],[155,27,116,29],[156,10,117,12,"allowEmpty"],[156,20,117,22],[156,22,117,24],[157,8,118,8],[157,9,118,9],[157,10,118,10],[158,6,119,4],[159,4,119,5],[160,2,119,5],[161,2,121,0,"exports"],[161,9,121,7],[161,10,121,8,"default"],[161,17,121,15],[161,20,121,18,"PostgrestClient"],[161,35,121,33],[162,0,121,34],[162,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestClient","constructor","from","schema","rpc","Object.entries.filter$argument_0","Object.entries.filter.map$argument_0","Object.entries.filter.map.forEach$argument_0"],"mappings":"AAA;wDCC;CDE;AEe;ICW;KDK;IEM;KFO;IGQ;KHM;IIwB;wBCS,mCD;qBEE,qFF;yBGC;aHE;KJmB;CFC"}},"type":"js/module"}]}